<?xml version="1.0"?>
<configuration>
  <system.serviceModel>
    <bindings>
      <netTcpBinding>
        <!--
     超时控制：
          openTimeout       系统默认值 1 分钟，指传输引发异常之前可用于打开基础连接的时间间隔；
          sendTimeout       系统默认值 1 分钟，指传输引发异常之前可用于完成写入操作的时间间隔；
                              系统为请求发起方时，指可用于发送请求消息的最大时间；
                              系统为请求响应方时，指可用于发送请求响应消息的最大时间；
          closeTimeout      系统默认值 1 分钟，在传输引发异常之前可用于关闭连接的时间间隔；
                              系统为请求发起方时，指系统主动关闭连接过程中可用的最大时间； 
                              系统为请求响应方时，指系统因处于非活动状态超过 receiveTimeout 或 inactivityTimeout 限定值时主动关闭连接过程中可用的最大时间；
          receiveTimeout    系统默认值 10 分钟，指系统可用于等待接收消息或基础结构消息的最大时间，如果超过该时间间隔仍未收到任何消息，将关闭基础连接；
          
          inactivityTimeout 系统默认值 10 分钟，可靠回话 <reliableSession inactivityTimeout="00.00:05:00"/>
                            指系统可用于等待接收消息或基础结构消息的最大时间，如果超过该时间间隔仍未收到任何消息，将关闭基础连接；
     连接控制：
          maxConnections   指定客户端上可存入池中以备后续重复使用的最大连接数，以及服务器上可挂起调度的最大连接数。
                           注意：在客户端，maxConnections 仅控制基础连接池的大小，客户端高并发访问时，连接数量可能远远超过该值;
                           基础连接池中的连接在2分钟未使用则被客户端关闭，基础池外的连接如果未被客户端主动关闭，那么则受服务端 ReceieveTimeout 影响而关闭。
                           高并发（并发请求量远大于 maxConnections）时池的行为：虽然每个请求用完后都立即将其放回池中，但池中可用连接仍然一直处于较低状态，因此，
                           这时所有已打开的连接都有可能被复用，而不仅仅是池中的部分被复用，一般而言，池能够支持的可复用连接数至少为 maxConnections * 3。
                           因此，maxConnections 不需要配置过大，一般设为 16 即可；
                           
          listenBacklog    指定可挂起的最大排队连接请求数。默认值为 10。ListenBacklog 是套接字级别的属性，描述要排队的“挂起接受”请求数。 应确保最大并发连接数不超过基础套接字队列。
     传输控制：
          transferMode，   指定为请求或响应对消息进行缓冲处理还是流式处理，TransferMode枚举类型，默认值为 Buffered。
          maxBufferSize，  指定内存中用于对传入消息进行缓冲的最大字节数。默认值为 65,536 字节。对于经过流处理的消息，该属性仅适用于消息头；对于缓冲的消息，该属性适用于整个消息。
                           此属性的值必须小于或等于 MaxReceivedMessageSize，且必须大于消息头的大小，否则通道会引发异常。
          maxReceivedMessageSize 指定允许接收的最大消息大小。默认值为 65,536 字节。
                           此属性可以防范两种易受黑客攻击的情况：以极大或无限指定长度发送消息；或将数据持续发送到连接的命名管道。
          ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          maxBufferPoolSize 指定传输使用的任何缓冲池的最大大小。默认值为 524,288 字节。
                            WCF的许多组件都使用缓冲区。每次使用缓冲区时，创建和销毁它们都将占用大量资源，而缓冲区的垃圾回收过程也是如此。
                            利用缓冲池，可以从缓冲池中获得缓冲区，使用缓冲区，然后在完成工作后将其返回给缓冲池。这样就避免了创建和销毁缓冲区的系统开销。
                            缺点是内存的使用增加，因为不会对缓冲区进行垃圾回收。如果 MaxBufferPoolSize 设置为 0，则不会将任何缓冲区返回给缓冲池，而是开始进行垃圾回收。
     事务处理：
          transactionProtocol 事务进行流处理时使用的事务协议。OleTransactions 或 WSAtomicTransactionOctober2004，指定用于事务流的事务处理协议。 默认值为 OleTransactions。 
      -->
        <binding name="NetTcpBinding" hostNameComparisonMode="StrongWildcard"
                 openTimeout="00:00:02" sendTimeout="00:01:00" closeTimeout="00:01:00" receiveTimeout="00:02:00"
                 maxConnections="16" listenBacklog="16"
                 transferMode="Buffered" maxBufferSize="104857600" maxReceivedMessageSize="104857600" maxBufferPoolSize="524288"
                 transactionProtocol="OleTransactions"
                 >
          <readerQuotas maxDepth="32" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="4096" maxNameTableCharCount="2147483647"/>
          <reliableSession ordered="true" inactivityTimeout="00:02:00" enabled="false"/>
          <security mode="None" />
        </binding>
      </netTcpBinding>
      <wsHttpBinding>
        <binding name="WSHttpBinding" openTimeout="00:00:5" sendTimeout="00:01:00" closeTimeout="00:01:00" receiveTimeout="00:03:00" bypassProxyOnLocal="false" transactionFlow="false" hostNameComparisonMode="StrongWildcard" maxBufferPoolSize="524288" maxReceivedMessageSize="2147483647" messageEncoding="Text" textEncoding="utf-8" useDefaultWebProxy="true" allowCookies="false">
          <readerQuotas maxDepth="32" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="4096" maxNameTableCharCount="2147483647"/>
          <reliableSession ordered="true" inactivityTimeout="00:03:00" enabled="false"/>
          <security mode="Message">
            <transport clientCredentialType="Windows" proxyCredentialType="None" realm=""/>
            <message clientCredentialType="Windows" negotiateServiceCredential="true" algorithmSuite="Default" establishSecurityContext="true"/>
          </security>
        </binding>
      </wsHttpBinding>
    </bindings>
    <client>
      <!-- logCenter 日志中心服务器 必须至少配 2 个节点 -->
      <!--<endpoint name="LogCenterMain" address="net.tcp://localhost:58010/logCenter" binding="netTcpBinding" contract="XMS.Core.Logging.ServiceModel.ILogCenterService" bindingConfiguration="NetTcpBinding" behaviorConfiguration="clientDefaultBehavior"/>
      <endpoint name="LogCenterBackup" address="net.tcp://192.168.1.30:58010/logCenter" binding="netTcpBinding" contract="XMS.Core.Logging.ServiceModel.ILogCenterService" bindingConfiguration="NetTcpBinding" behaviorConfiguration="clientDefaultBehavior"/>-->

      <!-- 其它服务节点 -->
      <endpoint name="CoffeePayCenterService" address="net.tcp://127.0.0.1:60020/paycenterservice" binding="netTcpBinding" contract="XMS.Core.PayCenter.ICoffeePayCenterService" bindingConfiguration="NetTcpBinding" behaviorConfiguration="clientDefaultBehavior"/>
    </client>
    <behaviors>
      <endpointBehaviors>
        <behavior name="clientDefaultBehavior">
          <customHeader>
            <headers>
              <add type="XMS.Core.WCF.DemoHeader, XMS.Core"></add>
              <add type="XMS.Core.WCF.AppAgentHeader, XMS.Core"></add>
              <add type="XMS.Core.WCF.AuthorizationTicketHeader, XMS.Core"></add>
              <add type="XMS.Core.WCF.UserIPHeader, XMS.Core"></add>
            </headers>
          </customHeader>
          <dataContractSerializer maxItemsInObjectGraph="2147483647" />
        </behavior>
      </endpointBehaviors>
    </behaviors>
    <extensions>
      <behaviorExtensions>
        <add name="customHeader" type="XMS.Core.WCF.CustomHeaderBehaviorExtensionElement, XMS.Core"/>
      </behaviorExtensions>
    </extensions>
  </system.serviceModel>
</configuration>

