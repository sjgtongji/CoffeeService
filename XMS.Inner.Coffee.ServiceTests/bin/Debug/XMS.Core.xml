<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XMS.Core</name>
    </assembly>
    <members>
        <member name="T:XMS.Core.AppAgent">
            <summary>
            应用代理，。
            </summary>
            <remarks>
            通过 SecurityContext.Current.AppAgent 属性永远可以得到一个非空对象：
            	当请求中未提供 app-agent 标头但非 http 请求时，标头无效，SecurityContext.Current.AppAgent.IsEmpty 为 true, SecurityContext.Current.AppAgent.HasError 为 false, SecurityContext.Current.AppAgent.RawAppAgent 为 null;
            	当请求中未提供 app-agent 标头但是 http 请求时，标头有效，SecurityContext.Current.AppAgent.IsEmpty 为 false, SecurityContext.Current.AppAgent.HasError 为 false, SecurityContext.Current.AppAgent.RawAppAgent 为 null;
            	当请求中提供 app-agent 标头但标头错误时，标头无效，SecurityContext.Current.AppAgent.IsEmpty 为 false, SecurityContext.Current.AppAgent.HasError 为 true, SecurityContext.Current.AppAgent.RawAppAgent 为提供的标头;
            	当请求中提供 app-agent 标头且标头正确时，标头有效，SecurityContext.Current.AppAgent.IsEmpty 为 false, SecurityContext.Current.AppAgent.HasError 为 false, SecurityContext.Current.AppAgent.RawAppAgent 为提供的标头;
            
            综上，在需要使用 SecurityContext.Current.AppAgent 的场景中，应该先调用 SecurityContext.Current.AppAgent.EnsureValid() 方法验证 app-agent 标头 的有效性；
            </remarks>
        </member>
        <member name="F:XMS.Core.AppAgent.Empty">
            <summary>
            请求不包含应用代理时 SecurityContext.Current.AppAgent 返回的空对象。
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.IsEmpty">
            <summary>
            获取一个值，该值指示当前代理对象是否空对象，如果为 true，意味着请求未提供代理。
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.HasError">
            <summary>
            获取一个值，该值指示请求中提供的应用代理是否包含错误，如果为 true，则意味着请求中提供的代理格式不正确。
            一般在拦截中对需要应用代理表头的请求检查代理是否为空或有错误，这样，在业务层便可以不对代理进行检查，可以直接使用 SecurityContext.Current.AppAgent 对象。
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.RawAppAgent">
            <summary>
            获取一个值，该值表示请求中的原始应用代理字符串。
            </summary>
        </member>
        <member name="M:XMS.Core.AppAgent.EnsureValid">
            <summary>
            确保当前应用代理标头有效，如果当前应用代理是一个空代理对象（IsEmpty 为 true）或者是一个具有错误（HasError 为 true）的代理对象，则分别"抛出请求无效，缺少 app-agent 标头" 和 "请求标头格式不正确" 异常。
            在使用应用代理标头对象时调用此方法确保请求头有效。
            </summary>
        </member>
        <member name="M:XMS.Core.AppAgent.GetFromRequest(System.Web.HttpContext,System.ServiceModel.OperationContext)">
            <summary>
            从请求中获取应用代理对象。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.AppAgent.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.Platform">
            <summary>
            平台
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.IsMobileDevice">
            <summary>
            是否移动设备
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.MobileDeviceManufacturer">
            <summary>
            移动设备制造商
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.MobileDeviceModel">
            <summary>
            移动设备型号
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.MobileDeviceId">
            <summary>
            移动设备ID
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.Item(System.String)">
            <summary>
            根据指定的名称从应用代理中获取指定键的值。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.AppAgentScope">
            <summary>
            应用代理块
            </summary>
        </member>
        <member name="F:XMS.Core.AppAgentScope.current">
            <summary>
            线程相关的当前业务作用域对象。
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.Platform">
            <summary>
            平台
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.IsMobileDevice">
            <summary>
            是否移动设备
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.MobileDeviceManufacturer">
            <summary>
            移动设备制造商
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.MobileDeviceModel">
            <summary>
            移动设备型号
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.MobileDeviceId">
            <summary>
            移动设备ID
            </summary>
        </member>
        <member name="M:XMS.Core.AppAgentScope.CreateFromEnvironment">
            <summary>
            从当前应用程序环境创建应用代理块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.AppAgentScope.CreateFromExistsAppAgent(XMS.Core.AppAgent)">
            <summary>
            从现有AppAgent中创建应用代理块，如果请求中不包含 。
            适用于仅向特定服务的特定方法传播 app-agent 的场景。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.ArgumentInvalidException">
            <summary>
            在向方法提供的其中一个参数无效时引发的异常。
            </summary>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor(System.String)">
            <summary>
            使用导致此异常的参数的名称初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的新实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor(System.String,System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="P:XMS.Core.ArgumentInvalidException.Message">
            <summary>
            获取不包含参数名的错误消息。
            </summary>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.ToString">
            <summary>
            获取当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="T:XMS.Core.ArgumentNullOrWhiteSpaceException">
            <summary>
            	在向方法提供的其中一个字符串类型参数为null、空或空白字符串时引发的异常。
            	该异常通常与 String.IsNullOrWhiteSpace 配对使用。
            </summary>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor(System.String)">
            <summary>
            使用导致此异常的参数的名称初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            使用指定的错误消息、导致此异常的参数的名称和原始内部异常来初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <param name="innerException">原始内部异常。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="P:XMS.Core.ArgumentNullOrWhiteSpaceException.Message">
            <summary>
            获取不包含参数名的错误消息。
            </summary>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.ToString">
            <summary>
            获取当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="T:XMS.Core.ArgumentNullOrEmptyException">
            <summary>
            	在向方法提供的其中一个字符串类型参数为null、空或空白字符串时引发的异常。
            	该异常通常与 String.IsNullOrEmpty 配对使用。
            </summary>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor(System.String)">
            <summary>
            使用导致此异常的参数的名称初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor(System.String,System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            使用指定的错误消息、导致此异常的参数的名称和原始内部异常来初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <param name="innerException">原始内部异常。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="P:XMS.Core.ArgumentNullOrEmptyException.Message">
            <summary>
            获取不包含参数名的错误消息。
            </summary>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.ToString">
            <summary>
            获取当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="T:XMS.Core.Caching.CacheDependency">
            <summary>
            在存储于本地缓存对象中的项与文件、缓存键、文件或缓存键的数组或另一个 CacheDependency 对象之间建立依附性关系。 
            CacheDependency 类监视依附性关系，以便在任何这些对象更改时，该缓存项都会自动移除。 
            </summary>
            <remarks>
            CacheDependency类提供两种方式以判断文件是否发生变化：
            	HasChanged 属性，通过主动获取该属性，业务逻辑可直接判断文件自上次加载后是否发生变化；
            	事件通知机制
            一旦文件发生变化，FileWatcher 对象就会从监视列表中移除，并不再监测其关联的文件后续发生的任何变化，也就无法接收到任何与该文件关联的事件变化通知；
            可以通过以下方式继续监视文件的变化：
            	当发现或监听到 FileWatcher 关联的文件已经发生变化后，将业务相关的 FileWatcher 设为 null， 然后在需要的时候重新通过 FileWatcher.Get 方法获取
            最新的与指定文件关联的 FileWatcher 对象，该对象的 HasChanged 属性为 false
            详细示例请参考 缓存服务和配置服务 中通过本类监测关联文件是否发生变化的示例和用法。
            </remarks>
        </member>
        <member name="M:XMS.Core.Caching.CacheDependency.Get(System.String)">
            <summary>
            使用指定的文件名或目录获取一个依赖项，如果与指定的文件名或目录对应的依赖项不存在，那么新建一个与其关联的依赖项并返回它。
            </summary>
            <param name="fileOrDirectory">指定的文件名或目录。</param>
            <returns>CacheDependency 对象。</returns>
            <remarks>
            如果传入的文件名或目录不合法，那么该方法返回 null。
            </remarks>
        </member>
        <member name="E:XMS.Core.Caching.CacheDependency.Changed">
            <summary>
            表示文件变化的事件
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.CacheDependency.#ctor(System.String,System.String,System.String)">
            <summary>
            使用指定的文件名或目录初始化 CacheDependency 类的新实例。
            </summary>
            <param name="fileOrDirectory"></param>
            <param name="directoryName">目录名</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="P:XMS.Core.Caching.CacheDependency.HasChanged">
            <summary>
            获取一个值，该值指示当前依赖项是否已经发生变化。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.CacheDependency.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.CacheDependency.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.CacheDependency.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheSetting.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheSetting.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheSetting.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.CacheSettings.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.CacheSettings.GetDistributeCache(System.String)">
            <summary>
            为指定缓存名称和分区名称的缓存分区获取可对其进行缓存读取操作的分布式缓存对象。
            </summary>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Caching.CacheSettings.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.CacheSettings.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.CacheSettings.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.CacheSettingsSection.CacheVersion">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.DistributeCacheElement.Position">
            <summary>
            缓存位置
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.DistributeCacheElement.DependencyFile">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.DistributeCacheElement.Capacity">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.DistributeCacheElement.AsyncUpdateInterval">
            <summary>
            本地缓存的异步更新时间间隔。
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.Configuration.FailOverElement">
            <summary>
            表示缓存配置文件中对容错机制的配置。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Configuration.FailOverElement.#ctor">
            <summary>
            初始化 FailOverElement 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.FailOverElement.RetryingInterval">
            <summary>
            重试间隔。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.FailOverElement.ToLocalCache">
            <summary>
            指示缓存服务器故障时是否切换为本地缓存。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.LocalCacheElement.DependencyFile">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.LocalCacheElement.Capacity">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.LocalCacheElement.AsyncUpdateInterval">
            <summary>
            本地缓存的异步更新时间间隔。
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.Configuration.RegionElement">
            <summary>
            表示缓存分区的配置。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Configuration.RegionElement.#ctor">
            <summary>
            初始化 RegionElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Configuration.RegionElement.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化 RegionElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Configuration.RegionElement.#ctor(System.String)">
            <summary>
            初始化 RegionElement 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.RegionName">
            <summary>
            缓存分区名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.Position">
            <summary>
            缓存位置
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.DependencyFile">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.Capacity">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.AsyncTimeToLive">
            <summary>
            缓存项的生存周期。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.AsyncUpdateInterval">
            <summary>
            缓存项的异步更新时间间隔。
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.DistributeCacheProvider">
            <summary>
            分布式缓存提供程序。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.DistributeCacheProvider.Configuration">
            <summary>
            获取当前分布式缓存提供程序相关的配置对象。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheProvider.#ctor(System.Configuration.Configuration)">
            <summary>
            初始化 DistributeCacheProvider 类的新实例。
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:XMS.Core.Caching.DistributeCacheProvider.DistributeCaches">
            <summary>
            获取分布式缓存提供程序管理的分布式缓存对象组成的集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheProvider.GetDistributeCache(System.String)">
            <summary>
            获取指定缓存名称和分区名称的分布式缓存对象。
            </summary>
            <param name="regionName">分区名称。</param>
            <returns>具有指定缓存名称和分区名称的分布式缓存对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheProvider.CreateDistributeCache(System.String)">
            <summary>
            创建具有指定缓存名称和分区名称的分布式缓存对象。
            </summary>
            <param name="regionName">分区名称。</param>
            <returns>具有指定缓存名称和分区名称的分布式缓存对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheProvider.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheProvider.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="T:XMS.Core.Caching.ICache">
            <summary>
            定义一组可用于访问本地缓存数据的接口。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.ICache.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICache.SetItem(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到缓存，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICache.SetItem(System.String,System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到缓存，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICache.SetItemWithNoExpiration(System.String,System.String,System.Object)">
            <summary>
            将指定项添加到缓存，该项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICache.RemoveItem(System.String,System.String)">
            <summary>
            从缓存中移除指定的缓存项。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要移除的缓存项的键。</param>
            <returns>如果移除成功，则返回 <c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICache.GetItem(System.String,System.String)">
            <summary>
            从缓存中获取指定的缓存项。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICache.ClearRegion(System.String)">
            <summary>
            清空当前缓存对象中缓存的全部缓存项。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
        </member>
        <member name="M:XMS.Core.Caching.IDistributeCache.RemoveItem(System.String)">
            <summary>
            从 Cache 对象中移除指定的缓存项。
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>
            移除成功，返回 <c>true</c>；移除失败，返回 <c>false</c>。
            </returns>
        </member>
        <member name="M:XMS.Core.Caching.IDistributeCache.Clear">
            <summary>
            清空当前缓存对象中缓存的全部缓存项。
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.DefaultCacheService">
            <summary>
            为缓存系统提供一个简明一致的访问界面（接口），隐藏缓存系统的复杂性，使缓存系统更加容易使用。
            注意：XMS.Core 中所有以 Facade 模式暴露的接口内部都对异常做了处理，不会抛出任何异常。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.DefaultCacheService.LocalCache">
            <summary>
            获取名称为 local 的本地缓存对象，该缓存对象永远不可能为 null，其存储位置为本地内存，永远不可能被配置到分布式缓存服务器中。
            </summary>
            <returns>名称为 local 的本地缓存对象。</returns>
        </member>
        <member name="P:XMS.Core.Caching.DefaultCacheService.RemoteCache">
            <summary>
            获取远程缓存对象，该缓存对象永远不可能为 null，其存储位置为分布式缓存，永远被配置到分布式缓存服务器中。
            </summary>
            <returns>名称为 local 的本地缓存对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.#ctor">
            <summary>
            初始化 DefaultCacheService 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object,System.Int32)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetAndSetItem(System.String,System.String,System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetAndSetItem(System.String,System.String,System.String,System.Func{System.Object,System.Object},System.Object,System.Int32)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItem(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到指定的缓存分区，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItem(System.String,System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到指定的缓存分区，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItem(System.String,System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到指定缓存，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItem(System.String,System.String,System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到指定缓存，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItemWithNoExpiration(System.String,System.String,System.Object)">
            <summary>
            将指定项添加到指定的缓存分区，该缓存项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItemWithNoExpiration(System.String,System.String,System.String,System.Object)">
            <summary>
            将指定项添加到指定缓存，该项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="tags">可用来对缓存项进行说明和检索的标签数组。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.RemoveItem(System.String,System.String)">
            <summary>
            从指定的缓存分区中移除指定的缓存项。
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>如果移除成功，则返回 <c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.RemoveItem(System.String,System.String,System.String)">
            <summary>
            从指定缓存中移除指定的缓存项。
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>如果移除成功，则返回 <c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetItem(System.String,System.String)">
            <summary>
            从指定缓存分区中获取指定的缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetItem(System.String,System.String,System.String)">
            <summary>
            从指定缓存中获取指定的缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.Clear(System.String)">
            <summary>
            清空默认缓存对象中缓存的全部缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.Clear(System.String,System.String)">
            <summary>
            清空指定缓存对象中缓存的全部缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.ClearRegion(System.String)">
            <summary>
            清空默认缓存对象中缓存的全部缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.ClearRegion(System.String,System.String)">
            <summary>
            清空指定缓存对象中缓存的全部缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="T:XMS.Core.Caching.ICacheService">
            <summary>
            定义一组可用于访问缓存系统的接口。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.ICacheService.LocalCache">
            <summary>
            获取名称为 local 的本地缓存对象，该缓存对象永远不可能为 null，其存储位置为本地内存，永远不可能被配置到分布式缓存服务器中。
            </summary>
            <returns>名称为 local 的本地缓存对象。</returns>
        </member>
        <member name="P:XMS.Core.Caching.ICacheService.RemoteCache">
            <summary>
            获取名称为 distribute 的本地缓存对象，该缓存对象永远不可能为 null，其存储位置为分布式缓存，永远被配置到分布式缓存服务器中。
            </summary>
            <returns>名称为 local 的本地缓存对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object,System.Int32)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetAndSetItem(System.String,System.String,System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetAndSetItem(System.String,System.String,System.String,System.Func{System.Object,System.Object},System.Object,System.Int32)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItem(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到指定的缓存分区，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItem(System.String,System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到指定的缓存分区，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItem(System.String,System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到指定缓存，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItem(System.String,System.String,System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到指定缓存，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItemWithNoExpiration(System.String,System.String,System.Object)">
            <summary>
            将指定项添加到指定的缓存分区，该缓存项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItemWithNoExpiration(System.String,System.String,System.String,System.Object)">
            <summary>
            将指定项添加到指定缓存，该项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="tags">可用来对缓存项进行说明和检索的标签数组。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.RemoveItem(System.String,System.String)">
            <summary>
            从指定的缓存分区中移除指定的缓存项。
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>如果移除成功，则返回 <c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.RemoveItem(System.String,System.String,System.String)">
            <summary>
            从指定缓存中移除指定的缓存项。
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>如果移除成功，则返回 <c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetItem(System.String,System.String)">
            <summary>
            从指定缓存分区中获取指定的缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetItem(System.String,System.String,System.String)">
            <summary>
            从指定缓存中获取指定的缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.Clear(System.String)">
            <summary>
            清空默认缓存对象中缓存的全部缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.Clear(System.String,System.String)">
            <summary>
            清空指定缓存对象中缓存的全部缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.ClearRegion(System.String)">
            <summary>
            清空默认缓存对象中缓存的全部缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.ClearRegion(System.String,System.String)">
            <summary>
            清空指定缓存对象中缓存的全部缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="T:XMS.Core.Caching.ILocalCache">
            <summary>
            本地缓存接口
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.ILocalCache.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object,XMS.Core.Caching.CacheDependency)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <param name="dependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。 </param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ILocalCache.SetItemWithNoExpiration(System.String,System.String,System.Object,XMS.Core.Caching.CacheDependency)">
            <summary>
            将指定项添加到缓存，该项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="dependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。 </param>
        </member>
        <member name="M:XMS.Core.Caching.ILocalCache.SetItem(System.String,System.String,System.Object,XMS.Core.Caching.CacheDependency,System.TimeSpan)">
            <summary>
            将指定项添加到缓存，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="dependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。 </param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.ILocalCache.SetItem(System.String,System.String,System.Object,XMS.Core.Caching.CacheDependency,System.Int32)">
            <summary>
            将指定项添加到缓存，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="dependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。 </param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.ILocalCache.RemoveRegion(System.String)">
            <summary>
            移除当前缓存对象中的缓存分区。
            </summary>
            <param name="regionName">要移除的缓存分区的名称。</param>
            <returns>如果缓存分区被删除，则返回 true。如果缓存分区不存在，则返回 false。</returns>
        </member>
        <member name="F:XMS.Core.Caching.LocalCacheManager.CachedItem.ExpiredTime">
            <summary>
            表示缓存项的待过期时间。
            </summary>
        </member>
        <member name="F:XMS.Core.Caching.LocalCacheManager.CachedItem.NextUpdateTime">
            <summary>
            表示缓存项的待更新时间。
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.Memcached.CustomBinaryPool">
            <summary>
            Server pool implementing the binary protocol.
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.Memcached.CustomMemcachedClientSection">
            <summary>
            Configures the <see cref="T:MemcachedClient"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.Servers">
            <summary>
            Returns a collection of Memcached servers which can be used by the client.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.SocketPool">
            <summary>
            Gets or sets the configuration of the socket pool.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.Authentication">
            <summary>
            Gets or sets the configuration of the authenticator.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.NodeLocator">
            <summary>
            Gets or sets the <see cref="T:Enyim.Caching.Memcached.IMemcachedNodeLocator"/> which will be used to assign items to Memcached nodes.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.KeyTransformer">
            <summary>
            Gets or sets the <see cref="T:Enyim.Caching.Memcached.IMemcachedKeyTransformer"/> which will be used to convert item keys for Memcached.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.Transcoder">
            <summary>
            Gets or sets the <see cref="T:Enyim.Caching.Memcached.ITranscoder"/> which will be used serialzie or deserialize items.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.PerformanceMonitor">
            <summary>
            Gets or sets the <see cref="T:Enyim.Caching.Memcached.IPerformanceMonitor"/> which will be used monitor the performance of the client.
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.PostDeserialize">
            <summary>
            Called after deserialization.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.Protocol">
            <summary>
            Gets or sets the type of the communication between client and server.
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.Memcached.MemcachedDistributeCache">
            <summary>
            表示一个可用来访问和存储缓存数据的对象。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.MemcachedDistributeCache.RegionName">
            <summary>
            获取当前缓存对象所属的分区。
            </summary>
            <remarks>
            对当前缓存对象执行的所有操作都是针对 <see cref="P:XMS.Core.Caching.Memcached.MemcachedDistributeCache.RegionName"/> 限定的分区进行的。
            </remarks>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.SetItem(System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到 Cache 对象，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.SetItem(System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到 Cache 对象，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.SetItemWithNoExpiration(System.String,System.Object)">
            <summary>
            将指定项添加到 Cache 对象，该项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.GetItem(System.String)">
            <summary>
            从 Cache 对象中获取指定的缓存项。
            </summary>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.RemoveItem(System.String)">
            <summary>
            从 Cache 对象中移除指定的缓存项。
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>
            移除成功，返回 <c>true</c>；移除失败，返回 <c>false</c>。
            </returns>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.Clear">
            <summary>
            清空当前缓存对象中缓存的全部缓存项。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.CacheUtil.CheckCanRetry(System.Exception)">
            <summary>
            返回 true， 表示可以重试，返回 false，表示不需要重试
            </summary>
            <param name="err"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Caching.CacheUtil.HandlerError(System.String,System.String,System.Exception)">
            <summary>
            返回 true， 表示需要重试，返回 false，表示不需要重试
            </summary>
            <param name="regionName"></param>
            <param name="key"></param>
            <param name="err"></param>
            <returns>false， 表示中断性错误，服务器不可用，不需要重试， true，表示中断性错误，服务器继续可用，可重试。</returns>
        </member>
        <member name="T:XMS.Core.Caching.IRemoteCache">
            <summary>
            远程缓存接口
            </summary>
        </member>
        <member name="T:XMS.Core.EndianBitConverter">
            <summary>
            Equivalent of System.BitConverter, but with either endianness.
            </summary>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:XMS.Core.EndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:XMS.Core.EndianBitConverter.Little">
            <summary>
            Returns a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:XMS.Core.EndianBitConverter.Big">
            <summary>
            Returns a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision 
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point 
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:XMS.Core.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:XMS.Core.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:XMS.Core.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Creates an instance representing the given integer.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:XMS.Core.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Creates an instance representing the given floating point number.
            </summary>
            <param name="f">The floating point value of the new instance.</param>
        </member>
        <member name="P:XMS.Core.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Returns the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:XMS.Core.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Returns the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="M:XMS.Core.Cluster.DefaultClusterService.Restart">
            <summary>
            be used when config file was changed
            </summary>
        </member>
        <member name="M:XMS.Core.Cluster.DefaultClusterService.SetClusterInstanceStatuses(System.Collections.Generic.IEnumerable{XMS.Core.Cluster.ClusterInstanceStatus})">
            <summary>
            task will invoke this method
            </summary>
            <param name="clusterInstanceStatuses"></param>
        </member>
        <member name="T:XMS.Core.Configuration.ConfigFileChangedHandledException">
            <summary>
            表示配置文件变化处理过程中引发的异常，在配置文件变化事件处理过程中，引发此异常，可以通知配置服务配置文件存在错误，并通知配置服务是否需要记录日志。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ConfigFileChangedHandledException.ShouldBeLog">
            <summary>
            获取一个值，该值指示是否应该记录日志。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ConfigFileChangedHandledException.#ctor(System.Boolean)">
            <summary>
            初始化 <see cref="T:XMS.Core.Configuration.ConfigFileChangedHandledException"/> 类的新实例。
            </summary>
            <param name="shouldBeLog">异常是否已经记录日志。</param>
        </member>
        <member name="M:XMS.Core.Configuration.ConfigFileChangedHandledException.#ctor(System.Boolean,System.String)">
            <summary>
            初始化 <see cref="T:XMS.Core.Configuration.ConfigFileChangedHandledException"/> 类的新实例。
            </summary>
            <param name="message">描述容器错误的消息。</param>
            <param name="shouldBeLog">异常是否已经记录日志。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Configuration.ConfigFileChangedHandledException.#ctor(System.Boolean,System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:XMS.Core.Configuration.ConfigFileChangedHandledException"/> 类的新实例。
            </summary>
            <param name="message">描述容器错误的消息。</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用。</param>
            <param name="shouldBeLog">异常是否已经记录日志。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="T:XMS.Core.Configuration.ServiceModel.ConfigFile">
            <summary>
            表示一个配置中心服务器上定义的配置文件。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.ConfigFile.FileName">
            <summary>
            获取或设置远程配置文件的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.ConfigFile.Content">
            <summary>
            获取或设置远程配置文件的内容。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.ConfigFile.ContentHash">
            <summary>
            获取内容的 Hash 码。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.ConfigFile.ReleaseTime">
            <summary>
            获取或设置配置文件的发布时间。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.ServiceModel.IRemoteConfigService">
            <summary>
            定义一组可用于访问远程配置服务器提供的配置服务的接口。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ServiceModel.IRemoteConfigService.GetConfigFiles(System.String,System.String)">
            <summary>
            根据指定的应用程序名称和版本从远程配置服务器上获取适用于该应用程序的所有配置文件组成的数组。
            </summary>
            <param name="applicationName">应用程序的名称。</param>
            <param name="version">应用程序的版本。</param>
            <returns>存储在远程配置服务器上的配置文件对象组成的数组。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.ServiceModel.IRemoteConfigService.GetChangedConfigFiles(System.String,System.String,System.String[],System.String[])">
            <summary>
            获取自上次获取时间以来配置服务器上指定名称和版本的应用程序的已发生变化的配置文件组成的数组。
            </summary>
            <param name="applicationName">应用程序的名称。</param>
            <param name="version">应用程序的版本。</param>
            <param name="configFileNames">当前已获取的配置文件的名称组成的数组。</param>
            <param name="configFileHashs">客户端配置文件的 Hash 值组成的数组。</param>
            <returns>存储在远程配置服务器上的配置文件对象组成的数组。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.ServiceModel.IRemoteConfigService.GetConfigFile(System.String,System.String,System.String)">
            <summary>
            根据指定的应用程序名称、版本和配置文件名称从远程配置服务器上获取配置文件对象。
            </summary>
            <param name="applicationName">应用程序的名称。</param>
            <param name="version">应用程序的版本。</param>
            <param name="configFileName">配置文件名称。</param>
            <returns>存储在远程配置服务器上的配置文件对象。</returns>
        </member>
        <member name="T:XMS.Core.Configuration.ServiceModel.RemoteConfigFile">
            <summary>
            表示一个远程配置服务器上定义的配置文件。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.RemoteConfigFile.FileName">
            <summary>
            获取或设置远程配置文件的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.RemoteConfigFile.Content">
            <summary>
            获取或设置远程配置文件的内容。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.RemoteConfigFile.Description">
            <summary>
            获取或设置远程配置文件的说明。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.RemoteConfigFile.CreateTime">
            <summary>
            获取或设置远程配置文件的创建时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.RemoteConfigFile.LastUpdateTime">
            <summary>
            获取或设置远程配置文件的最近更新时间。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.ErrorCodesSection">
            <summary>
            表示错误码配置节。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodesSection.#ctor">
            <summary>
            初始化 ErrorCodesSection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodesSection.ErrorCodes">
            <summary>
            获取错误码集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodesSection.Properties">
            <summary>
            获取配置属性集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.ErrorCodeCollection">
            <summary>
            ErrorCodeCollection
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.#ctor">
            <summary>
            初始化 ErrorCodeCollection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeCollection.CollectionType">
            <summary>
            override CollectionType
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.CreateNewElement">
            <summary>
            override CreateNewElement
            </summary>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.CreateNewElement(System.String)">
            <summary>
            override CreateNewElement
            </summary>
            <param name="key">键。</param>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            获取配置项的键。
            </summary>
            <param name="element">配置项</param>
            <returns>配置项的键</returns>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的配置项。
            </summary>
            <param name="index">索引。</param>
            <returns>错误码配置项。</returns>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeCollection.Item(System.String)">
            <summary>
            获取指定键的配置项。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.IndexOf(XMS.Core.Configuration.ErrorCodeElement)">
            <summary>
            获取指定 ErrorCodeElement 的索引。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.Add(XMS.Core.Configuration.ErrorCodeElement)">
            <summary>
            添加配置元素。
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.Remove(XMS.Core.Configuration.ErrorCodeElement)">
            <summary>
            移除指定的配置元素。
            </summary>
            <param name="element">要移除的配置元素。</param>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.Remove(System.String)">
            <summary>
            移除指定键的索引。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.Clear">
            <summary>
            清空集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.ErrorCodeElement">
            <summary>
            表示一个配置的错误码。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeElement.#ctor">
            <summary>
            初始化 ErrorCodeElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeElement.#ctor(System.String)">
            <summary>
            使用指定的键初始化 ErrorCodeElement 类的新实例。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeElement.Key">
            <summary>
            键。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeElement.Code">
            <summary>
            错误码。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeElement.Message">
            <summary>
            错误消息。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.ConfigFileChangedEventHandler">
            <summary>
            表示将对 <see cref="T:XMS.Core.Configuration.IConfigService"/> 接口的 <see cref="E:XMS.Core.Configuration.IConfigService.ConfigFileChanged"/> 事件进行处理的方法。
            </summary>
            <param name="sender">引发事件的源。</param>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Configuration.ConfigFileChangedEventArgs"/>。</param>
        </member>
        <member name="T:XMS.Core.Configuration.ConfigFileChangedEventArgs">
            <summary>
            为 <see cref="T:XMS.Core.Configuration.IConfigService"/> 类的 <see cref="E:XMS.Core.Configuration.IConfigService.ConfigFileChanged"/> 事件提供数据。 
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ConfigFileChangedEventArgs.ConfigFileName">
            <summary>
            获取发生变化的配置文件的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ConfigFileChangedEventArgs.ConfigFilePhysicalPath">
            <summary>
            获取发生变化的配置文件的物理路径。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ConfigFileChangedEventArgs.ConfigFileType">
            <summary>
            获取当前配置文件变化事件的变化类型。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ConfigFileChangedEventArgs.#ctor(XMS.Core.Configuration.ConfigFileType,System.String,System.String)">
            <summary>
            使用指定的配置文件名称、配置文件物理路径初始化 <see cref="T:XMS.Core.Configuration.ConfigFileChangedEventArgs"/> 类的新实例。
            </summary>
            <param name="configFileType">发生变化的配置文件的类型。</param>
            <param name="configFileName">发生变化的配置文件的名称。</param>
            <param name="configFileContent">发生变化的配置文件的内容。</param>
            <param name="configPhysicalFilePath">发生变化的配置文件的物理路径。</param>
        </member>
        <member name="T:XMS.Core.Configuration.DefaultConfigService">
            <summary>
            配置服务接口的默认实现。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.DefaultConfigService.EnableConcentratedConfig">
            <summary>
            获取一个值，该值指示当前应用程序是否启用集中配置，默认为 false。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.#ctor">
            <summary>
            初始化 DefaultConfigService 的新实例。
            </summary>
        </member>
        <member name="E:XMS.Core.Configuration.DefaultConfigService.ConfigFileChanged">
            <summary>
            在配置文件发生变化时发生，用于通知客户端配置文件已经发生更改。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.OnConfigFileChanged(XMS.Core.Configuration.ConfigFileChangedEventArgs)">
            <summary>
            引发 ConfigFileChanged 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Configuration.ConfigFileChangedEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetConfigurationFile(XMS.Core.Configuration.ConfigFileType,System.String)">
            <summary>
            根据指定的配置文件名称，获取可用的配置文件（物理路径）。
            </summary>
            <param name="configFileType">配置文件的类型。</param>
            <param name="configFileName">配置文件的名称，在 <paramref name="configFileType"/> 为 ConfigFileType.Other 时该参数是必须的，其它情况下，忽略该参数。</param>
            <returns>可用的配置文件的路径。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetConfiguration(XMS.Core.Configuration.ConfigFileType,System.String)">
            <summary>
            从配置系统中获取指定文件名称的配置对象。
            </summary>
            <param name="configFileType">配置文件的类型。</param>
            <param name="configFileName">配置文件的名称，在 <paramref name="configFileType"/> 为 ConfigFileType.Other 时该参数是必须的，其它情况下，忽略该参数。</param>
            <returns>配置对象。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetAppSetting(System.String,System.String)">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项的原始值。
            </summary>
            <param name="key">要获取的配置项的键。</param>
            <param name="defaultValue">要获取的配置项的默认值。</param>
            <returns>要获取的配置项的值。</returns>
            <remarks>
            GetAppSetting(string,string) 方法直接从配置文件相关联的 Configuration 对象中读取配置内容，
            而 GetAppSetting&lt;T&gt;(string, T) 等泛型重载方法则先从缓存服务中读取已解析的强类型配置数据中读取内容，
            由于缓存服务依赖于配置服务，在 容器初始化、配置服务初始化、RunContext 的 RunMode 属性等场景中，只能通过非泛型的 GetAppSetting 接口获取配置信息，
            不能通过泛型的 GetAppSetting 方法获取配置信息，以避免容器初始化死循环（堆栈溢出）。
            </remarks>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetAppSetting``1(System.String,``0)">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的已解析配置项，配置项的原始内容被解析为类型参数限定的类型并且放入缓存中。
            支持以下类型：String、基元类型（Boolean、Char、SByte、Byte、Int16、UInt16、Int32、UInt32、Int64、UInt64、Single、Double)、Decimal、DateTime、TimeSpan、Enum、Regex 等。
            当为 Regex 类型时，可在配置中通过类似 ^(?is:\d+)$ 的方式以内联的形式指定是否区分大小写、单行或多行模式等。
            </summary>
            <param name="key">要获取的配置项的键。</param>
            <param name="defaultValue">要获取的配置项的默认值。</param>
            <returns>要获取的配置项的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetAppSetting``1(System.String,``0[])">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项数组，该配置项数组以中英文逗号隔开，配置项的原始内容被解析为类型参数限定的数组并且放入缓存中。
            支持以下类型：String、基元类型（Boolean、Char、SByte、Byte、Int16、UInt16、Int32、UInt32、Int64、UInt64、Single、Double)、Decimal、DateTime、TimeSpan、Enum、Regex 等。
            </summary>
            <param name="key">要获取的配置项数组的键。</param>
            <param name="defaultValues">要获取的配置项数组的默认值。</param>
            <returns>要获取的配置项数组的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetAppSetting``1(System.String,System.Collections.Generic.HashSet{``0})">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项字典，该配置项字典以中英文逗号隔开，配置项的原始内容被解析为类型参数限定的集合并且放入缓存中。
            支持以下类型：String、基元类型（Boolean、Char、SByte、Byte、Int16、UInt16、Int32、UInt32、Int64、UInt64、Single、Double)、Decimal、DateTime、TimeSpan、Enum、Regex 等。
            </summary>
            <param name="key">要获取的配置项字典的键。</param>
            <param name="defaultValues">要获取的配置项字典的默认值。</param>
            <returns>要获取的配置项字典的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetConnectionString(System.String)">
            <summary>
            从 ConnectionStrings.config 配置文件中获取指定键值的连接字符串。
            </summary>
            <param name="key">要获取的连接字符串的键。</param>
            <returns>要获取的连接字符串的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetDbConnectionString(System.String)">
            <summary>
            从 ConnectionStrings.config 配置文件中获取指定键值的连接字符串。
            </summary>
            <param name="key">要获取的连接字符串的键。</param>
            <returns>要获取的连接字符串的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetSection(System.String)">
            <summary>
            从 App.Config 配置文件中返回指定的 ConfigurationSection 对象。
            </summary>
            <param name="sectionName">要返回的 ConfigurationSection 的名称。</param>
            <returns>指定的 ConfigurationSection 对象。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetSectionGroup(System.String)">
            <summary>
            从 App.Config 配置文件中返回指定的 ConfigurationSectionGroup 对象。
            </summary>
            <param name="sectionGroupName">要返回的 ConfigurationSectionGroup 的名称。</param>
            <returns>指定的 ConfigurationSectionGroup 对象。</returns>
        </member>
        <member name="T:XMS.Core.Configuration.IAppSettingSupport">
            <summary>
            定义一个接口，实现该接口的对象支持在 AppSetting.config 中进行配置，可通过配置服务的 GetAppSetting&lt;T&gt; 或  GetAppSetting&lt;T&gt; 方法进行读取。
            注意：该接口不包含任何方法的定义，因此不需要进行实现，但要求实现此接口的对象必须提供仅传入一个字符串类型参数的构造函数。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.ConfigFileType">
            <summary>
            配置文件的类型。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.App">
            <summary>
            表示 App.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.AppSettings">
            <summary>
            表示 AppSettings.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.ConnectionStrings">
            <summary>
            表示 ConnectionStrings.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.ErrorCodes">
            <summary>
            表示 ErrorCodes.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.Services">
            <summary>
            表示 Services.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.ServiceReferences">
            <summary>
            表示 ServiceReferences.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.Log">
            <summary>
            表示 Log.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.Cache">
            <summary>
            表示 Cache.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.Messaging">
            <summary>
            表示 Messaging.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.EntityModel">
            <summary>
            表示 EntityModel.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.Other">
            <summary>
            表示其它配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.Cluster">
            <summary>
            表示 Cluster.Config 配置文件。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.IConfigService">
            <summary>
            定义一组可用于访问集中配置系统的接口。
            </summary>
        </member>
        <member name="E:XMS.Core.Configuration.IConfigService.ConfigFileChanged">
            <summary>
            在配置文件发生变化时发生，用于通知客户端配置文件已经发生更改。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.IConfigService.EnableConcentratedConfig">
            <summary>
            获取一个值，该值指示当前应用程序是否启用集中配置，默认为 false。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetConfigurationFile(XMS.Core.Configuration.ConfigFileType,System.String)">
            <summary>
            根据指定的配置文件名称，获取可用的配置文件（物理路径）。
            </summary>
            <param name="configFileType">配置文件的类型。</param>
            <param name="configFileName">配置文件的名称，在 <paramref name="configFileType"/> 为 ConfigFileType.Other 时该参数是必须的，其它情况下，忽略该参数。</param>
            <returns>可用的配置文件的路径。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetConfiguration(XMS.Core.Configuration.ConfigFileType,System.String)">
            <summary>
            从配置系统中获取指定文件名称的配置对象。
            </summary>
            <param name="configFileType">配置文件的类型。</param>
            <param name="configFileName">配置文件的名称，在 <paramref name="configFileType"/> 为 ConfigFileType.Other 时该参数是必须的，其它情况下，忽略该参数。</param>
            <returns>配置对象。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetAppSetting(System.String,System.String)">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项的原始值。
            </summary>
            <param name="key">要获取的配置项的键。</param>
            <param name="defaultValue">要获取的配置项的默认值。</param>
            <returns>要获取的配置项的值。</returns>
            <remarks>
            GetAppSetting(string,string) 方法直接从配置文件相关联的 Configuration 对象中读取配置内容，
            而 GetAppSetting&lt;T&gt;(string, T) 等泛型重载方法则先从缓存服务中读取已解析的强类型配置数据中读取内容，
            由于缓存服务依赖于配置服务，在 容器初始化、配置服务初始化、RunContext 的 RunMode 属性等场景中，只能通过非泛型的 GetAppSetting 接口获取配置信息，
            不能通过泛型的 GetAppSetting 方法获取配置信息，以避免容器初始化死循环（堆栈溢出）。
            </remarks>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetAppSetting``1(System.String,``0)">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的已解析配置项，配置项的原始内容被解析为类型参数限定的类型并且放入缓存中。
            </summary>
            <param name="key">要获取的配置项的键。</param>
            <param name="defaultValue">要获取的配置项的默认值。</param>
            <returns>要获取的配置项的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetAppSetting``1(System.String,``0[])">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项数组，该配置项数组以中英文逗号隔开，配置项的原始内容被解析为类型参数限定的数组并且放入缓存中。
            </summary>
            <param name="key">要获取的配置项数组的键。</param>
            <param name="defaultValues">要获取的配置项数组的默认值。</param>
            <returns>要获取的配置项数组的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetAppSetting``1(System.String,System.Collections.Generic.HashSet{``0})">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项字典，该配置项字典以中英文逗号隔开，配置项的原始内容被解析为类型参数限定的集合并且放入缓存中。
            </summary>
            <param name="key">要获取的配置项字典的键。</param>
            <param name="defaultValues">要获取的配置项字典的默认值。</param>
            <returns>要获取的配置项字典的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetConnectionString(System.String)">
            <summary>
            从 ConnectionStrings.config 配置文件中获取指定键值的连接字符串。
            </summary>
            <param name="key">要获取的连接字符串的键。</param>
            <returns>要获取的连接字符串的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetDbConnectionString(System.String)">
            <summary>
            从 ConnectionStrings.config 配置文件中获取指定键值的连接字符串对象。
            </summary>
            <param name="key">要获取的连接字符串的键。</param>
            <returns>要获取的连接字符串对象。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetSection(System.String)">
            <summary>
            从 App.Config 配置文件中返回指定的 ConfigurationSection 对象。
            </summary>
            <param name="sectionName">要返回的 ConfigurationSection 的名称。</param>
            <returns>指定的 ConfigurationSection 对象。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetSectionGroup(System.String)">
            <summary>
            从 App.Config 配置文件中返回指定的 ConfigurationSectionGroup 对象。
            </summary>
            <param name="sectionGroupName">要返回的 ConfigurationSectionGroup 的名称。</param>
            <returns>指定的 ConfigurationSectionGroup 对象。</returns>
        </member>
        <member name="T:XMS.Core.Data.ColumnAttribute">
            <summary>
            定义类属性或者字段映射的列名。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.ColumnAttribute.#ctor(System.String)">
            <summary>
            初始化 ColumnAttribute 类的新实例。
            </summary>
            <param name="name">指示类属性或者字段映射的列名。</param>
        </member>
        <member name="P:XMS.Core.Data.ColumnAttribute.Name">
            <summary>
            类属性或者字段映射的列名。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.DataGeneratedOption">
            <summary>
            The pattern used to generate values for a property in the database.
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DataGeneratedOption.None">
            <summary>
            The database does not generate values.
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DataGeneratedOption.GUID">
            <summary>
            The database generates a GUID value when a row is inserted.
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DataGeneratedOption.Identity">
            <summary>
            The database generates a value when a row is inserted.
            一个实体只能定义一个 Identity 属性。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DataGeneratedOption.RowVersion">
            <summary>
            The database generates a RowVersion value when a row is inserted.
            一个实体只能定义一个 RowVersion 特性，其类型只能定义为 long,其数据库类型默认为 timestamp(各数据库都支持)。
            	如果未同时定义 DataTypeAttribute 特性，则其对应的数据库存储类型根据数据库类型自动确定：
            		在 SQL Server 中为 timestamp（即 rowversion 类型，返回 byte[] 类型的数组），其值由数据库自己维护；
            		在 mysql、oracle 等其它数据库中，为 timestamp，其值由持久层框架自动维护（这里我们不采用触发器的方式在数据库端自动维护该字段，因为触发器存在失效问题）。
            	如果定义了 DataTypeAttribute 特性（仅能支持 int32、int64、datetime 等类型）：
            		其值由持久层框架自动维护。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DataGeneratedOption.Computed">
            <summary>
            The database generates a value when a row is inserted or updated.
            </summary>
        </member>
        <member name="T:XMS.Core.Data.DataGeneratedAttribute">
            <summary>
            Specifies how the database generates values for a property.
            </summary>
        </member>
        <member name="P:XMS.Core.Data.DataGeneratedAttribute.DataGeneratedOption">
            <summary>
            The pattern used to generate values for the property in the database.
            </summary>
        </member>
        <member name="M:XMS.Core.Data.DataGeneratedAttribute.#ctor(XMS.Core.Data.DataGeneratedOption)">
            <summary>
            Initializes a new instance of the DataGeneratedAttribute class.
            </summary>
            <param name="databaseGeneratedOption">The pattern used to generate values for the property in the database or client.</param>
        </member>
        <member name="T:XMS.Core.Data.DataTypeAttribute">
            <summary>
            定义类属性或者字段的数据类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.DataTypeAttribute.DbType">
            <summary>
            获取属性值或字段的数据类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.DataTypeAttribute.Precision">
            <summary>
            获取属性值或字段的类型的精度。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.DataTypeAttribute.Scale">
            <summary>
            获取属性值或字段的类型的小数位数。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.DataTypeAttribute.#ctor(System.Data.DbType)">
            <summary>
            初始化 DataTypeAttribute 类的新实例。
            </summary>
            <param name="dbType">属性值或字段的类型。</param>
        </member>
        <member name="M:XMS.Core.Data.DataTypeAttribute.#ctor(System.Data.DbType,System.Int32,System.Int32)">
            <summary>
            初始化 DataTypeAttribute 类的新实例。
            </summary>
            <param name="dbType">属性值或字段的类型。</param>
            <param name="precision">定义 Single、Double、Decimal、Currency 等浮点数字类型的精度。</param>
            <param name="scale">定义 Single、Double、Decimal、Currency 等浮点数字类型的小数位数。</param>
        </member>
        <member name="T:XMS.Core.Data.KeyAttribute">
            <summary>
            定义类属性或者字段的键属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.KeyAttribute.Order">
            <summary>
            当键是组合键时，表示在组合键中的顺序。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.KeyAttribute.#ctor">
            <summary>
            初始化 KeyAttribute 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.MongoKeyAttribute">
            <summary>
            定义类属性或者字段的键属性。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.MongoKeyAttribute.#ctor">
            <summary>
            初始化 KeyAttribute 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.NotMapAttribute">
            <summary>
            定义类属性或者字段为非映射列。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.NotMapAttribute.#ctor">
            <summary>
            初始化 NotMapAttribute 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.RequiredAttribute">
            <summary>
            定义类属性或者字段是否必须的。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.RequiredAttribute.#ctor">
            <summary>
            初始化 RequiredAttribute 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.StringLengthAttribute">
            <summary>
            定义类映射的表名。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.StringLengthAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化 StringLengthAttribute 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.StringLengthAttribute.#ctor(System.Int32)">
            <summary>
            初始化 StringLengthAttribute 类的新实例。
            </summary>
            <param name="maxLength">最大长度。</param>
        </member>
        <member name="T:XMS.Core.Data.TableAttribute">
            <summary>
            定义类映射的表名。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.TableAttribute.#ctor(System.String)">
            <summary>
            初始化 TableAttribute 类的新实例。
            </summary>
            <param name="name">指示类映射的表名。</param>
        </member>
        <member name="P:XMS.Core.Data.TableAttribute.Name">
            <summary>
            类映射的表名。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.IndexAttribute">
            <summary>
            定义类属性或者字段映射的列名。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IndexAttribute.#ctor(XMS.Core.Data.SortDirection)">
            <summary>
            初始化 IndexAttribute 类的新实例。
            </summary>
            <param name="sort">索引的顺序。</param>
        </member>
        <member name="M:XMS.Core.Data.IndexAttribute.#ctor">
            <summary>
            初始化 IndexAttribute 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IndexAttribute.Sort">
            <summary>
            索引的顺序。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.QueryResult`1">
            <summary>
            表示查询结果。
            </summary>
            <typeparam name="T">值的类型。</typeparam>
        </member>
        <member name="P:XMS.Core.Data.QueryResult`1.TotalCount">
            <summary>
            获取本次查询条件对应的记录总数。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.QueryResult`1.Items">
            <summary>
            获取本次查询返回的数据。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.SortDirection">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="F:XMS.Core.Data.SortDirection.Default">
            <summary>
            未指定排序方向。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.SortDirection.Asc">
            <summary>
            升序。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.SortDirection.Desc">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Configuration.EntityContainerElement">
            <summary>
            表示一个实体容器。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElement.#ctor">
            <summary>
            初始化 EntityContainerElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElement.#ctor(System.String)">
            <summary>
            使用指定的类型初始化 EntityContainerElement 类的新实例。
            </summary>
            <param name="type">类型。</param>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityContainerElement.Name">
            <summary>
            实体的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityContainerElement.ConnectionStringKey">
            <summary>
            连接字符串的键。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityContainerElement.BatchOperationCacheNotifyMechanismType">
            <summary>
            批量操作缓存通知机制类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityContainerElement.CacheDependencyDirectory">
            <summary>
            缓存依赖监视目录，用于批量操作类型为文件系统的缓存目录监视。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityContainerElement.EntityTypeRefs">
            <summary>
            获取属性集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityContainerElement.Properties">
            <summary>
            获取配置属性集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Configuration.EntityContainerElementCollection">
            <summary>
            实体容器集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElementCollection.#ctor">
            <summary>
            初始化 EntityContainerElementCollection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityContainerElementCollection.CollectionType">
            <summary>
            重载 CollectionType
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElementCollection.CreateNewElement">
            <summary>
            重载 CreateNewElement
            </summary>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElementCollection.CreateNewElement(System.String)">
            <summary>
            重载 CreateNewElement
            </summary>
            <param name="key">键。</param>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            重载 GetElementKey。
            </summary>
            <param name="element">配置项</param>
            <returns>配置项的键</returns>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityContainerElementCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的配置项。
            </summary>
            <param name="index">索引。</param>
            <returns>错误码配置项。</returns>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityContainerElementCollection.Item(System.String)">
            <summary>
            获取指定键的配置项。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElementCollection.IndexOf(XMS.Core.Data.Configuration.EntityContainerElement)">
            <summary>
            获取指定 EntityElement 的索引。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElementCollection.Add(XMS.Core.Data.Configuration.EntityContainerElement)">
            <summary>
            添加配置元素。
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElementCollection.Remove(XMS.Core.Data.Configuration.EntityContainerElement)">
            <summary>
            移除指定的配置元素。
            </summary>
            <param name="element">要移除的配置元素。</param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElementCollection.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElementCollection.Remove(System.String)">
            <summary>
            移除指定键的索引。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityContainerElementCollection.Clear">
            <summary>
            清空集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Configuration.EntityModelSection">
            <summary>
            表示资源配置节。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityModelSection.#ctor">
            <summary>
            初始化 EntityModelSection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityModelSection.EntityTypes">
            <summary>
            获取实体类型集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityModelSection.EntityContainers">
            <summary>
            获取实体容器集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Configuration.EntityTypeElement">
            <summary>
            表示一个实体类型。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElement.#ctor">
            <summary>
            初始化 EntityTypeElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElement.#ctor(System.String)">
            <summary>
            使用指定的类型初始化 EntityTypeElement 类的新实例。
            </summary>
            <param name="type">类型。</param>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeElement.Name">
            <summary>
            实体的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeElement.Type">
            <summary>
            类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeElement.TableName">
            <summary>
            类型映射的表名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeElement.Properties">
            <summary>
            获取属性集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeElement.ExtendProperties">
            <summary>
            获取属性集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Configuration.EntityTypeElementCollection">
            <summary>
            实体集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElementCollection.#ctor">
            <summary>
            初始化 EntityTypeElementCollection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeElementCollection.CollectionType">
            <summary>
            重载 CollectionType
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElementCollection.CreateNewElement">
            <summary>
            重载 CreateNewElement
            </summary>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElementCollection.CreateNewElement(System.String)">
            <summary>
            重载 CreateNewElement
            </summary>
            <param name="key">键。</param>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            重载 GetElementKey。
            </summary>
            <param name="element">配置项</param>
            <returns>配置项的键</returns>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeElementCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的配置项。
            </summary>
            <param name="index">索引。</param>
            <returns>错误码配置项。</returns>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeElementCollection.Item(System.String)">
            <summary>
            获取指定键的配置项。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElementCollection.IndexOf(XMS.Core.Data.Configuration.EntityTypeElement)">
            <summary>
            获取指定 EntityElement 的索引。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElementCollection.Add(XMS.Core.Data.Configuration.EntityTypeElement)">
            <summary>
            添加配置元素。
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElementCollection.Remove(XMS.Core.Data.Configuration.EntityTypeElement)">
            <summary>
            移除指定的配置元素。
            </summary>
            <param name="element">要移除的配置元素。</param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElementCollection.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElementCollection.Remove(System.String)">
            <summary>
            移除指定键的索引。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeElementCollection.Clear">
            <summary>
            清空集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Configuration.EntityTypeRefElement">
            <summary>
            表示一个实体类型引用。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElement.#ctor">
            <summary>
            初始化 EntityTypeRefElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElement.#ctor(System.String)">
            <summary>
            使用指定的类型初始化 EntityTypeRefElement 类的新实例。
            </summary>
            <param name="type">类型。</param>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeRefElement.Name">
            <summary>
            实体的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeRefElement.Schema">
            <summary>
            架构。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeRefElement.ShardingStrategyType">
            <summary>
            切片策略类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeRefElement.BatchOperationCacheNotifyMechanismType">
            <summary>
            批量操作缓存通知机制类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeRefElement.CacheDependencyDirectory">
            <summary>
            缓存依赖监视目录，用于批量操作类型为文件系统的缓存目录监视。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Configuration.EntityTypeRefElementCollection">
            <summary>
            实体类型引用集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.#ctor">
            <summary>
            初始化 EntityTypeRefElementCollection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.CollectionType">
            <summary>
            重载 CollectionType
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.CreateNewElement">
            <summary>
            重载 CreateNewElement
            </summary>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.CreateNewElement(System.String)">
            <summary>
            重载 CreateNewElement
            </summary>
            <param name="key">键。</param>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            重载 GetElementKey。
            </summary>
            <param name="element">配置项</param>
            <returns>配置项的键</returns>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的配置项。
            </summary>
            <param name="index">索引。</param>
            <returns>错误码配置项。</returns>
        </member>
        <member name="P:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.Item(System.String)">
            <summary>
            获取指定键的配置项。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.IndexOf(XMS.Core.Data.Configuration.EntityTypeRefElement)">
            <summary>
            获取指定 EntityElement 的索引。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.Add(XMS.Core.Data.Configuration.EntityTypeRefElement)">
            <summary>
            添加配置元素。
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.Remove(XMS.Core.Data.Configuration.EntityTypeRefElement)">
            <summary>
            移除指定的配置元素。
            </summary>
            <param name="element">要移除的配置元素。</param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.Remove(System.String)">
            <summary>
            移除指定键的索引。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XMS.Core.Data.Configuration.EntityTypeRefElementCollection.Clear">
            <summary>
            清空集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Configuration.PropertyElement">
            <summary>
            表示属性的配置。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.PropertyElement.#ctor">
            <summary>
            初始化 PropertyElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Configuration.PropertyElement.#ctor(System.String)">
            <summary>
            初始化 PropertyElement 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.Name">
            <summary>
            属性名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.ColumnName">
            <summary>
            属性映射的列名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.DisplayName">
            <summary>
            属性映射的显示。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.DbType">
            <summary>
            数据类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.Length">
            <summary>
            属性值的长度，仅对字符串类型或者二进制类型有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.MinLength">
            <summary>
            属性值的最小长度，仅对字符串类型或者二进制类型有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.Precision">
            <summary>
            属性值的精度，仅对浮点数字类型的属性有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.Scale">
            <summary>
            属性值的小数位数，仅对浮点数字类型的属性有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.GeneratedOption">
            <summary>
            数据类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.Required">
            <summary>
            指示是否必填属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Configuration.PropertyElement.Index">
            <summary>
            索引。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.ConnectionStrings.Configuration.ConnectionStringProvidersSection">
            <summary>
            表示连接字符串提供程序配置节。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.ConnectionStrings.Configuration.ConnectionStringProvidersSection.#ctor">
            <summary>
            初始化 ConnectionStringProvidersSection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.Configuration.ConnectionStringProvidersSection.ConnectionStringProviders">
            <summary>
            获取错误码集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.Configuration.ConnectionStringProvidersSection.Properties">
            <summary>
            获取配置属性集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.ConnectionStrings.ConnectionStringProviders.GetConnectionStringProvider(System.String)">
            <summary>
            根据提供程序名称获取连接字符串提供程序。
            </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Data.ConnectionStrings.MongoConnectionString">
            <summary>
            表示用于连接到 Mongo 数据库的连接字符串对象。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.ConnectionStrings.MongoConnectionStringProvider">
            <summary>
            表示用于创建 Sql Server 连接字符串的工厂。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.ConnectionStrings.MongoConnectionStringProvider.#ctor">
            <summary>
            初始化 SqlServerConnectionStringProvider 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString">
            <summary>
            表示用于连接到 Sql Server 数据库的连接字符串对象。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.Dialect">
            <summary>
            获取适用于该连接字符串数据库类型的方言。
            </summary>
            <value>适用于该连接字符串数据库类型的方言。</value>
        </member>
        <member name="M:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString"/> 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString"/> 类的新实例。所提供的连接字符串为实例的内部连接信息提供数据。
            </summary>
            <param name="connectionString">对象内部连接信息的基础。分析为名称/值对。无效的键名会引发 System.Collections.Generic.KeyNotFoundException。</param>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.DataSource">
            <summary>
            获取或设置要连接到的 SQL Server 实例的名称或网络地址。
            </summary>
            <value>DataSource 属性的值；或者如果未提供任何值，则为 String.Empty。</value>
            <remarks>
            此属性对应于连接字符串中的“Data Source”、“server”、“address”、“addr”和“network address”键。
            无论所提供的连接字符串中提供了这些值中的哪一个，SqlConnectionStringBuilder 创建的连接字符串都将使用众所周知的“Data Source”键。
            </remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.Database">
            <summary>
            获取或设置与该连接关联的数据库的名称。
            </summary>
            <value>InitialCatalog 属性的值；或者如果未提供任何值，则为 String.Empty。</value>
            <remarks>此属性对应于连接字符串中的“Initial Catalog”和“database”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.UserID">
            <summary>
             获取或设置连接到 SQL Server 时要使用的用户 ID。
            </summary>
            <value>UserID 属性的值；或者如果未提供任何值，则为 String.Empty。</value>
            <remarks>此属性对应于连接字符串的“User ID”、“user”和“uid”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.Password">
            <summary>
            获取或设置 SQL Server 帐户的密码。
            </summary>
            <value>Password 属性的值；或者如果未提供任何值，则为 String.Empty。</value>
            <remarks>此属性对应于连接字符串中的“Password”和“pwd”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.PacketSize">
            <summary>
            获取或设置用来与 SQL Server 的实例通信的网络数据包的大小（以字节为单位）。
            </summary>
            <value>PacketSize 属性的值；或者如果未提供任何值，则为 8000。</value>
            <remarks>此属性对应于连接字符串中的“Packet Size”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.PersistSecurityInfo">
            <summary>
            获取或设置一个布尔值，该值指示如果连接是打开的或者一直处于打开状态，那么安全敏感信息（如密码）是否将不作为连接的一部分返回。
            </summary>
            <value>PersistSecurityInfo 属性的值；或者如果未提供任何值，则为 false。</value>
            <remarks>此属性对应于连接字符串中的“Persist Security Info”和“persistsecurityinfo”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.IntegratedSecurity">
            <summary>
            获取或设置一个布尔值，该值指示是否在连接中指定用户 ID 和密码（值为 false 时），或者是否使用当前的 Windows 帐户凭据进行身份验证（值为true 时）。
            </summary>
            <value>IntegratedSecurity 属性的值；或者如果未提供任何值，则为 false。</value>
            <remarks>此属性对应于连接字符串中的“Integrated Security”和“trusted_connection”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.UserInstance">
            <summary>
            获取或设置一个值，该值指示是否将连接从默认的 SQL Server Express 实例重定向到在调用方帐户之下运行并且在运行时启动的实例。
            </summary>
            <value>UserInstance 属性的值；或者如果未提供任何值，则为 False。</value>
            <remarks>此属性对应于连接字符串中的“User Instance”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.WorkstationID">
            <summary>
            获取或设置连接到 SQL Server 的工作站的名称。
            </summary>
            <value>WorkstationID 属性的值；或者如果未提供任何值，则为 String.Empty。</value>
            <remarks>此属性对应于连接字符串中的“Workstation ID”和“wsid”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.ConnectTimeout">
            <summary>
            获取或设置在尝试建立连接时终止尝试并生成错误之前所等待的时间。
            </summary>
            <value>ConnectTimeout 属性的值；或者如果未提供任何值，则为 15。 </value>
            <remarks>此属性对应于连接字符串中的“Connect Timeout”、“connection timeout”和“timeout”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.ApplicationName">
            <summary>
            获取或设置与连接字符串关联的应用程序的名称。
            </summary>
            <value>应用程序的名称；或者，如果未提供名称，则为“.NET SqlClient Data Provider”。 </value>
            <remarks>此属性对应于连接字符串中的“Application Name”和“app”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.AsynchronousProcessing">
            <summary>
            获取或设置一个布尔值，该值指定使用此连接字符串创建的连接是否允许异步处理。
            </summary>
            <value>AsynchronousProcessing 属性的值；或者如果未提供任何值，则为 false。</value>
            <remarks>此属性对应于连接字符串中的“Asynchronous Processing”和“async”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.AttachDBFilename">
            <summary>
            获取或设置包含主文件名称的字符串。该字符串包括可附加数据库的完整路径名。
            </summary>
            <value>AttachDBFileName 属性的值；或者如果未提供任何值，则为 String.Empty 。</value>
            <remarks>此属性对应于连接字符串中的“AttachDBFilename”、“extended properties”和“initial file name”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.ContextConnection">
            <summary>
            获取或设置一个值，该值指示应建立与 SQL Server 的客户端/服务器连接还是进程内连接。
            </summary>
            <value>ContextConnection 属性的值；或者如果未提供任何值，则为 false。</value>
            <remarks>此属性对应于连接字符串中的“Context Connection”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.CurrentLanguage">
            <summary>
            获取或设置 SQL Server 语言记录名称。
            </summary>
            <value>CurrentLanguage 属性的值；或者如果未提供任何值，则为 String.Empty。</value>
            <remarks>此属性对应于连接字符串中的“Current Language”和“language”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.Encrypt">
            <summary>
            获取或设置一个布尔值，该值指示在服务器安装了证书的情况下，SQL Server 是否为客户端和服务器之间发送的所有数据使用 SSL 加密。
            </summary>
            <value>Encrypt 属性的值；或者如果未提供任何值，则为 false。</value>
            <remarks>此属性对应于连接字符串中的“Encrypt”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.Enlist">
            <summary>
            获取或设置一个布尔值，该值指示 SQL Server 连接池程序是否在创建线程的当前事务上下文中自动登记连接。
            </summary>
            <value>Enlist 属性的值；或者如果未提供任何值，则为 true 。</value>
            <remarks>此属性对应于连接字符串中的“Enlist”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.FailoverPartner">
            <summary>
            获取或设置在主服务器停机时要连接到的伙伴服务器的名称或地址。
            </summary>
            <value>FailoverPartner 属性的值；或者如果未提供任何值，则为 String.Empty。</value>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.LoadBalanceTimeout">
            <summary>
            获取或设置连接被销毁前在连接池中存活的最短时间（以秒为单位）。
            </summary>
            <value>LoadBalanceTimeout 属性的值；或者如果未提供任何值，则为 0。</value>
            <remarks>此属性对应于连接字符串中的“Load Balance Timeout”和“connection lifetime”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.MaxPoolSize">
            <summary>
            获取或设置针对此特定连接字符串连接池中所允许的最大连接数。
            </summary>
            <value>MaxPoolSize 属性的值；或者如果未提供任何值，则为 100。</value>
            <remarks>此属性对应于连接字符串中的“Max Pool Size”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.MinPoolSize">
            <summary>
            获取或设置针对此特定连接字符串连接池中所允许的最小连接数。
            </summary>
            <value>MinPoolSize 属性的值；或者如果未提供任何值，则为 0。</value>
            <remarks>此属性对应于连接字符串中的“Min Pool Size”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.MultipleActiveResultSets">
            <summary>
            获取或设置一个布尔值，该值指示多活动结果集是否可与关联的连接相关联。
            </summary>
            <value>MultipleActiveResultSets 属性的值；如果未提供任何值，则为 false。</value>
            <remarks>此属性对应于连接字符串中的“MultipleActiveResultSets”键。此设置只有在与 SQL Server 2005 或更高版本一起使用时才会产生效果。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.NetworkLibrary">
            <summary>
            获取或设置一个字符串，该字符串包含用于建立与 SQL Server 的连接的网络库的名称。
            </summary>
            <value>NetworkLibrary 属性的值；或者如果未提供任何值，则为 String.Empty。</value>
            <remarks>
            <para>此属性对应于连接字符串的“Network Library”、“network”和“net”键。</para>
            <para>此属性支持的值包括 dbnmpntw（命名管道）、dbmsrpcn（多协议）、dbmsadsn (AppleTalk)、dbmsgnet (VIA)、dbmslpcn（共享内存）及 dbmsspxn (IPX/SPX) 和 dbmssocn (TCP/IP)。相应的网络 DLL 必须安装在要连接的系统上。如果不指定网络而使用一个本地服务器（比如“.”或“(local)”），则使用共享内存。</para>
            </remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.Pooling">
            <summary>
            获取或设置一个布尔值，该值指示每次请求连接时该连接是汇入连接池还是显式打开。
            </summary>
            <value>Pooling 属性的值；或者如果未提供任何值，则为 true。</value>
            <remarks>此属性对应于连接字符串中的“Pooling”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.Replication">
            <summary>
            获取或设置一个布尔值，该值指示是否使用连接来支持复制。
            </summary>
            <value>Replication 属性的值；或者如果未提供任何值，则为 false。</value>
            <remarks>此属性对应于连接字符串中的“Replication”键。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.TrustServerCertificate">
            <summary>
            获取或设置一个值，该值指示在跳过用于验证信任的证书链遍历时是否加密信道。
            </summary>
            <value>Replication 属性的值；或者如果未提供任何值，则为 false。</value>
            <remarks>如果设置为 true，则使用 SSL 对通道进行加密，但不通过证书链对可信度进行验证。如果连接字符串将 TrustServerCertificate 设置为 true，但 Encrypt 未设置为 true，则不加密信道。</remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.TypeSystemVersion">
            <summary>
            获取或设置一个字符串值，该值指示应用程序所需的类型系统。
            </summary>
            <value>
            <para>下表列出了 TypeSystemVersion 属性的可能值：</para>
            <para>
            SQL Server 2000  使用 SQL Server 2000 类型系统。连接到 SQL Server 2005 实例时将执行下列比较：
            XML与 NTEXTUDT 与 VARBINARYVARCHAR(MAX)、NVARCHAR(MAX) 和 VARBINARY(MAX) 分别与 TEXT、NEXT和 IMAGE。
            </para>
            <para>
            SQL Server 2005  使用 SQL Server 2005 类型系统。对 ADO.NET 的当前版本不进行任何转换。
            </para>
            <para>
            最新  使用此客户端/服务器对能够处理的最新版本。这个最新版本将随着客户端和服务器组件的升级自动更新。
            </para>
            </value>
            <remarks>
            TypeSystemVersion 属性可用于为针对某一低级版本的 SQL Server 编写的应用程序指定该相应版本。这将避免新版本 SQL Server 中可能出现的类型不兼容问题，该问题可能会导致应用程序中断。
            例如，在连接到 SQL Server 2005 实例时将 TypeSystemVersion 属性设置为“SQL Server 2000”会向应用程序公开 2000 类型系统。
            </remarks>
        </member>
        <member name="P:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.Value">
            <summary>
            获取或设置用于连接数据库的连接字符串
            </summary>
            <value>连接字符串的值。</value>
            <remarks></remarks>
        </member>
        <member name="M:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.Clone">
            <summary>
            获取连接字符串的副本。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.AcquireMasterConnectionString">
            <summary>
            从当前连接字符串创建一个可连接主数据库的主联接字符串，这通常是指没有具体指定数据库名称的连接。通常只用于数据库的创建、备份、恢复等于具体数据库无关的任务。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.CreateConnection(System.Boolean)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbConnection"/> 类的提供程序的类的一个新实例。
            </summary>
            <param name="readOnly">获取一个值，该值指示是否创建只读连接，只读连接连接数据库的只读副本，不能在此连接上执行写操作。</param>
            <returns> <b>DbConnection</b> 的新实例。 </returns>
        </member>
        <member name="M:XMS.Core.Data.ConnectionStrings.SqlServerConnectionString.ToString">
            <summary>
            返回连接字符串，即用于连接数据库的字符串。
            </summary>
            <returns>连接字符串。</returns>
        </member>
        <member name="T:XMS.Core.Data.ConnectionStrings.SqlServerConnectionStringProvider">
            <summary>
            表示用于创建 Sql Server 连接字符串的工厂。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.ConnectionStrings.SqlServerConnectionStringProvider.#ctor">
            <summary>
            初始化 SqlServerConnectionStringProvider 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DatabaseType.SqlServer">
            <summary>
            Sql Server，支持。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DatabaseType.Oracle">
            <summary>
            Oracle，当前不支持。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DatabaseType.MySql">
            <summary>
            MySql，当前不支持。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DatabaseType.Sqlite">
            <summary>
            Sqlite，当前不支持。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DatabaseType.SqlServerCe">
            <summary>
            SqlServerCe，当前不支持。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.DatabaseType.PostgreSql">
            <summary>
            PostgreSql，当前不支持。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.DbContextBase">
            <summary>
            数据库访问上下文的基本实现。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.DbContextBase.ReadOnly">
            <summary>
            获取一个值，该值指示当前上下文发送的请求是否都是只读的。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.DbContextBase.ConnectionString">
            <summary>
            获取当前业务上下文相关的默认连接字符串。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.#ctor(System.Boolean)">
            <summary>
            初始化 DbContextBase 类的新实例。
            </summary>
            <param name="readOnly">指示当前上下文发送的请求是否都是只读。</param>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
            <example>
            entityContext.ExecuteNonQuery("UPDATE Person SET Name = @p0 WHERE PersonID = @p1", "Mike", 100);
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteNonQuery(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的泛型类型的数组返回。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteQuery``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的泛型类型的数组返回。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteQuery(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的动态类型的数组返回。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteQuery(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的动态类型的数组返回。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一行第一列数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>满足条件的第一条数据的第一列的值。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteScalar``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一行第一列数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的第一条数据的第一列的值。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteFirst``1(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一条数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>满足条件的第一条数据。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteFirst``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一条数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的第一条数据。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteFirst(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回第一条数据。
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>满足条件的第一条数据。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteFirst(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回第一条数据。
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的第一条数据。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteTop``1(System.String,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并返回前 n 条数据。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="n">要返回的行数。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteTop``1(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并返回前 n 条数据。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="n">要返回的行数。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteTop(System.String,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回前 n 条数据。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="n">要返回的行数。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteTop(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回前 n 条数据。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="n">要返回的行数。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>用于执行查询的枚举器。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubset``1(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型数组返回其中指定范围的子集。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubset``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型数组返回其中指定范围的子集。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubset(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型数组返回其中指定范围的子集。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubset(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回其中指定范围的子集。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubsetWithTotalCount``1(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定范围的子集和记录的总数。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubsetWithTotalCount``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定范围的子集和记录的总数。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubsetWithTotalCount(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回其中指定范围的子集和记录的总数。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubsetWithTotalCount(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回其中指定范围的子集和记录的总数。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecutePage``1(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecutePage``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecutePage(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回其中指定页。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecutePage(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回其中指定页。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecutePageWithTotalCount``1(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecutePageWithTotalCount``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecutePageWithTotalCount(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecutePageWithTotalCount(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubset``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecutePage``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前上下文相关的默认数据库中执行查询，在满足条件限制的结果集中返回指定页的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubsetWithTotalCount``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前上下文相关的默认数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecutePageWithTotalCount``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前上下文相关的默认数据库中执行查询，在满足条件限制的结果集中返回指定页的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteNonQuery(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
            <example>
            entityContext.ExecuteNonQuery("UPDATE Person SET Name = @p0 WHERE PersonID = @p1", "Mike", 100);
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteNonQuery(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
            <example>
            entityContext.ExecuteNonQuery("UPDATE Person SET Name = @p0 WHERE PersonID = @p1", "Mike", 100);
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteNonQuery(XMS.Core.Data.IConnectionString,System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，
            </summary>
            <param name="connectionString">连接字符串。</param>
            <param name="connection">连接。</param>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">已转换的参数。</param>
            <param name="transaction">连接相关的事物对象。</param>
            <param name="commandTimeout">超时时间。</param>
            <param name="commandType">命令类型。</param>
            <returns>语句执行影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteQuery``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="connectionString">连接字符串。</param>
            <param name="connection">连接。</param>
            <param name="transaction">连接相关的事物对象。</param>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteQuery``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="connectionString">连接字符串。</param>
            <param name="connection">连接。</param>
            <param name="transaction">连接相关的事物对象。</param>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>用于执行查询的枚举器。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteQuery``1(XMS.Core.Data.IConnectionString,System.Data.IDbConnection,System.Data.Common.DbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一行第一列数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="connectionString">连接字符串。</param>
            <param name="connection">连接。</param>
            <param name="transaction">连接相关的事物对象。</param>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">已转换的参数。</param>
            <param name="commandTimeout">超时时间。</param>
            <param name="commandType">命令类型。</param>
            <returns>满足条件的第一条数据的第一列的值。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteQuery(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以动态类型返回。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="connectionString">连接字符串。</param>
            <param name="connection">连接。</param>
            <param name="transaction">连接相关的事物对象。</param>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteQuery(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以动态类型返回。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="connectionString">连接字符串。</param>
            <param name="connection">连接。</param>
            <param name="transaction">连接相关的事物对象。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteScalar``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一行第一列数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="connectionString">连接字符串。</param>
            <param name="connection">连接。</param>
            <param name="transaction">连接相关的事物对象。</param>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>满足条件的第一条数据的第一列的值。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteScalar``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一行第一列数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="connectionString">连接字符串。</param>
            <param name="connection">连接。</param>
            <param name="transaction">连接相关的事物对象。</param>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的第一条数据的第一列的值。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteScalar``1(XMS.Core.Data.IConnectionString,System.Data.IDbConnection,System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一行第一列数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="connectionString">连接字符串。</param>
            <param name="connection">连接。</param>
            <param name="transaction">连接相关的事物对象。</param>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">已转换的参数。</param>
            <param name="commandTimeout">超时时间。</param>
            <param name="commandType">命令类型。</param>
            <returns>满足条件的第一条数据的第一列的值。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteReader(XMS.Core.Data.IConnectionString,System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回数据读取器。
            </summary>
            <param name="connectionString">连接字符串。</param>
            <param name="connection">连接。</param>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">已转换的参数。</param>
            <param name="transaction">连接相关的事物对象。</param>
            <param name="commandTimeout">超时时间。</param>
            <param name="commandType">命令类型。</param>
            <returns>数据读取器。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteTop``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="n">要返回的行数。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteTop(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以动态类型返回。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="n">要返回的行数。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubset``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>用于执行查询的枚举器。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubset(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以动态类型返回。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>用于执行查询的枚举器。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubsetWithTotalCount``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.ExecuteSubsetWithTotalCount(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以动态类型返回。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.Dispose">
            <summary>
            释放非托管资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 释放托管和非托管资源； <b>false</b> 仅释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Data.DbContextBase.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:XMS.Core.Data.EntityModelProvider">
            <summary>
            实体模型提供程序。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.EntityContainerBase">
            <summary>
            实体容器。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityContainerBase.CreateEntityContext">
            <summary>
            创建实体上下文，可在该实体上下文中执行读写请求。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContainerBase.CreateEntityContext(System.Boolean)">
            <summary>
            创建实体上下文现。
            </summary>
            <param name="readOnly">指示创建的实体上下文是否只能执行读请求。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContainerBase.CreateMongoEntityContext">
            <summary>
            Create Mongo EntityContext
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Data.DefaultEntityContainer.Entities">
            <summary>
            获取实体容器中包含的实体集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.DefaultEntityContainer.Register(XMS.Core.Data.IEntityMapper,XMS.Core.Data.IEntityCachePolicy,XMS.Core.Data.IShardingStrategy)">
            <summary>
            注册指定类型的实体。
            </summary>
            <param name="entityMapper">要注册的实体映射。</param>
            <param name="cachePolicy">要注册的实体类型的缓存策略。</param>
        </member>
        <member name="T:XMS.Core.Data.EntityContextBase">
            <summary>
            数据实体访问上下文。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityContextBase.EntityContainer">
            <summary>
            获取当前实体上下文相关的实体容器。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityContextBase.ConnectionString">
            <summary>
            获取当前业务上下文相关的默认连接字符串。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.GetMappingToTable``1">
            <summary>
            为实体类型获取其映射的物理表名。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <returns>原始表名或切片后的物理表名。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.GetShardingTableName``1(System.Object)">
            <summary>
            为实体类型获取其映射的切片表名。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="entity">实体对象。</param>
            <returns>原始表名或切片后的物理表名。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.GetShardingTableName``1(XMS.Core.Data.ShardingParams)">
            <summary>
            为实体类型获取其映射的切片表名。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数，如果实体未开启切片，那么可传入 ShardingParams.Empty。</param>
            <returns>原始表名或切片后的物理表名。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.#ctor(XMS.Core.Data.IEntityContainer,System.Boolean)">
            <summary>
            初始化 EntityContextBase 类的新实例。
            </summary>
            <param name="entityContainer">实体容器。</param>
            <param name="readOnly">指示当前上下文发送的请求是否都是只读。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Add``1(``0)">
            <summary>
            添加实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Update``1(``0)">
            <summary>
            更新实体，该方法在更新过程中会进行并发冲突检测，可能会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.AddOrUpdate``1(``0)">
            <summary>
            添加或更新实体，该方法当指定的实体具有健值时对数据库执行一次查询以判断目标数据是否确实存在，如果存在，则执行更新操作，其它情况下执行添加操作。
            该方法在更新过程中会进行并发冲突检测，可能会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="entity">要添加或更新的实体。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.PartialUpdate``1(System.Object,System.Object[])">
            <summary>
            使用指定的对象更新其与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="value"></param>
            <param name="keyValues"></param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.PartialUpdate``1(XMS.Core.Data.ShardingParams,System.Object,System.Object[])">
            <summary>
            使用指定的对象更新其与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="value"></param>
            <param name="keyValues"></param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.PartialUpdate``1(System.Object,XMS.Core.Data.IPredicate)">
            <summary>
            更新所有符合指定条件的对象与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="value"></param>
            <param name="predicate"></param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.PartialUpdate``1(XMS.Core.Data.ShardingParams,System.Object,XMS.Core.Data.IPredicate)">
            <summary>
            更新所有符合指定条件的对象与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="value"></param>
            <param name="predicate"></param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.PartialUpdate``1(System.Object,System.String,System.Object[])">
            <summary>
            更新所有符合指定条件的对象与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="value"></param>
            <param name="predicate"></param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.PartialUpdate``1(XMS.Core.Data.ShardingParams,System.Object,System.String,System.Object[])">
            <summary>
            更新所有符合指定条件的对象与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="value"></param>
            <param name="predicate"></param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Delete``1(``0)">
            <summary>
            删除实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="entity"></param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Delete``1(XMS.Core.Data.IPredicate)">
            <summary>
            批量删除符合指定条件的实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate"></param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Delete``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate)">
            <summary>
            批量删除符合指定条件的实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate"></param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Delete``1(System.String,System.Object[])">
            <summary>
            批量删除符合指定条件的实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate"></param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Delete``1(XMS.Core.Data.ShardingParams,System.String,System.Object[])">
            <summary>
            批量删除符合指定条件的实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate"></param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.DeleteByPrimaryKey``1(System.Object[])">
            <summary>
            根据主键删除实体。
            </summary>
            <typeparam name="TEntity">要删除的实体的类型。</typeparam>
            <param name="keyValues">要删除的实体的键值。</param>
            <returns>删除影响的行数。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.DeleteByPrimaryKey``1(XMS.Core.Data.ShardingParams,System.Object[])">
            <summary>
            根据主键删除实体。
            </summary>
            <typeparam name="TEntity">要删除的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="keyValues">要删除的实体的键值。</param>
            <returns>删除影响的行数。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.DeleteAll``1">
            <summary>
            删除所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.DeleteAll``1(XMS.Core.Data.ShardingParams)">
            <summary>
            删除所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByPrimaryKey``1(System.Object[])">
            <summary>
            根据主键获取实体对象。
            </summary>
            <typeparam name="TEntity">要查询的实体的类型。</typeparam>
            <param name="keyValues">用来执行查找的键值。</param>
            <returns>如果找到，返回实体对象，否则返回 null。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByPrimaryKey``1(XMS.Core.Data.ShardingParams,System.Object[])">
            <summary>
            根据主键获取实体对象。
            </summary>
            <typeparam name="TEntity">要查询的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="keyValues">用来执行查找的键值。</param>
            <returns>如果找到，返回实体对象，否则返回 null。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(System.String,System.Object,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(XMS.Core.Data.ShardingParams,System.String,System.Object,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(System.String,System.Object,XMS.Core.Data.OperatorType,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(XMS.Core.Data.ShardingParams,System.String,System.Object,XMS.Core.Data.OperatorType,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(XMS.Core.Data.ShardingParams,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.OperatorType,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(XMS.Core.Data.ShardingParams,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.OperatorType,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(System.String,System.Object,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(XMS.Core.Data.ShardingParams,System.String,System.Object,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(System.String,System.Object,XMS.Core.Data.OperatorType,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(XMS.Core.Data.ShardingParams,System.String,System.Object,XMS.Core.Data.OperatorType,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(XMS.Core.Data.ShardingParams,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.OperatorType,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(XMS.Core.Data.ShardingParams,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.OperatorType,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Find``1(XMS.Core.Data.IPredicate,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Find``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Find``1(System.String,System.Object[],XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Find``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Find``1(System.String,XMS.Core.Data.IPredicate,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Find``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Find``1(System.String,System.String,System.Object[],XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Find``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindAll``1(XMS.Core.Data.ISort[])">
            <summary>
            查找所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="sorts">排序规则。</param>
            <returns>实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindAll``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.ISort[])">
            <summary>
            查找所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="sorts">排序规则。</param>
            <returns>实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindAll``1(System.String,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="sorts">排序规则。</param>
            <returns>实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindAll``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="sorts">排序规则。</param>
            <returns>实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(XMS.Core.Data.ShardingParams,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(XMS.Core.Data.IPredicate,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(System.String,System.Object[],System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(System.String,XMS.Core.Data.IPredicate,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(System.String,System.String,System.Object[],System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Count``1(XMS.Core.Data.IPredicate)">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Count``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate)">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Count``1(System.String,System.Object[])">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象的数量。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Count``1(XMS.Core.Data.ShardingParams,System.String,System.Object[])">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象的数量。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``1(XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``1(System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``1(System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子集。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子集。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``1(System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子集。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子集。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``1(XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``1(System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``1(System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``1(System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``1(XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``1(System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``1(System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子页。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子页。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``1(System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子页。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子页。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``1(XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``1(System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``1(System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``1(System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 condition 参数指定的语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 condition 参数指定的语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPage``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 condition 参数指定的语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 condition 参数指定的语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindPageWithTotalCount``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByPrimaryKeyInternal``1(XMS.Core.Data.ShardingParams,System.Object[])">
            <summary>
            根据主键获取实体对象。
            </summary>
            <typeparam name="TEntity">要查询的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="keyValues">用来执行查找的键值。</param>
            <returns>如果找到，返回实体对象，否则返回 null。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByPropertyInternal``1(XMS.Core.Data.ShardingParams,System.String,System.Object,XMS.Core.Data.OperatorType,System.Nullable{System.Int32},System.Nullable{System.Int32},XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByPropertyInternal``1(XMS.Core.Data.ShardingParams,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.OperatorType,System.Nullable{System.Int32},System.Nullable{System.Int32},XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindInternal``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,XMS.Core.Data.ISort[])">
            <summary>
            查询符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindInternal``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],XMS.Core.Data.ISort[])">
            <summary>
            查询符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTopInternal``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTopInternal``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.CountInternal``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate)">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.CountInternal``1(XMS.Core.Data.ShardingParams,System.String,System.Object[])">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象的数量。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetInternal``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查询符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetInternal``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查询符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCountInternal``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCountInternal``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByPrimaryKey``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.Object[])">
            <summary>
            根据主键获取实体对象。
            </summary>
            <typeparam name="TEntity">要查询的实体的类型。</typeparam>
            <param name="keyValues">用来执行查找的键值。</param>
            <returns>如果找到，返回实体对象，否则返回 null。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.String,System.Object,XMS.Core.Data.OperatorType,System.Nullable{System.Int32},System.Nullable{System.Int32},XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindByProperty``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.OperatorType,System.Nullable{System.Int32},System.Nullable{System.Int32},XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Find``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.String,XMS.Core.Data.IPredicate,XMS.Core.Data.ISort[])">
            <summary>
            查询符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Find``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.String,System.String,System.Object[],XMS.Core.Data.ISort[])">
            <summary>
            查询符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.String,XMS.Core.Data.IPredicate,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindTop``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.String,System.String,System.Object[],System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Count``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,XMS.Core.Data.IPredicate)">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.Count``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.String,System.Object[])">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象的数量。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查询符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubset``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查询符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.FindSubsetWithTotalCount``1(XMS.Core.Data.IConnectionString,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,XMS.Core.Data.IEntityMapper,System.String,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.EntityContextBase.EnsureEntityTypeExists(XMS.Core.Data.IEntityContainer,System.Type)">
            <summary>
            确保指定类型的实体已定义，对于 Add、Update、Delete、Find 系列方法，确保其泛型参数 T 指定的类型已在实体容器中定义。
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:XMS.Core.Data.DatabaseNotExistException">
            <summary>
            表示数据库不存在错误。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.DatabaseNotExistException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.DatabaseNotExistException"/> 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.DatabaseNotExistException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.DatabaseNotExistException"/> 类的新实例。
            </summary>
            <param name="message">描述数据库不存在错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.DatabaseNotExistException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.DatabaseNotExistException"/> 类的新实例。
            </summary>
            <param name="message">描述数据库不存在错误的消息。</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.DatabaseNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.Data.DatabaseNotExistException"/> 类的新实例。
            </summary>
            <param name="info">包含要反序列化的信息的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
            <exception cref="T:System.InvalidOperationException">当前类型不是 <see cref="T:XMS.Core.Data.DatabaseNotExistException"/>。</exception>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="T:XMS.Core.Data.EntityConcurrencyException">
            <summary>
            表示实体更新中发生的并发错误。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityConcurrencyException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityConcurrencyException"/> 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityConcurrencyException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityConcurrencyException"/> 类的新实例。
            </summary>
            <param name="message">描述并发错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityConcurrencyException"/> 类的新实例。
            </summary>
            <param name="message">描述并发错误的消息。</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.Data.EntityConcurrencyException"/> 类的新实例。
            </summary>
            <param name="info">包含要反序列化的信息的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
            <exception cref="T:System.InvalidOperationException">当前类型不是 <see cref="T:XMS.Core.Data.EntityConcurrencyException"/>。</exception>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="T:XMS.Core.Data.EntityException">
            <summary>
            表示实体访问中发生的错误。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityException"/> 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityException"/> 类的新实例。
            </summary>
            <param name="message">描述实体错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityException"/> 类的新实例。
            </summary>
            <param name="message">描述实体错误的消息。</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.Data.EntityException"/> 类的新实例。
            </summary>
            <param name="info">包含要反序列化的信息的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
            <exception cref="T:System.InvalidOperationException">当前类型不是 <see cref="T:XMS.Core.Data.EntityException"/>。</exception>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="T:XMS.Core.Data.EntityNotExistException">
            <summary>
            表示实体不存在错误。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityNotExistException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityNotExistException"/> 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityNotExistException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityNotExistException"/> 类的新实例。
            </summary>
            <param name="message">描述实体不存在错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityNotExistException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityNotExistException"/> 类的新实例。
            </summary>
            <param name="message">描述实体不存在错误的消息。</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.Data.EntityNotExistException"/> 类的新实例。
            </summary>
            <param name="info">包含要反序列化的信息的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
            <exception cref="T:System.InvalidOperationException">当前类型不是 <see cref="T:XMS.Core.Data.EntityNotExistException"/>。</exception>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="T:XMS.Core.Data.EntityAlreadyDeletedException">
            <summary>
            表示实体已删除错误。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityAlreadyDeletedException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityAlreadyDeletedException"/> 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityAlreadyDeletedException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityAlreadyDeletedException"/> 类的新实例。
            </summary>
            <param name="message">描述实体已删除错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityAlreadyDeletedException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 <see cref="T:XMS.Core.Data.EntityAlreadyDeletedException"/> 类的新实例。
            </summary>
            <param name="message">描述实体已删除错误的消息。</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.EntityAlreadyDeletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.Data.EntityAlreadyDeletedException"/> 类的新实例。
            </summary>
            <param name="info">包含要反序列化的信息的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
            <exception cref="T:System.InvalidOperationException">当前类型不是 <see cref="T:XMS.Core.Data.EntityAlreadyDeletedException"/>。</exception>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="T:XMS.Core.Data.GroupOperator">
            <summary>
            分组运算符。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.GroupOperator.And">
            <summary>
            并
            </summary>
        </member>
        <member name="F:XMS.Core.Data.GroupOperator.Or">
            <summary>
            或
            </summary>
        </member>
        <member name="T:XMS.Core.Data.IConnectionString">
            <summary>
            数据库连接字符串。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IConnectionString.Dialect">
            <summary>
            获取适用于该连接字符串数据库类型的方言。
            </summary>
            <value>适用于该连接字符串数据库类型的方言。</value>
        </member>
        <member name="P:XMS.Core.Data.IConnectionString.DataSource">
            <summary>
            获取或设置要连接的数据库服务器实例的名称或网络地址。
            </summary>
            <value>数据库服务器实例的名称或网络地址。</value>
        </member>
        <member name="P:XMS.Core.Data.IConnectionString.Database">
            <summary>
            获取或设置要连接的数据库的名称。
            </summary>
            <value>数据库的名称。</value>
        </member>
        <member name="P:XMS.Core.Data.IConnectionString.UserID">
            <summary>
            获取或设置连接数据库所使用的用户名。
            </summary>
            <value>连接数据库所使用的用户名。</value>
        </member>
        <member name="P:XMS.Core.Data.IConnectionString.Value">
            <summary>
            获取用于连接数据库的连接字符串
            </summary>
            <value>连接字符串的值。</value>
        </member>
        <member name="M:XMS.Core.Data.IConnectionString.AcquireMasterConnectionString">
            <summary>
            从当前连接字符串获取一个可连接主数据库的主联接字符串，该连接字符串使用与当前连接字符串相同的用户名、密码和配置参数连接主数据库。
            主连接字符串是指连接到 master 数据库的连接字符串，不需要为其指定数据库名称, 通常只用于数据库的创建、备份、恢复等于具体数据库无关的任务。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IConnectionString.AcquireConnectionString(System.String,System.String)">
            <summary>
            从当前连接字符串获取一个连接到指定数据源和数据库的连接字符串，该连接字符串使用与当前连接字符串相同的用户名、密码和配置参数连接目标数据库。
            </summary>
            <param name="dataSource">数据源，ip 或者实例名。</param>
            <param name="database">数据库的名称。</param>
            <returns>可用于连接目标数据库的连接字符串。</returns>
        </member>
        <member name="M:XMS.Core.Data.IConnectionString.CreateConnection(System.Boolean)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbConnection"/> 类的提供程序的类的一个新实例。
            </summary>
            <param name="readOnly">获取一个值，该值指示是否创建只读连接，只读连接连接数据库的只读副本，不能在此连接上执行写操作。</param>
            <returns> <b>DbConnection</b> 的新实例。 </returns>
        </member>
        <member name="T:XMS.Core.Data.IDataPartitionRule">
            <summary>
            数据分片规则。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IDataPartitionRule.RaiseDataSourcePartition">
            <summary>
            获取一个值，该值指示是否支持按数据源进行分区。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IDataPartitionRule.RaiseDatabasePartition">
            <summary>
            获取一个值，该值指示是否支持按数据库进行分库。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IDataPartitionRule.RaiseTablePartition">
            <summary>
            获取一个值，该值指示是否支持按数据表进行分表。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IDataPartitionRule.GetPartitionDataSourceName(System.String)">
            <summary>
            获取数据库服务器分区名。
            </summary>
            <param name="rawDatasourceName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IDataPartitionRule.GetPartitionDatabaseName(System.String)">
            <summary>
            根据原始库名获取分区库名。
            </summary>
            <param name="rawDatabaseName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IDataPartitionRule.GetPartitionTableName(System.String)">
            <summary>
            根据原始表名获取分区表名。
            </summary>
            <param name="rawTableName"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Data.IDbContext">
            <summary>
            数据库访问接口。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IDbContext.ReadOnly">
            <summary>
            获取一个值，该值指示当前上下文发送的请求是否都是只读的。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IDbContext.ConnectionString">
            <summary>
            获取当前业务上下文相关的默认连接字符串。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.BeginTransaction">
             <summary>
             使用快照隔离级别开始执行事务操作。
             SQL Server 中默认不启用事务快照机制，要启用事务快照机制:
            		1.停掉所有可能正在使用目标数据库的服务和应用程序;
            		2.如果仍然有连接存在，可通过先分离数据库，在附加数据库的方法断掉连接;
            		3.在目标数据库中执行以下两个查询：
            			ALTER DATABASE xxx SET ALLOW_SNAPSHOT_ISOLATION ON		// 此语句开启快照隔离
            			ALTER DATABASE xxx SET READ_COMMITTED_SNAPSHOT ON		// 此语句开启已提交读快照隔离级别，保证查询操作不会被其它正在执行修改操作的事物阻塞
            	要在数据库中查看各数据库事务快照机制启用情况，请使用以下语句：
            		SELECT name, snapshot_isolation_state, snapshot_isolation_state_desc, is_read_committed_snapshot_on FROM sys.databases
             事务示例：
             using(IEntityContext entityContext = this.CreateBusinessContext())
             {
            		entityContext.BeginTransaction();
            		try
            		{
            			// 任意业务代码
            
            			entityContext.Commit();
            		}
            		catch
            		{
            			entityContext.Rollback();
            			throw;
            		}
            	}
            	备注：
            		SNAPSHOT 事务与其它事务有一种情况是不一样的，两个事务相继开始，如果两个都是更新同一条记录，那么后面更新的事务
            		会在前面更新的事务的COMMIT时由等待状态转为抛出错误。或者同样两个事务相继开始，第1个事务在更新这个记录，而第2
            		个事务在第1个事务 COMMIT 前（不理是在更新语句前还是后）有过查询这条记录的话，那么这第2个事务不管是在第1个事务
            		COMMIT 前还是后也有更新这条记录的话，那么第2个事务就会抛出并发错误。错误如下所示： “Msg 3960, Level 16, State 2,
            		Line 2 Snapshot isolation transaction aborted due to update conflict. You cannot use snapshot isolation 
            		to access table 'dbo.aaa' directly or indirectly in database 'Tecsys_db1' to update, delete, or insert 
            		the row that has been modified or deleted by another transaction. Retry the transaction or change the 
            		isolation level for the update/delete statement.”的错误，而其它级别的所有事务则都能正常工作，没有错误发生。
            		总之，SNAPSHOT事务是两个事务不能同时更新同一条记录，或者是一个事务在更新，另一个事务只要在第1个更新事务 COMMIT
            		前有过查询，甚至这第2个事务是在第1个事务更新语句后才开始的，这第2个事务一定不能有任何更新这条记录的语句出现，否则就会出错。
             </summary>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            使用指定的事务隔离级别开始执行事务操作。
            </summary>
            <param name="isolationLevel">用来初始化事务操作的事务隔离级别。</param>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.Commit">
            <summary>
            提交当前事务。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.Rollback">
            <summary>
            回滚当前事务。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，仅返回语句执行影响的行数。
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
            <example>
            entityContext.ExecuteNonQuery("UPDATE Person SET Name = @p0 WHERE PersonID = @p1", "Mike", 100);
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteNonQuery(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，仅返回语句执行影响的行数。
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的泛型类型的数组返回。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteQuery``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的泛型类型的数组返回。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteQuery(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的动态类型的数组返回。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteQuery(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的动态类型的数组返回。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一行第一列数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>满足条件的第一条数据的第一列的值。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteScalar``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一行第一列数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的第一条数据的第一列的值。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteFirst``1(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一条数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>满足条件的第一条数据。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteFirst``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，返回第一条数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的第一条数据。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteFirst(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回第一条数据。
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>满足条件的第一条数据。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteFirst(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回第一条数据。
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的第一条数据。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteTop``1(System.String,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并返回前 n 条数据。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="n">要返回的行数。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteTop``1(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并返回前 n 条数据。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="n">要返回的行数。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteTop(System.String,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回前 n 条数据。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="n">要返回的行数。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteTop(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回前 n 条数据。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="n">要返回的行数。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>用于执行查询的枚举器。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteSubset``1(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型数组返回其中指定范围的子集。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteSubset``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型数组返回其中指定范围的子集。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteSubset(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型数组返回其中指定范围的子集。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteSubset(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回其中指定范围的子集。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteSubsetWithTotalCount``1(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定范围的子集和记录的总数。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteSubsetWithTotalCount``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定范围的子集和记录的总数。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteSubsetWithTotalCount(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回其中指定范围的子集和记录的总数。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteSubsetWithTotalCount(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回其中指定范围的子集和记录的总数。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="startIndex">查询结果返回数据的起始位置。</param>
            <param name="count">查询结果返回的数量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecutePage``1(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecutePage``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecutePage(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回其中指定页。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecutePage(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以动态类型返回其中指定页。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecutePageWithTotalCount``1(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecutePageWithTotalCount``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <typeparam name="TResult">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecutePageWithTotalCount(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecutePageWithTotalCount(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，并以给定的泛型类型返回其中指定页。
            </summary>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>查询返回的结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteSubset``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecutePage``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前上下文相关的默认数据库中执行查询，在满足条件限制的结果集中返回指定页的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecuteSubsetWithTotalCount``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前上下文相关的默认数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IDbContext.ExecutePageWithTotalCount``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前上下文相关的默认数据库中执行查询，在满足条件限制的结果集中返回指定页的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="T:XMS.Core.Data.IDialect">
            <summary>
            数据库方言。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IDialect.DatabaseType">
            <summary>
            获取方言对应的数据库类型。
            </summary>
            <value><see cref="P:XMS.Core.Data.IDialect.DatabaseType"/> 值之一，表示使用的数据库类型。</value>
        </member>
        <member name="P:XMS.Core.Data.IDialect.BatchQuerySupported">
            <summary>
            获取一个值，该值指示是否支持批量查询。
            </summary>
            <value>一个值，该值指示是否支持批量查询。</value>
        </member>
        <member name="P:XMS.Core.Data.IDialect.BatchQuerySeperator">
            <summary>
            获取一个值，该值表示批量查询语句分隔符。
            </summary>
            <value>一个值，该值表示批量查询语句分隔符。</value>
        </member>
        <member name="P:XMS.Core.Data.IDialect.ParameterPrefix">
            <summary>
            获取一个值，该值表示参数前缀。
            </summary>
            <value>一个值，该值表示参数前缀。</value>
        </member>
        <member name="P:XMS.Core.Data.IDialect.OpenQuote">
            <summary>
            获取一个值，该值表示对表名或列名进行引用时可使用的左引号。
            </summary>
            <value>一个值，该值表示对表名或列名进行引用时可使用的左引号。</value>
        </member>
        <member name="P:XMS.Core.Data.IDialect.CloseQuote">
            <summary>
            获取一个值，该值表示对表名或列名进行引用时可使用的右引号。
            </summary>
            <value>一个值，该值表示对表名或列名进行引用时可使用的右引号。</value>
        </member>
        <member name="M:XMS.Core.Data.IDialect.ShouldGeneratePropertyValueInServer(XMS.Core.Data.IPropertyMap)">
            <summary>
            检查属性的值是否应该由数据库服务器负责生成，如果应该由服务器生成，则返回 true，否则返回 false。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.MapRowVersionPropertyValueToDBValue(XMS.Core.Data.IPropertyMap,System.Int64,System.Data.DbType@)">
            <summary>
            映射行版本属性值到数据库类型的值，之后该值可用于更新语句。
            </summary>
            <param name="property"></param>
            <param name="propertyValue"></param>
            <param name="propertyDBType">行版本属性应使用的数据类型。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.QuoteString(System.String)">
            <summary>
            获取一个表示引用指定值表示的表名或者列名的字符串。
            </summary>
            <param name="value">要引用的表名或者列名。</param>
        </member>
        <member name="M:XMS.Core.Data.IDialect.CreateTableName(System.String,System.String,System.String)">
            <summary>
            创建一个可用于拼接 SQL 语句的表名引用： {schemaName}.{tableName} as {alias}。
            </summary>
            <param name="schemaName">架构名。</param>
            <param name="tableName">表名。</param>
            <param name="alias">别名。</param>
        </member>
        <member name="M:XMS.Core.Data.IDialect.CreateColumnName(System.String,System.String,System.String)">
            <summary>
            创建一个可用于拼接 SQL 语句的列名引用： {prefix}.{columnName} as {alias}。
            </summary>
            <param name="prefix">前缀。</param>
            <param name="columnName">列名。</param>
            <param name="alias">别名。</param>
        </member>
        <member name="M:XMS.Core.Data.IDialect.AddParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Int32)">
            <summary>
            将值添加到参数字典并返回自动生成的参数变量名。
            </summary>
            <param name="parameters">参数字典。</param>
            <param name="value">要添加到参数字典的值。</param>
            <param name="parameterStartIndex">要添加到参数字典的值。</param>
            <returns>自动生成的参数名。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.GetDateTimeClause">
            <summary>
            获取用于返回当前数据库服务器时间的子语句。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.GetRowCountClause">
            <summary>
            获取用于返回当前查询影响行数的子语句。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.GetIdentityClause">
            <summary>
            获取用于返回当前插入数据的标识字段值的子语句。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.GetSubsetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取一个可用于返回指定 <see cref="!:sql"/> 语句限定的数据集范围内从 <see cref="!:startIndex"/> 开始至多 <see cref="!:count"/> 条数据的 sql 语句。
            </summary>
            <param name="sql">原始查询语句。</param>
            <param name="startIndex">开始索引。</param>
            <param name="count">返回数据的数量。</param>
            <param name="parameters">参数字典。</param>
            <returns>对原始语句包装之后的语句。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.GetTopSql(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取一个可用于返回指定 <see cref="!:sql"/> 语句限定的数据集数量的前 n 行的 Sql 语句。
            </summary>
            <param name="sql">原始查询语句。</param>
            <param name="n">返回数据的数量。</param>
            <param name="parameters">参数字典。</param>
            <returns>对原始语句包装之后的语句。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.GetTotalCountSql(System.String)">
            <summary>
            获取一个可用于返回指定 <see cref="!:sql"/> 语句限定的数据集数量的 sql 语句。
            </summary>
            <param name="sql">原始查询语句。</param>
            <returns>对原始语句包装之后的语句。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.BuildCreateDatabaseSql(System.String)">
            <summary>
            构建建库语句。
            </summary>
            <param name="databaseName">库名。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.BuildCreateTableSql(XMS.Core.Data.IEntityMapper,System.String)">
            <summary>
            构建建表语句。
            </summary>
            <param name="database">实体映射。</param>
            <param name="tableName">为该实体分配的表名（不包含分表的情况可以忽略该参数）。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.GetXmlQueryValueCompareSql(System.String,System.String,System.String,System.String,XMS.Core.Data.OperatorType,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32)">
            <summary>
            获取 XML 列查询比较语句。
            </summary>
            <param name="tableAlias">表别名。</param>
            <param name="columnName">列名。</param>
            <param name="xpathRoot">用于对 XML 列进行查询的 xpath 语句的根部分，比如：/root/test/@value 中的 /root/test。</param>
            <param name="xpathTail">用于对 XML 列进行查询的 xpath 语句的尾部分，比如：/root/test/@value 中的 @value。</param>
            <param name="operatorType">比较运算符类型。</param>
            <param name="operatorString">比较运算符字符串。</param>
            <param name="value">值。</param>
            <param name="parameters">参数。</param>
            <returns>xml 列查询比较语句。</returns>
        </member>
        <member name="M:XMS.Core.Data.IDialect.GetXmlQueryBetweenCompareSql(System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32)">
            <summary>
            获取 XML 列区间比较语句。
            </summary>
            <param name="tableAlias">表别名。</param>
            <param name="columnName">列名。</param>
            <param name="xpathRoot">用于对 XML 列进行查询的 xpath 语句的根部分，比如：/root/test/@value 中的 /root/test。</param>
            <param name="xpathTail">用于对 XML 列进行查询的 xpath 语句的尾部分，比如：/root/test/@value 中的 @value。</param>
            <param name="not">指示是否为 not between。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <param name="parameters">参数。</param>
            <returns>xml 列区间比较语句。</returns>
        </member>
        <member name="T:XMS.Core.Data.EntityBatchOperationCacheNotifyMechanismType">
            <summary>
            实体批处理操作缓存通知机制类型
            </summary>
        </member>
        <member name="F:XMS.Core.Data.EntityBatchOperationCacheNotifyMechanismType.None">
            <summary>
            适用于单机应用或不存在批量操作的集群应用，没有依赖项。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.EntityBatchOperationCacheNotifyMechanismType.CacheVersion">
            <summary>
            缓存版本号，适用于集群应用，依赖于缓存服务器，每次读取操作都会多读取一次版本。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.EntityBatchOperationCacheNotifyMechanismType.FileSystem">
            <summary>
            文件系统，适用于批量更新不频繁的场合，依赖于文件系统。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.EntityBatchOperationCacheNotifyMechanismType.MessageBus">
            <summary>
            消息总线，最优类型，依赖于消息总线。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.IEntityContainer">
            <summary>
            实体容器。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityContainer.Name">
            <summary>
            获取实体容器的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityContainer.Entities">
            <summary>
            获取实体容器中包含的实体集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityContainer.DefaultConnectionString">
            <summary>
            获取为实体容器定义的默认连接字符串。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IEntityContainer.GetShardingStrategy(XMS.Core.Data.IEntityMapper)">
            <summary>
            获取指定实体的切片策略。
            </summary>
            <param name="entityMapper"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContainer.GetEntityCachePolicy(XMS.Core.Data.IEntityMapper)">
            <summary>
            获取指定实体的缓存策略。
            </summary>
            <param name="entityMapper"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContainer.CreateEntityContext">
            <summary>
            创建实体上下文，可在该实体上下文中执行读写请求。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContainer.CreateEntityContext(System.Boolean)">
            <summary>
            创建实体上下文现。
            </summary>
            <param name="readOnly">指示创建的实体上下文是否只能执行读请求。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContainer.CreateMongoEntityContext">
            <summary>
            create mongo EntityContext
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Data.IEntityContext">
            <summary>
            实体上下文接口定义
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityContext.EntityContainer">
            <summary>
            获取当前实体上下文相关的实体容器。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.GetMappingToTable``1">
            <summary>
            为实体类型获取其映射的物理表名。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <returns>原始表名或切片后的物理表名。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.GetShardingTableName``1(System.Object)">
            <summary>
            为实体类型获取其映射的切片表名。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="entity">实体对象。</param>
            <returns>原始表名或切片后的物理表名。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.GetShardingTableName``1(XMS.Core.Data.ShardingParams)">
            <summary>
            为实体类型获取其映射的切片表名。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数，如果实体未开启切片，那么可传入 ShardingParams.Empty。</param>
            <returns>原始表名或切片后的物理表名。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Add``1(``0)">
            <summary>
            添加实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Update``1(``0)">
            <summary>
            更新实体，该方法在更新过程中会进行并发冲突检测，可能会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.AddOrUpdate``1(``0)">
            <summary>
            添加或更新实体，该方法当指定的实体具有健值时对数据库执行一次查询以判断目标数据是否确实存在，如果存在，则执行更新操作，其它情况下执行添加操作。
            该方法在更新过程中会进行并发冲突检测，可能会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="entity">要添加或更新的实体。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.PartialUpdate``1(System.Object,System.Object[])">
            <summary>
            使用指定的对象更新其与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="value"></param>
            <param name="keyValues"></param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.PartialUpdate``1(XMS.Core.Data.ShardingParams,System.Object,System.Object[])">
            <summary>
            使用指定的对象更新其与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="value"></param>
            <param name="keyValues"></param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.PartialUpdate``1(System.Object,XMS.Core.Data.IPredicate)">
            <summary>
            更新所有符合指定条件的对象与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="value"></param>
            <param name="predicate"></param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.PartialUpdate``1(XMS.Core.Data.ShardingParams,System.Object,XMS.Core.Data.IPredicate)">
            <summary>
            更新所有符合指定条件的对象与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="value"></param>
            <param name="predicate"></param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.PartialUpdate``1(System.Object,System.String,System.Object[])">
            <summary>
            更新所有符合指定条件的对象与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="value"></param>
            <param name="predicate"></param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.PartialUpdate``1(XMS.Core.Data.ShardingParams,System.Object,System.String,System.Object[])">
            <summary>
            更新所有符合指定条件的对象与实体属性重合部分的值，部分更新没有并发冲突检测，因此不会抛出并发异常。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="value"></param>
            <param name="predicate"></param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>更新影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Delete``1(``0)">
            <summary>
            删除实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="entity"></param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Delete``1(XMS.Core.Data.IPredicate)">
            <summary>
            批量删除符合指定条件的实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate"></param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Delete``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate)">
            <summary>
            批量删除符合指定条件的实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate"></param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Delete``1(System.String,System.Object[])">
            <summary>
            批量删除符合指定条件的实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate"></param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Delete``1(XMS.Core.Data.ShardingParams,System.String,System.Object[])">
            <summary>
            批量删除符合指定条件的实体。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate"></param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.DeleteByPrimaryKey``1(System.Object[])">
            <summary>
            根据主键删除实体。
            </summary>
            <typeparam name="TEntity">要删除的实体的类型。</typeparam>
            <param name="keyValues">要删除的实体的键值。</param>
            <returns>删除影响的行数。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.DeleteByPrimaryKey``1(XMS.Core.Data.ShardingParams,System.Object[])">
            <summary>
            根据主键删除实体。
            </summary>
            <typeparam name="TEntity">要删除的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="keyValues">要删除的实体的键值。</param>
            <returns>删除影响的行数。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.DeleteAll``1">
            <summary>
            删除所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.DeleteAll``1(XMS.Core.Data.ShardingParams)">
            <summary>
            删除所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <returns>删除影响的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByPrimaryKey``1(System.Object[])">
            <summary>
            根据主键获取实体对象。
            </summary>
            <typeparam name="TEntity">要查询的实体的类型。</typeparam>
            <param name="keyValues">用来执行查找的键值。</param>
            <returns>如果找到，返回实体对象，否则返回 null。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByPrimaryKey``1(XMS.Core.Data.ShardingParams,System.Object[])">
            <summary>
            根据主键获取实体对象。
            </summary>
            <typeparam name="TEntity">要查询的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="keyValues">用来执行查找的键值。</param>
            <returns>如果找到，返回实体对象，否则返回 null。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(System.String,System.Object,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(XMS.Core.Data.ShardingParams,System.String,System.Object,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(System.String,System.Object,XMS.Core.Data.OperatorType,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(XMS.Core.Data.ShardingParams,System.String,System.Object,XMS.Core.Data.OperatorType,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(XMS.Core.Data.ShardingParams,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.OperatorType,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(XMS.Core.Data.ShardingParams,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.OperatorType,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(System.String,System.Object,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(XMS.Core.Data.ShardingParams,System.String,System.Object,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(System.String,System.Object,XMS.Core.Data.OperatorType,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(XMS.Core.Data.ShardingParams,System.String,System.Object,XMS.Core.Data.OperatorType,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="propertyName">属性名称。</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(XMS.Core.Data.ShardingParams,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.OperatorType,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindByProperty``1(XMS.Core.Data.ShardingParams,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,XMS.Core.Data.OperatorType,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            根据属性查找实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="expression">属性名称表达式，例如: t=&gt;t.Name</param>
            <param name="value">属性值。</param>
            <param name="operatorType">比较运算符的类型。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合给定条件的实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Find``1(XMS.Core.Data.IPredicate,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Find``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Find``1(System.String,System.Object[],XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Find``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Find``1(System.String,XMS.Core.Data.IPredicate,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Find``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Find``1(System.String,System.String,System.Object[],XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Find``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindAll``1(XMS.Core.Data.ISort[])">
            <summary>
            查找所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="sorts">排序规则。</param>
            <returns>实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindAll``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.ISort[])">
            <summary>
            查找所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="sorts">排序规则。</param>
            <returns>实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindAll``1(System.String,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="sorts">排序规则。</param>
            <returns>实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindAll``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找所有实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="sorts">排序规则。</param>
            <returns>实体对象数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindTop``1(System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindTop``1(XMS.Core.Data.ShardingParams,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindTop``1(XMS.Core.Data.IPredicate,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindTop``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindTop``1(System.String,System.Object[],System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindTop``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindTop``1(System.String,XMS.Core.Data.IPredicate,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindTop``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindTop``1(System.String,System.String,System.Object[],System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindTop``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的前 n 个实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="n">要返回的行数。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Count``1(XMS.Core.Data.IPredicate)">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Count``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate)">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Count``1(System.String,System.Object[])">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象的数量。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.Count``1(XMS.Core.Data.ShardingParams,System.String,System.Object[])">
            <summary>
            计算符合指定谓词定义的查询条件的实体对象的数量。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``1(XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``1(System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``1(System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子集。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子集。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``1(System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子集。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子集。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``1(XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``1(System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``1(System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``1(System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="startIndex">查询结果返回数据的起始位置，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="count">查询结果返回的数量，如果 startIndex > 0 且 count > 0 则仅从 startIndex 开始返回至多 count 个数据，否则返回全部符合条件的数据。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``1(XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``1(System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中查找符合指定谓词定义的查询条件的实体对象。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``1(System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子页。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子页。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``1(System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子页。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            查找符合指定谓词定义的查询条件的实体对象的子页。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>符合条件的实体对象的数组。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``1(XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``1(XMS.Core.Data.ShardingParams,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``1(System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,XMS.Core.Data.IPredicate,System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            从实体关联的指定视图中分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``1(System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``1(System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``1(XMS.Core.Data.ShardingParams,System.String,System.String,System.Object[],System.Int32,System.Int32,XMS.Core.Data.ISort[])">
            <summary>
            分页查找符合指定谓词定义的查询条件的实体对象并返回记录总数。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="viewName">要查找的视图的名称。</param>
            <param name="predicate">查询条件。</param>
            <param name="paraValues">条件中定义的参数对应的值。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="sorts">排序规则。</param>
            <returns>查询结果。</returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubset``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 condition 参数指定的语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 condition 参数指定的语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPage``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindSubsetWithTotalCount``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <paramref name="condition"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 condition 参数指定的语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">用于参数化 condition 参数指定的语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``2(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Data.IEntityContext.FindPageWithTotalCount``2(XMS.Core.Data.ShardingParams,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="TResult">返回数据对应的结果的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <typeparam name="TEntity">要在其中查询数据的实体的类型。</typeparam>
            <param name="shardingParams">切片参数。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">查询结果返回数据的起始页。</param>
            <param name="pageSize">每页返回的数据量。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="F:XMS.Core.Data.Dialects.SqlServerDialect.Instance">
            <summary>
            获取 SqlServerDialect 的默认实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlServerDialect.GetSubsetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取一个可用于返回指定 <see cref="!:sql"/> 语句限定的数据集范围内从 <see cref="!:startIndex"/> 开始至多 <see cref="!:count"/> 条数据的 sql 语句。
            </summary>
            <param name="sql">原始查询语句。</param>
            <param name="startIndex">开始索引。</param>
            <param name="count">返回数据的数量。</param>
            <param name="parameters">参数字典。</param>
            <returns>对原始语句包装之后的语句。</returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlServerDialect.GetTopSql(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取一个可用于返回指定 <see cref="!:sql"/> 语句限定的数据集数量的前 n 行的 Sql 语句。
            </summary>
            <param name="sql">原始查询语句。</param>
            <param name="n">返回数据的数量。</param>
            <returns>对原始语句包装之后的语句。</returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlServerDialect.BuildCreateDatabaseSql(System.String)">
            <summary>
            构建建库语句。
            </summary>
            <param name="databaseName">库名。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlServerDialect.BuildCreateTableSql(XMS.Core.Data.IEntityMapper,System.String)">
            <summary>
            构建建表语句。
            </summary>
            <param name="entityMapper">实体映射。</param>
            <param name="tableName">为该实体分配的表名（不包含分表的情况可以忽略该参数）。</param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Data.Dialects.SqlDialectBase">
            <summary>
            <see cref="T:XMS.Core.Data.IDialect"/> 接口的基本实现。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.Dialects.SqlDialectBase.DatabaseType">
            <summary>
            获取方言对应的数据库类型。
            </summary>
            <value><see cref="P:XMS.Core.Data.Dialects.SqlDialectBase.DatabaseType"/> 值之一，表示使用的数据库类型。</value>
        </member>
        <member name="P:XMS.Core.Data.Dialects.SqlDialectBase.BatchQuerySupported">
            <summary>
            获取一个值，该值指示是否支持批量查询。
            </summary>
            <value>一个值，该值指示是否支持批量查询。</value>
        </member>
        <member name="P:XMS.Core.Data.Dialects.SqlDialectBase.BatchQuerySeperator">
            <summary>
            获取一个值，该值表示批量查询语句分隔符。
            </summary>
            <value>一个值，该值表示批量查询语句分隔符。</value>
        </member>
        <member name="P:XMS.Core.Data.Dialects.SqlDialectBase.ParameterPrefix">
            <summary>
            获取一个值，该值表示参数前缀。
            </summary>
            <value>一个值，该值表示参数前缀。</value>
        </member>
        <member name="P:XMS.Core.Data.Dialects.SqlDialectBase.OpenQuote">
            <summary>
            获取一个值，该值表示对表名或列名进行引用时可使用的左引号。
            </summary>
            <value>一个值，该值表示对表名或列名进行引用时可使用的左引号。</value>
        </member>
        <member name="P:XMS.Core.Data.Dialects.SqlDialectBase.CloseQuote">
            <summary>
            获取一个值，该值表示对表名或列名进行引用时可使用的右引号。
            </summary>
            <value>一个值，该值表示对表名或列名进行引用时可使用的右引号。</value>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.QuoteString(System.String)">
            <summary>
            获取一个表示引用指定值表示的表名或者列名的字符串。
            </summary>
            <param name="value">要引用的表名或者列名。</param>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.IsQuoted(System.String)">
            <summary>
            判断一个值是否被引用，即是否符合 {OpenQuote}XXX{CloseQuote} 格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.CreateTableName(System.String,System.String,System.String)">
            <summary>
            创建一个可用于拼接 SQL 语句的表名引用： {schemaName}.{tableName} as {alias}。
            </summary>
            <param name="schemaName">架构名。</param>
            <param name="tableName">表名。</param>
            <param name="alias">别名。</param>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.CreateColumnName(System.String,System.String,System.String)">
            <summary>
            创建一个可用于拼接 SQL 语句的列名引用： {prefix}.{columnName} as {alias}。
            </summary>
            <param name="prefix">前缀。</param>
            <param name="columnName">列名。</param>
            <param name="alias">别名。</param>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.AddParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Int32)">
            <summary>
            将值添加到参数字典并返回自动生成的参数变量名。
            </summary>
            <param name="parameters">参数字典。</param>
            <param name="value">要添加到参数字典的值。</param>
            <returns>自动生成的参数名。</returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.GetDateTimeClause">
            <summary>
            获取用于返回当前数据库服务器时间的子语句。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.GetRowCountClause">
            <summary>
            获取用于返回当前查询影响行数的子语句。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.GetIdentityClause">
            <summary>
            获取用于返回当前插入数据的标识字段值的子语句。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.GetSubsetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取一个可用于返回指定 <see cref="!:sql"/> 语句限定的数据集范围内从 <see cref="!:startIndex"/> 开始至多 <see cref="!:count"/> 条数据的 sql 语句。
            </summary>
            <param name="sql">原始查询语句。</param>
            <param name="startIndex">开始索引。</param>
            <param name="count">返回数据的数量。</param>
            <param name="parameters">参数字典。</param>
            <returns>对原始语句包装之后的语句。</returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.GetTopSql(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取一个可用于返回指定 <see cref="!:sql"/> 语句限定的数据集数量的前 n 行的 Sql 语句。
            </summary>
            <param name="sql">原始查询语句。</param>
            <param name="n">返回数据的数量。</param>
            <param name="parameters">参数字典。</param>
            <returns>对原始语句包装之后的语句。</returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.GetTotalCountSql(System.String)">
            <summary>
            获取一个可用于返回指定 <see cref="!:sql"/> 语句限定的数据集数量的 sql 语句。
            </summary>
            <param name="sql">原始查询语句。</param>
            <returns>对原始语句包装之后的语句。</returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.BuildCreateDatabaseSql(System.String)">
            <summary>
            构建建库语句。
            </summary>
            <param name="databaseName">库名。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.BuildCreateTableSql(XMS.Core.Data.IEntityMapper,System.String)">
            <summary>
            构建建表语句。
            </summary>
            <param name="database">实体映射。</param>
            <param name="tableName">为该实体分配的表名（不包含分表的情况可以忽略该参数）。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.GetXmlQueryValueCompareSql(System.String,System.String,System.String,System.String,XMS.Core.Data.OperatorType,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32)">
            <summary>
            获取 XML 列查询比较语句。
            </summary>
            <param name="tableAlias">表别名。</param>
            <param name="columnName">列名。</param>
            <param name="xpathRoot">用于对 XML 列进行查询的 xpath 语句的根部分，比如：/root/test/@value 中的 /root/test。</param>
            <param name="xpathTail">用于对 XML 列进行查询的 xpath 语句的尾部分，比如：/root/test/@value 中的 @value。</param>
            <param name="operatorType">比较运算符类型。</param>
            <param name="operatorString">比较运算符字符串。</param>
            <param name="value">值。</param>
            <param name="parameters">参数。</param>
            <returns>xml 列查询比较语句。</returns>
        </member>
        <member name="M:XMS.Core.Data.Dialects.SqlDialectBase.GetXmlQueryBetweenCompareSql(System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32)">
            <summary>
            获取 XML 列区间比较语句。
            </summary>
            <param name="tableAlias">表别名。</param>
            <param name="columnName">列名。</param>
            <param name="xpathRoot">用于对 XML 列进行查询的 xpath 语句的根部分，比如：/root/test/@value 中的 /root/test。</param>
            <param name="xpathTail">用于对 XML 列进行查询的 xpath 语句的尾部分，比如：/root/test/@value 中的 @value。</param>
            <param name="not">指示是否为 not between。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <param name="parameters">参数。</param>
            <returns>xml 列区间比较语句。</returns>
        </member>
        <member name="T:XMS.Core.Data.Predicates.ColumnComparePredicate">
            <summary>
            表示列比较谓词 a.Name=b.Name。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Predicates.ExistsPredicate">
            <summary>
            Groups IPredicates together using the specified group operator.
            exists (select 1 from {TableName} as {TableAlias} where {Predicate})
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Predicates.Exists2Predicate">
            <summary>
            Groups IPredicates together using the specified group operator.
            exists (select 1 from {TableName} as {TableAlias} where {Predicate})
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Predicates.GroupPredicate">
            <summary>
            Groups IPredicates together using the specified group operator.
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Predicates.ValueComparePredicate">
            <summary>
            表示值比较谓词 a.Name=@0。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.Predicates.XmlValueComparePredicate">
            <summary>
            表示值比较谓词 a.Name['xpath']=@0。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.IPredicate">
            <summary>
            表示谓词，用于定义查询条件。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.ISort">
            <summary>
            表示一个排序规则。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.ISort.TableAlias">
            <summary>
            表别名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.ISort.ColumnName">
            <summary>
            列名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.ISort.Direction">
            <summary>
            排序放向。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityMapperManager.GetSection(System.String)">
            <summary>
            从 EntityModel.Config 配置文件中返回指定的 EntityModelSection 对象。
            </summary>
            <param name="sectionName">要返回的 EntityModelSection 的名称。</param>
            <returns>指定的 EntityModelSection 对象。</returns>
        </member>
        <member name="T:XMS.Core.Data.IEntityMapper">
            <summary>
            实体映射器接口。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityMapper.EntityName">
            <summary>
            获取实体类型映射的实体的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityMapper.SchemaName">
            <summary>
            获取实体类型映射的架构名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityMapper.TableName">
            <summary>
            获取实体类型映射的表名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityMapper.EntityType">
            <summary>
            获取实体的类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityMapper.IdentityProperty">
            <summary>
            获取实体中定义的标识列。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityMapper.RowVersionProperty">
            <summary>
            获取实体中用来定义的行版本的属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityMapper.Properties">
            <summary>
            获取实体所有属性映射集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityMapper.PrimaryKey">
            <summary>
            获取实体键属性映射集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityMapper.ComputedProperties">
            <summary>
            获取实体中定义的计算列集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityMapper.GUIDProperties">
            <summary>
            获取实体中定义的GUID列集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetProperty(System.String)">
            <summary>
            获取指定名称的属性。
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetPropertyByColumnName(System.String)">
            <summary>
            获取指定列名称的属性。
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForInsert(XMS.Core.Data.IDialect,System.String,System.Collections.Generic.IDictionary{System.String,System.String}@,System.String@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            获取对指定分区表执行插入操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="parameters">主语句的参数映射字典。</param>
            <param name="selectCommand">插入后通过该语句可立即获取数据库生成的自增属性或计算属性的值。</param>
            <param name="selectCommandParameters">查询语句的参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForUpdate(XMS.Core.Data.IDialect,System.String,System.Collections.Generic.IDictionary{System.String,System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@,System.String@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            获取对指定分区表执行更新操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="parameters">主语句的参数映射字典。</param>
            <param name="whereParameters">主语句的条件参数映射字典。</param>
            <param name="selectCommand">插入后通过该语句可立即获取数据库生成的计算属性或行版本的值。</param>
            <param name="selectCommandParameters">查询语句的参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForPartialUpdateByPrimaryKey(XMS.Core.Data.IDialect,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Tuple{System.String,System.Reflection.MemberInfo}}@,System.Tuple{System.String,XMS.Core.Data.IPropertyMap}[]@)">
            <summary>
            获取对指定分区表执行部分更新操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partialType">实体类型。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="updateParameters">主语句的参数映射字典。</param>
            <param name="whereParameters">主语句的条件参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForPartialUpdateByPredicate(XMS.Core.Data.IDialect,System.Type,System.String,XMS.Core.Data.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Tuple{System.String,System.Reflection.MemberInfo}}@,System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            获取对指定分区表执行部分更新操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partialType">实体类型。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="parameters">主语句的参数映射字典。</param>
            <param name="predicate">条件。</param>
            <param name="whereParameters">主语句的条件参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForPartialUpdateByPredicate(XMS.Core.Data.IDialect,System.Type,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Tuple{System.String,System.Reflection.MemberInfo}}@)">
            <summary>
            获取对指定分区表执行部分更新操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partialType">实体类型。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="parameters">主语句的参数映射字典。</param>
            <param name="predicate">条件。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForDeleteByPrimaryKey(XMS.Core.Data.IDialect,System.String,System.Tuple{System.String,XMS.Core.Data.IPropertyMap}[]@)">
            <summary>
            获取对指定分区表执行删除操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="whereParameters">主语句的条件参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForDeleteByPredicate(XMS.Core.Data.IDialect,System.String,XMS.Core.Data.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            获取对指定分区表执行删除操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="predicate">条件。</param>
            <param name="whereParameters">主语句的条件参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForDeleteByPredicate(XMS.Core.Data.IDialect,System.String,System.String)">
            <summary>
            获取对指定分区表执行删除操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="predicate">条件。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForFindByPrimaryKey(XMS.Core.Data.IDialect,System.String,System.Tuple{System.String,XMS.Core.Data.IPropertyMap}[]@)">
            <summary>
            获取按主键查找命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="whereParameters">查询参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForSelect(XMS.Core.Data.IDialect,System.String,XMS.Core.Data.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object}@,XMS.Core.Data.ISort[])">
            <summary>
            获取按条件查找命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="predicate">条件。</param>
            <param name="parameters">查询参数。</param>
            <param name="sorts">排序规则。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForSelect(XMS.Core.Data.IDialect,System.String,System.String,XMS.Core.Data.ISort[])">
            <summary>
            获取按条件查找命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="predicate">条件。</param>
            <param name="sorts">排序规则。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForViewSelect(XMS.Core.Data.IDialect,System.String,System.String,XMS.Core.Data.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object}@,XMS.Core.Data.ISort[])">
            <summary>
            获取按条件从实体相关的视图中执行查找的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="viewName">视图名称,例如：V_{0}。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="predicate">条件。</param>
            <param name="parameters">查询参数。</param>
            <param name="sorts">排序规则。</param>
        </member>
        <member name="M:XMS.Core.Data.IEntityMapper.GetCommandForViewSelect(XMS.Core.Data.IDialect,System.String,System.String,System.String,XMS.Core.Data.ISort[])">
            <summary>
            获取按条件从实体相关的视图中执行查找的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="viewName">视图名称,例如：V_{0}。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="predicate">条件。</param>
            <param name="sorts">排序规则。</param>
        </member>
        <member name="T:XMS.Core.Data.EntityMapper">
            <summary>
            实体映射器。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityMapper.EntityName">
            <summary>
            获取实体类型映射的实体的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityMapper.SchemaName">
            <summary>
            获取实体类型映射的架构名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityMapper.TableName">
            <summary>
            获取实体类型映射的表名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityMapper.EntityType">
            <summary>
            获取实体类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityMapper.IdentityProperty">
            <summary>
            获取实体中定义的标识列。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityMapper.RowVersionProperty">
            <summary>
            获取实体中用来定义的行版本的属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityMapper.Properties">
            <summary>
            获取实体所有属性映射集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityMapper.PrimaryKey">
            <summary>
            获取实体主键。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityMapper.ComputedProperties">
            <summary>
            获取实体中定义的计算列集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.EntityMapper.GUIDProperties">
            <summary>
            获取实体中定义的GUID列集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetProperty(System.String)">
            <summary>
            获取指定名称的属性。
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetPropertyByColumnName(System.String)">
            <summary>
            获取指定列名称的属性。
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.RegisterProperty(XMS.Core.Data.IPropertyMap)">
            <summary>
            注册实体属性映射。
            </summary>
            <param name="propertyMap"></param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.Prepare">
            <summary>
            通知映射器所有映射已经完成，映射器开始准备工作，之后便进入可使用状态。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForInsert(XMS.Core.Data.IDialect,System.String,System.Collections.Generic.IDictionary{System.String,System.String}@,System.String@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            获取对指定分区表执行插入操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="parameters">主语句的参数映射字典。</param>
            <param name="selectCommand">插入后通过该语句可立即获取数据库生成的自增属性、计算属性或行版本的值。</param>
            <param name="selectCommandParameters">查询语句的参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForUpdate(XMS.Core.Data.IDialect,System.String,System.Collections.Generic.IDictionary{System.String,System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@,System.String@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            获取对指定分区表执行更新操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="parameters">主语句的参数映射字典。</param>
            <param name="whereParameters">主语句的条件参数映射字典。</param>
            <param name="selectCommand">插入后通过该语句可立即获取数据库生成的计算属性或行版本的值。</param>
            <param name="selectCommandParameters">查询语句的参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForDeleteByPrimaryKey(XMS.Core.Data.IDialect,System.String,System.Tuple{System.String,XMS.Core.Data.IPropertyMap}[]@)">
            <summary>
            获取对指定分区表执行删除操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="whereParameters">主语句的条件参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForDeleteByPredicate(XMS.Core.Data.IDialect,System.String,XMS.Core.Data.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            获取对指定分区表执行删除操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="predicate">条件。</param>
            <param name="whereParameters">主语句的条件参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForDeleteByPredicate(XMS.Core.Data.IDialect,System.String,System.String)">
            <summary>
            获取对指定分区表执行删除操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="predicate">条件。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForSelect(XMS.Core.Data.IDialect,System.String,XMS.Core.Data.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object}@,XMS.Core.Data.ISort[])">
            <summary>
            获取按条件查找命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="predicate">条件。</param>
            <param name="parameters">查询参数。</param>
            <param name="sorts">排序规则。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForSelect(XMS.Core.Data.IDialect,System.String,System.String,XMS.Core.Data.ISort[])">
            <summary>
            获取按条件查找命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="predicate">条件。</param>
            <param name="sorts">排序规则。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForFindByPrimaryKey(XMS.Core.Data.IDialect,System.String,System.Tuple{System.String,XMS.Core.Data.IPropertyMap}[]@)">
            <summary>
            获取按主键查找命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="whereParameters">查询参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForPartialUpdateByPrimaryKey(XMS.Core.Data.IDialect,System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Tuple{System.String,System.Reflection.MemberInfo}}@,System.Tuple{System.String,XMS.Core.Data.IPropertyMap}[]@)">
            <summary>
            获取对指定分区表执行部分更新操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partialType">实体类型。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="updateParameters">主语句的参数映射字典。</param>
            <param name="whereParameters">主语句的条件参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForPartialUpdateByPredicate(XMS.Core.Data.IDialect,System.Type,System.String,XMS.Core.Data.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Tuple{System.String,System.Reflection.MemberInfo}}@,System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            获取对指定分区表执行部分更新操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partialType">实体类型。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="parameters">主语句的参数映射字典。</param>
            <param name="predicate">条件。</param>
            <param name="whereParameters">主语句的条件参数映射字典。</param>
        </member>
        <member name="M:XMS.Core.Data.EntityMapper.GetCommandForPartialUpdateByPredicate(XMS.Core.Data.IDialect,System.Type,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Tuple{System.String,System.Reflection.MemberInfo}}@)">
            <summary>
            获取对指定分区表执行部分更新操作的命令。
            </summary>
            <param name="dialect">方言。</param>
            <param name="partialType">实体类型。</param>
            <param name="partitionTableName">分区表名。</param>
            <param name="parameters">主语句的参数映射字典。</param>
            <param name="predicate">条件。</param>
        </member>
        <member name="T:XMS.Core.Data.EntityPropertyMap">
            <summary>
            表示一个实体属性到列的映射。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.PropertyMap">
            <summary>
            表示一个属性到列的映射。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.PropertyName">
            <summary>
            获取一个值，该值表示属性的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.ColumnName">
            <summary>
            获取一个值，该值表示属性映射的列名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.DisplayName">
            <summary>
            获取一个值，该值表示属性映射的显示名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.IsRequired">
            <summary>
            获取一个值，该值指示属性是否为必须的。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.IsKey">
            <summary>
            获取一个值，该值指示属性是否为主键。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.KeyOrder">
            <summary>
            获取一个值，该值指示当键为组合键时属性在组合键中的顺序。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.IsIdentity">
            <summary>
            获取一个值，该值指示属性是否为自增长属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.IsGUID">
            <summary>
            获取一个值，该值指示属性是否为 GUID。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.IsComputed">
            <summary>
            获取一个值，该值指示属性是否为服务器端计算列属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.IsRowVersion">
            <summary>
            获取一个值，该值指示属性是否为行版本属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.DbType">
            <summary>
            获取属性值或字段的数据类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.Length">
            <summary>
            获取属性值或字段的类型的长度。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.MinLength">
            <summary>
            获取字符串类型属性值或字段的最小长度。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.Precision">
            <summary>
            获取属性值或字段的类型的精度。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.Scale">
            <summary>
            获取属性值或字段的类型的小数位数。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.MemberInfo">
            <summary>
            获取映射关联实体的属性或字段，如果不存在，说明此映射为扩展映射。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.PropertyMap.IndexSort">
            <summary>
            获取映射关联实体字段的索引。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.IPropertyMap">
            <summary>
            表示一个实体属性到列的映射。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.PropertyName">
            <summary>
            获取一个值，该值表示属性的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.ColumnName">
            <summary>
            获取一个值，该值表示属性映射的列名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.DisplayName">
            <summary>
            获取一个值，该值表示属性映射的显示名。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.IsRequired">
            <summary>
            获取一个值，该值指示属性是否为必须的。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.IsKey">
            <summary>
            获取一个值，该值指示属性是否为主键。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.KeyOrder">
            <summary>
            获取一个值，该值指示当键为组合键时属性在组合键中的顺序。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.IsIdentity">
            <summary>
            获取一个值，该值指示属性是否为自增长属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.IsGUID">
            <summary>
            获取一个值，该值指示属性是否为 GUID。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.IsComputed">
            <summary>
            获取一个值，该值指示属性是否为服务器端计算列属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.IsRowVersion">
            <summary>
            获取一个值，该值指示属性是否为行版本属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.DbType">
            <summary>
            获取属性值或字段的数据类型。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.Length">
            <summary>
            获取属性值或字段的类型的长度。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.MinLength">
            <summary>
            获取字符串类型属性值或字段的最小长度。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.Precision">
            <summary>
            获取属性值或字段的类型的精度。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.Scale">
            <summary>
            获取属性值或字段的类型的小数位数。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.MemberInfo">
            <summary>
            获取映射关联实体的属性，如果不存在，说明此映射为扩展映射。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IPropertyMap.IndexSort">
            <summary>
            获取映射关联实体字段的索引。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.OperatorType">
            <summary>
            运算符的类型。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.OperatorType.Equal">
            <summary>
            Equal to
            </summary>
        </member>
        <member name="F:XMS.Core.Data.OperatorType.NotEqual">
            <summary>
            Not Equal to
            </summary>
        </member>
        <member name="F:XMS.Core.Data.OperatorType.GreaterThan">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:XMS.Core.Data.OperatorType.GreaterEqual">
            <summary>
            Greater than or equal to
            </summary>
        </member>
        <member name="F:XMS.Core.Data.OperatorType.LessThan">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:XMS.Core.Data.OperatorType.LessEqual">
            <summary>
            Less than or equal to
            </summary>
        </member>
        <member name="F:XMS.Core.Data.OperatorType.Like">
            <summary>
            Like (You can use % in the value to do wilcard searching)
            </summary>
        </member>
        <member name="F:XMS.Core.Data.OperatorType.NotLike">
            <summary>
            Not Like (You can use % in the value to do wilcard searching)
            </summary>
        </member>
        <member name="T:XMS.Core.Data.PredicateFactory">
            <summary>
            谓词工厂。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Equal``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行等于比较的谓词: [ColumnName] = [Value]。
            例如: WHERE FirstName = 'xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotEqual``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行不等于比较的谓词: [ColumnName] &lt;&gt; [Value]。
            例如: WHERE FirstName &lt;&gt; 'xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.IEnumerable)">
            <summary>
            创建一个进行 In 比较的谓词: [ColumnName] in ([Value1],[Value2],[Value3]...)。
            例如: WHERE FirstName in ('xxx1','xxx2','xxx3')
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="values">值数组。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.IEnumerable)">
            <summary>
            创建一个进行 Not In 比较的谓词: [ColumnName] not in ([Value1],[Value2],[Value3]...)。
            例如: WHERE FirstName not in ('xxx1','xxx2','xxx3')
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="values">值数组。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterThan``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行大于比较的谓词: [ColumnName] > [Value]。
            例如: WHERE Age > 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterEqual``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行大于等于比较的谓词: [ColumnName] >= [Value]。
            例如: WHERE Age >= 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessThan``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行小于比较的谓词: [ColumnName] &lt; [Value]。
            例如: WHERE Age &lt; 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessEqual``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行小于等于比较的谓词: [ColumnName] &lt;= [Value]。
            例如: WHERE Age &lt;= 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Like``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行相似比较的谓词: [ColumnName] Like [Value]。
            例如: WHERE Age Like '%xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotLike``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行不相似比较的谓词: [ColumnName] NOT Like [Value]。
            例如: WHERE Age NOT Like '%xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Equal``1(System.String,System.Object)">
            <summary>
            创建一个进行等于比较的谓词: [ColumnName] = [Value]。
            例如: WHERE FirstName = 'xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotEqual``1(System.String,System.Object)">
            <summary>
            创建一个进行不等于比较的谓词: [ColumnName] &lt;&gt; [Value]。
            例如: WHERE FirstName &lt;&gt; 'xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.In``1(System.String,System.Collections.IEnumerable)">
            <summary>
            创建一个进行 In 比较的谓词: [ColumnName] in ([Value1],[Value2],[Value3]...)。
            例如: WHERE FirstName in ('xxx1','xxx2','xxx3')
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="values">值数组。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotIn``1(System.String,System.Collections.IEnumerable)">
            <summary>
            创建一个进行 Not In 比较的谓词: [ColumnName] not in ([Value1],[Value2],[Value3]...)。
            例如: WHERE FirstName not in ('xxx1','xxx2','xxx3')
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="values">值数组。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterThan``1(System.String,System.Object)">
            <summary>
            创建一个进行大于比较的谓词: [ColumnName] > [Value]。
            例如: WHERE Age > 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterEqual``1(System.String,System.Object)">
            <summary>
            创建一个进行大于等于比较的谓词: [ColumnName] >= [Value]。
            例如: WHERE Age >= 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessThan``1(System.String,System.Object)">
            <summary>
            创建一个进行小于比较的谓词: [ColumnName] &lt; [Value]。
            例如: WHERE Age &lt; 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessEqual``1(System.String,System.Object)">
            <summary>
            创建一个进行小于等于比较的谓词: [ColumnName] &lt;= [Value]。
            例如: WHERE Age &lt;= 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Like``1(System.String,System.Object)">
            <summary>
            创建一个进行相似比较的谓词: [ColumnName] Like [Value]。
            例如: WHERE Age Like '%xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotLike``1(System.String,System.Object)">
            <summary>
            创建一个进行不相似比较的谓词: [ColumnName] NOT Like [Value]。
            例如: WHERE Age NOT Like '%xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Equal``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行等于比较的谓词: [ColumnName] = [Value]。
            例如: WHERE FirstName = 'xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotEqual``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行不等于比较的谓词: [ColumnName] &lt;&gt; [Value]。
            例如: WHERE FirstName &lt;&gt; 'xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterThan``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行大于比较的谓词: [ColumnName] > [Value]。
            例如: WHERE Age > 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterEqual``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行大于等于比较的谓词: [ColumnName] >= [Value]。
            例如: WHERE Age >= 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessThan``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行小于比较的谓词: [ColumnName] &lt; [Value]。
            例如: WHERE Age &lt; 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessEqual``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行小于等于比较的谓词: [ColumnName] &lt;= [Value]。
            例如: WHERE Age &lt;= 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Like``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行相似比较的谓词: [ColumnName] Like [Value]。
            例如: WHERE Age Like '%xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotLike``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            创建一个进行不相似比较的谓词: [ColumnName] NOT Like [Value]。
            例如: WHERE Age NOT Like '%xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Equal``1(System.String,System.String,System.Object)">
            <summary>
            创建一个进行等于比较的谓词: [ColumnName] = [Value]。
            例如: WHERE FirstName = 'xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotEqual``1(System.String,System.String,System.Object)">
            <summary>
            创建一个进行不等于比较的谓词: [ColumnName] &lt;&gt; [Value]。
            例如: WHERE FirstName &lt;&gt; 'xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.In``1(System.String,System.String,System.Collections.IEnumerable)">
            <summary>
            创建一个进行 In 比较的谓词: [ColumnName] in ([Value1],[Value2],[Value3]...)。
            例如: WHERE FirstName in ('xxx1','xxx2','xxx3')
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="values">值数组。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotIn``1(System.String,System.String,System.Collections.IEnumerable)">
            <summary>
            创建一个进行 Not In 比较的谓词: [ColumnName] not in ([Value1],[Value2],[Value3]...)。
            例如: WHERE FirstName not in ('xxx1','xxx2','xxx3')
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="values">值数组。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterThan``1(System.String,System.String,System.Object)">
            <summary>
            创建一个进行大于比较的谓词: [ColumnName] > [Value]。
            例如: WHERE Age > 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterEqual``1(System.String,System.String,System.Object)">
            <summary>
            创建一个进行大于等于比较的谓词: [ColumnName] >= [Value]。
            例如: WHERE Age >= 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessThan``1(System.String,System.String,System.Object)">
            <summary>
            创建一个进行小于比较的谓词: [ColumnName] &lt; [Value]。
            例如: WHERE Age &lt; 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessEqual``1(System.String,System.String,System.Object)">
            <summary>
            创建一个进行小于等于比较的谓词: [ColumnName] &lt;= [Value]。
            例如: WHERE Age &lt;= 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Like``1(System.String,System.String,System.Object)">
            <summary>
            创建一个进行相似比较的谓词: [ColumnName] Like [Value]。
            例如: WHERE Age Like '%xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotLike``1(System.String,System.String,System.Object)">
            <summary>
            创建一个进行不相似比较的谓词: [ColumnName] NOT Like [Value]。
            例如: WHERE Age NOT Like '%xxx'
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Equal``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行等于比较的谓词: [ColumnName1] = [ColumnName2]。
            例如: WHERE Age1 = Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression1">属性名称表达式1。</param>
            <param name="expression2">属性名称表达式2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotEqual``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行不等于比较的谓词: [ColumnName1] &lt;&gt; [ColumnName2]。
            例如: WHERE Age1 &lt;&gt; Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression1">属性名称表达式1。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterThan``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行大于比较的谓词: [ColumnName1] > [ColumnName2]。
            例如: WHERE Age1 > Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression1">属性名称表达式1。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterEqual``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行大于等于比较的谓词: [ColumnName1] >= [ColumnName2]。
            例如: WHERE Age1 >= Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression1">属性名称表达式1。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessThan``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行小于比较的谓词: [ColumnName1] &lt; [ColumnName2]。
            例如: WHERE Age1 &lt; Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression1">属性名称表达式1。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessEqual``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行小于等于比较的谓词: [ColumnName1] &lt;= [ColumnName2]。
            例如: WHERE Age1 &lt;= Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression1">属性名称表达式1。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Like``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行相似比较的谓词: [ColumnName1] Like [ColumnName2]。
            例如: WHERE Age1 Like Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression1">属性名称表达式1。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotLike``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行不相似比较的谓词: [ColumnName1] NOT Like [ColumnName2]。
            例如: WHERE Age1 NOT Like Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression1">属性名称表达式1。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Equal``2(System.String,System.String)">
            <summary>
            创建一个进行等于比较的谓词: [ColumnName1] = [ColumnName2]。
            例如: WHERE Age1 = Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName1">属性名1。</param>
            <param name="propertyName2">属性名2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotEqual``2(System.String,System.String)">
            <summary>
            创建一个进行不等于比较的谓词: [ColumnName1] &lt;&gt; [ColumnName2]。
            例如: WHERE Age1 &lt;&gt; Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName1">属性名1。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterThan``2(System.String,System.String)">
            <summary>
            创建一个进行大于比较的谓词: [ColumnName1] > [ColumnName2]。
            例如: WHERE Age1 > Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName1">属性名1。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterEqual``2(System.String,System.String)">
            <summary>
            创建一个进行大于等于比较的谓词: [ColumnName1] >= [ColumnName2]。
            例如: WHERE Age1 >= Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName1">属性名1。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessThan``2(System.String,System.String)">
            <summary>
            创建一个进行小于比较的谓词: [ColumnName1] &lt; [ColumnName2]。
            例如: WHERE Age1 &lt; Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName1">属性名1。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessEqual``2(System.String,System.String)">
            <summary>
            创建一个进行小于等于比较的谓词: [ColumnName1] &lt;= [ColumnName2]。
            例如: WHERE Age1 &lt;= Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName1">属性名1。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Like``2(System.String,System.String)">
            <summary>
            创建一个进行相似比较的谓词: [ColumnName1] Like [ColumnName2]。
            例如: WHERE Age1 Like Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName1">属性名1。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotLike``2(System.String,System.String)">
            <summary>
            创建一个进行不相似比较的谓词: [ColumnName1] NOT Like [ColumnName2]。
            例如: WHERE Age1 NOT Like Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName1">属性名1。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Equal``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行等于比较的谓词: [ColumnName1] = [ColumnName2]。
            例如: WHERE Age1 = Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="expression1">属性名称表达式1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="expression2">属性名称表达式2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotEqual``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行不等于比较的谓词: [ColumnName1] &lt;&gt; [ColumnName2]。
            例如: WHERE Age1 &lt;&gt; Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="expression1">属性名称表达式1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterThan``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行大于比较的谓词: [ColumnName1] > [ColumnName2]。
            例如: WHERE Age1 > Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="expression1">属性名称表达式1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterEqual``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行大于等于比较的谓词: [ColumnName1] >= [ColumnName2]。
            例如: WHERE Age1 >= Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="expression1">属性名称表达式1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessThan``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行小于比较的谓词: [ColumnName1] &lt; [ColumnName2]。
            例如: WHERE Age1 &lt; Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="expression1">属性名称表达式1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessEqual``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行小于等于比较的谓词: [ColumnName1] &lt;= [ColumnName2]。
            例如: WHERE Age1 &lt;= Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="expression1">属性名称表达式1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Like``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行相似比较的谓词: [ColumnName1] Like [ColumnName2]。
            例如: WHERE Age1 Like Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="expression1">属性名称表达式1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotLike``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            创建一个进行不相似比较的谓词: [ColumnName1] NOT Like [ColumnName2]。
            例如: WHERE Age1 NOT Like Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="expression1">属性名称表达式1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="expression2">属性名称表达式2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Equal``2(System.String,System.String,System.String,System.String)">
            <summary>
            创建一个进行等于比较的谓词: [ColumnName1] = [ColumnName2]。
            例如: WHERE Age1 = Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="propertyName1">属性名1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="propertyName2">属性名2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotEqual``2(System.String,System.String,System.String,System.String)">
            <summary>
            创建一个进行不等于比较的谓词: [ColumnName1] &lt;&gt; [ColumnName2]。
            例如: WHERE Age1 &lt;&gt; Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="propertyName1">属性名1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterThan``2(System.String,System.String,System.String,System.String)">
            <summary>
            创建一个进行大于比较的谓词: [ColumnName1] > [ColumnName2]。
            例如: WHERE Age1 > Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="propertyName1">属性名1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.GreaterEqual``2(System.String,System.String,System.String,System.String)">
            <summary>
            创建一个进行大于等于比较的谓词: [ColumnName1] >= [ColumnName2]。
            例如: WHERE Age1 >= Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="propertyName1">属性名1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessThan``2(System.String,System.String,System.String,System.String)">
            <summary>
            创建一个进行小于比较的谓词: [ColumnName1] &lt; [ColumnName2]。
            例如: WHERE Age1 &lt; Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="propertyName1">属性名1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.LessEqual``2(System.String,System.String,System.String,System.String)">
            <summary>
            创建一个进行小于等于比较的谓词: [ColumnName1] &lt;= [ColumnName2]。
            例如: WHERE Age1 &lt;= Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="propertyName1">属性名1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Like``2(System.String,System.String,System.String,System.String)">
            <summary>
            创建一个进行相似比较的谓词: [ColumnName1] Like [ColumnName2]。
            例如: WHERE Age1 Like Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="propertyName1">属性名1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotLike``2(System.String,System.String,System.String,System.String)">
            <summary>
            创建一个进行不相似比较的谓词: [ColumnName1] NOT Like [ColumnName2]。
            例如: WHERE Age1 NOT Like Age2
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias1">表别名1。</param>
            <param name="propertyName1">属性名1。</param>
            <param name="tableAlias2">表别名2。</param>
            <param name="propertyName2">属性名2。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Object)">
            <summary>
            创建一个进行区间比较的谓词: BETWEEN [Value1] AND [VALUE2]。
            例如: WHERE Age BETWEEN 1 and 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Between``1(System.String,System.Object,System.Object)">
            <summary>
            创建一个进行区间比较的谓词: BETWEEN [Value1] AND [VALUE2]。
            例如: WHERE Age BETWEEN 1 and 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Between``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Object)">
            <summary>
            创建一个进行区间比较的谓词: BETWEEN [Value1] AND [VALUE2]。
            例如: WHERE Age BETWEEN 1 and 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Between``1(System.String,System.String,System.Object,System.Object)">
            <summary>
            创建一个进行区间比较的谓词: BETWEEN [Value1] AND [VALUE2]。 
            例如: WHERE Age BETWEEN 1 and 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotBetween``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Object)">
            <summary>
            创建一个进行区间比较的谓词: BETWEEN [Value1] AND [VALUE2]。
            例如: WHERE Age BETWEEN 1 and 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotBetween``1(System.String,System.Object,System.Object)">
            <summary>
            创建一个进行区间比较的谓词: BETWEEN [Value1] AND [VALUE2]。
            例如: WHERE Age BETWEEN 1 and 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotBetween``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Object)">
            <summary>
            创建一个进行区间比较的谓词: BETWEEN [Value1] AND [VALUE2]。
            例如: WHERE Age BETWEEN 1 and 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotBetween``1(System.String,System.String,System.Object,System.Object)">
            <summary>
            创建一个进行区间比较的谓词: BETWEEN [Value1] AND [VALUE2]。
            例如: WHERE Age BETWEEN 1 and 10
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Exists``1(XMS.Core.Data.IPredicate)">
            <summary>
            创建一个进行存在判断的谓词: Exists (select 1 from {TableName} as {TableAlias} where {Predicate})。
            </summary>
            <param name="predicate">子条件。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Exists``1(System.String,XMS.Core.Data.IPredicate)">
            <summary>
            创建一个进行存在判断的谓词: Exists (select 1 from {TableName} as {TableAlias} where {Predicate})。
            </summary>
            <param name="tableAlias">表别名。</param>
            <param name="predicate">子条件。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotExists``1(XMS.Core.Data.IPredicate)">
            <summary>
            创建一个进行不存在判断的谓词: Not Exists (select 1 from {TableName} as {TableAlias} where {Predicate})。
            </summary>
            <param name="predicate">子条件。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.NotExists``1(System.String,XMS.Core.Data.IPredicate)">
            <summary>
            创建一个进行不存在判断的谓词: Not Exists (select 1 from {TableName} as {TableAlias} where {Predicate})。
            </summary>
            <param name="tableAlias">表别名。</param>
            <param name="predicate">子条件。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.And(XMS.Core.Data.IPredicate[])">
            <summary>
            将一组条件合并成一个与组合条件。
            </summary>
            <param name="predicates">要合并的条件的集合。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Or(XMS.Core.Data.IPredicate[])">
            <summary>
            将一组条件合并成一个或组合条件。
            </summary>
            <param name="predicates">要合并的条件的集合。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Asc``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            创建一个升序排列规则: Age ASC。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <returns>ISort 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Asc``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            创建一个升序排列规则: Age ASC。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Asc``1(System.String)">
            <summary>
            创建一个升序排列规则: Age ASC。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <returns>ISort 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Asc``1(System.String,System.String)">
            <summary>
            创建一个升序排列规则: Age ASC。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Desc``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            创建一个降序排列规则: Age Desc。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="expression">属性名称表达式。</param>
            <returns>ISort 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Desc``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            创建一个降序排列规则: Age Desc。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="expression">属性名称表达式。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Desc``1(System.String)">
            <summary>
            创建一个降序排列规则: Age Desc。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="propertyName">属性名。</param>
            <returns>ISort 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Desc``1(System.String,System.String)">
            <summary>
            创建一个降序排列规则: Age Desc。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Sort``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},XMS.Core.Data.SortDirection)">
            <summary>
            生成　Sort 对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Sort``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},XMS.Core.Data.SortDirection)">
            <summary>
            生成　Sort 对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableAlias"></param>
            <param name="expression"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Sort(System.String,System.String)">
            <summary>
            生成　Sort 对象。
            </summary>
            <param name="propertyName"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Sort(System.String,System.String,System.String)">
            <summary>
            生成　Sort 对象。
            </summary>
            <param name="tableAlias"></param>
            <param name="propertyName"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.XMLValueCompare``1(System.String,System.String,System.String,XMS.Core.Data.OperatorType,System.Object)">
            <summary>
            创建一个对 xml 列中存储的节点进行比较的谓词。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="xpath">xml 查询语句。</param>
            <param name="operatorType">比较运算符类型。</param>
            <param name="value">值。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.XMLBetween``1(System.String,System.String,System.String,XMS.Core.Data.OperatorType,System.Object,System.Object)">
            <summary>
            创建一个对 xml 列中存储的节点进行区间内比较的谓词。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="xpath">xml 查询语句。</param>
            <param name="operatorType">比较运算符类型。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.XMLNotBetween``1(System.String,System.String,System.String,XMS.Core.Data.OperatorType,System.Object,System.Object)">
            <summary>
            创建一个对 xml 列中存储的节点进行区间外比较的谓词。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="tableAlias">表别名。</param>
            <param name="propertyName">属性名。</param>
            <param name="xpath">xml 查询语句。</param>
            <param name="operatorType">比较运算符类型。</param>
            <param name="value1">值1。</param>
            <param name="value2">值2。</param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.PredicateFactory.Parse``1(System.String)">
            <summary>
            解析谓词字符串为 IPredicate 对象。
            	首先尝试将字符串按照简单模式进行解析，如： 
            		A^=^aaa|B^=^ccc|C^>^100 等价于 A='aaa' and B='ccc' and C>100；
            		这种模式中，如果值中包含 |，应使用 || 代替，同样的，^ 应使用 ^^ 代替；
            	如果解析失败，将字符串按照严格模式进行解析(这种模式暂时不支持），如：
            		A='aaa' and (B='ccc' or B='ddd') and (D>0 or E&lt;100)
            </summary>
            <param name="predicates"></param>
            <returns>IPredicate 实例。</returns>
        </member>
        <member name="T:XMS.Core.Data.IShardingParams">
            <summary>
            切片参数。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IShardingParams.Get(System.String)">
            <summary>
            获取指定键值的切片参数。
            </summary>
            <param name="key">键值。</param>
            <returns>与指定键值对应的切片参数。</returns>
        </member>
        <member name="T:XMS.Core.Data.ShardingParams">
            <summary>
            切片参数基类。
            </summary>
        </member>
        <member name="F:XMS.Core.Data.ShardingParams.Empty">
            <summary>
            不包含任何切片参数的空切片参数。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.ShardingParams.Create(System.String,System.Object)">
            <summary>
            使用指定的键和值创建一个包含1个切片参数的切片参数对象。
            </summary>
            <param name="key">切片参数的键。</param>
            <param name="value">切片参数的值。</param>
            <returns>包含1个切片参数的切片参数对象。</returns>
        </member>
        <member name="M:XMS.Core.Data.ShardingParams.Create(System.String,System.Object,System.String,System.Object)">
            <summary>
            使用指定的键1、值1和键2、值2创建一个包含2个切片参数的切片参数对象。
            </summary>
            <param name="key1">第一个切片参数的键。</param>
            <param name="value1">第一个切片参数的值。</param>
            <param name="key2">第二个切片参数的键。</param>
            <param name="value2">第二个切片参数的值。</param>
            <returns>包含2个切片参数切片参数对象。</returns>
        </member>
        <member name="M:XMS.Core.Data.ShardingParams.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            使用指定的字典创建切片参数对象。
            </summary>
            <param name="dict">包含切片参数键值对的字典。</param>
            <returns>切片参数对象。</returns>
        </member>
        <member name="M:XMS.Core.Data.ShardingParams.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            使用指定的 lamada 表达式和值创建一个包含1个切片参数的切片参数对象。
            </summary>
            <param name="expression">表示切片参数的键的 lamada 表达式。</param>
            <param name="value">切片参数的值。</param>
            <returns>包含1个切片参数的切片参数对象。</returns>
        </member>
        <member name="M:XMS.Core.Data.ShardingParams.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            使用指定的lamada 表达式1、值1和lamada 表达式2、值2创建一个包含2个切片参数的切片参数对象。
            </summary>
            <param name="expression1">表示第一个切片参数的键的 lamada 表达式。</param>
            <param name="value1">第一个切片参数的值。</param>
            <param name="expression1">表示第二个切片参数的键的 lamada 表达式。</param>
            <param name="value2">第二个切片参数的值。</param>
            <returns>包含2个切片参数切片参数对象。</returns>
        </member>
        <member name="M:XMS.Core.Data.ShardingParams.Get(System.String)">
            <summary>
            使用指定的键值获取与其关联的切片参数的值。
            </summary>
            <param name="key">切片参数的键。</param>
            <returns>切片参数的值。</returns>
        </member>
        <member name="T:XMS.Core.Data.IShardingStrategy">
            <summary>
            切片策略。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.IEntityCachePolicy">
            <summary>
            实体缓存策略。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityCachePolicy.EnableCache">
            <summary>
            获取一个值，该值指示实体是否启用缓存，默认为 true。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityCachePolicy.CachePosition">
            <summary>
            获取一个值，该值指示实体启用缓存时的存放位置，默认为 Local。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityCachePolicy.CacheDependencyDirectory">
            <summary>
            获取缓存依赖目录（可以是网络路径）。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.IEntityCachePolicy.BatchOperationCacheNotifyMechanismType">
            <summary>
            获取一个值，该值指示实体批处理操作缓存通知机制类型，默认为 None。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IEntityCachePolicy.GetCacheRegionInfo(XMS.Core.Data.IEntityContext,XMS.Core.Data.IEntityContainer,XMS.Core.Data.IEntityMapper,XMS.Core.Data.IConnectionString,System.String)">
            <summary>
            根据数据库服务器名、数据库名、分区表名获取适用于这些参数限定的表的缓存分区名。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.IEntityCachePolicy.RemoveEntityCache(XMS.Core.Data.IEntityContext,XMS.Core.Data.IEntityContainer,XMS.Core.Data.IEntityMapper,System.String,XMS.Core.Data.CacheRegionInfo,System.String)">
            <summary>
            清除指定缓存。
            </summary>
            <param name="entityContext"></param>
            <param name="entityContainer"></param>
            <param name="entityMapper"></param>
            <param name="physicalTableName"></param>
            <param name="regionInfo"></param>
            <param name="cacheKey"></param>
        </member>
        <member name="M:XMS.Core.Data.IEntityCachePolicy.ClearCacheRegion(XMS.Core.Data.IEntityContext,XMS.Core.Data.IEntityContainer,XMS.Core.Data.IEntityMapper,System.String,XMS.Core.Data.CacheRegionInfo)">
            <summary>
            清空缓存分区。
            </summary>
            <param name="entityContext"></param>
            <param name="entityContainer"></param>
            <param name="entityMapper"></param>
            <param name="physicalTableName"></param>
            <param name="regionInfo"></param>
        </member>
        <member name="P:XMS.Core.Data.CacheRegionInfo.RegionName">
            <summary>
            获取一个值，该值指示缓存分区的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.CacheRegionInfo.RegionVersionKey">
            <summary>
            获取一个值，该值指示缓存分区版本号的键。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.CacheRegionInfo.RegionVersionValue">
            <summary>
            获取一个值，该值指示缓存分区的版本号。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.CacheRegionInfo.ReadSkipCache">
            <summary>
            读跳过缓存，在集群环境下，实例的读操作在缓存无效或拿不到缓存分区版本号的情况下，应跳过缓存。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.CacheRegionInfo.CanWrite">
            <summary>
            是否可执行写操作，在集群环境下，实例的写操作必须能够以某种机制通知其它实例，这样才可以尽可能的保证一致性，
            因此如果实例无法通知其它实例，则不允许在该实例上执行写操作。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.CacheRegionInfo.ErrorMessage">
            <summary>
            错误消息，此消息用于在读跳过缓存时输出警告或者在不可写时抛出错误。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.DataPartitionRuleBase">
            <summary>
            数据分片规则基类。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.DataPartitionRuleBase.RaiseDataSourcePartition">
            <summary>
            获取一个值，该值指示是否支持按数据源进行分区。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.DataPartitionRuleBase.RaiseDatabasePartition">
            <summary>
            获取一个值，该值指示是否支持按数据库进行分库。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.DataPartitionRuleBase.RaiseTablePartition">
            <summary>
            获取一个值，该值指示是否支持按数据表进行分表。
            </summary>
        </member>
        <member name="M:XMS.Core.Data.DataPartitionRuleBase.GetPartitionDataSourceName(System.String)">
            <summary>
            获取数据库服务器分区名。
            </summary>
            <param name="rawDatasourceName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.DataPartitionRuleBase.GetPartitionDatabaseName(System.String)">
            <summary>
            根据原始库名获取分区库名。
            </summary>
            <param name="rawDatabaseName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.DataPartitionRuleBase.GetPartitionTableName(System.String)">
            <summary>
            根据原始表名获取分区表名。
            </summary>
            <param name="rawTableName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.DataPartitionRuleBase.GetPartitionDataSourceNameCore(System.String)">
            <summary>
            获取数据源名分片的核心实现。
            </summary>
            <param name="rawDatasourceName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.DataPartitionRuleBase.GetPartitionDatabaseNameCore(System.String)">
            <summary>
            获取数据库名分片的核心实现。
            </summary>
            <param name="rawDatabaseName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Data.DataPartitionRuleBase.GetPartitionTableNameCore(System.String)">
            <summary>
            获取数据库名分片的核心实现。
            </summary>
            <param name="rawTableName"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Expressions.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="M:XMS.Core.Expressions.Expression.Evaluate(XMS.Core.Expressions.IExpressionEvalContext)">
            <summary>
            
            </summary>
            <param name="evalContext"></param>
            <returns></returns>
            <remarks>表达式有可能被别的表调用并执行，row 有可能包含来自多个表的数据，
            因此，对于正在执行当前表达式的表为row的主表，其字段在row中为原始字段，
            其它表为相关表，若要访问其它表的字段，则需要使用 "表名.列名"的方式进行；
            </remarks>
        </member>
        <member name="M:XMS.Core.Expressions.ExpressionNode.IsSigned(System.Type)">
            <summary>
            判断是否为有符号类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Expressions.ExpressionNode.IsUnsigned(System.Type)">
            <summary>
            判断是否为无符号类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Expressions.ExpressionNode.IsNumeric(System.Type)">
            <summary>
            判断指定类型是否为整数。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Expressions.ExpressionNode.IsFloat(System.Type)">
            <summary>
            判断指定类型是否为浮点数字。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Expressions.BinaryNode.IsMixed(System.Type,System.Type)">
            <summary>
            判断是否为混合类型，既一个是有符号的，而另一个是无符号的
            </summary>
        </member>
        <member name="M:XMS.Core.Expressions.BinaryNode.ResultType(System.Type,System.Type,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            判断二元操作的结果类型。
            </summary>
        </member>
        <member name="M:XMS.Core.Expressions.Function.#ctor(System.String,XMS.Core.Expressions.FunctionId,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Type,System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="id"></param>
            <param name="result">函数返回值类型</param>
            <param name="isConstant"></param>
            <param name="IsValidateArguments">是否进行参数类型检验</param>
            <param name="IsVariantArgumentList">是否是可变参数</param>
            <param name="argumentCount">参数个数</param>
            <param name="a1">参数类型的指定方式：小数则指定为typeof(double)；整型则指定为typeof(int)；参数可以多类型时则指定参数为typeof(object)</param>
            <param name="a2"></param>
            <param name="a3"></param>
        </member>
        <member name="F:XMS.Core.Expressions.NameNode.name">
            <summary>
            命名节点转义后的实际名称
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.ExpressionParser.prevOperand">
            <summary>
            前置操作数
            </summary>
        </member>
        <member name="M:XMS.Core.Expressions.ExpressionParser.BuildExpression(System.Int32)">
            <summary>
            构造表达式节点
            </summary>
            <param name="pri">优先级</param>
        </member>
        <member name="M:XMS.Core.Expressions.ExpressionParser.NodePeek">
            <summary>
            取栈顶元素，但不出栈
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Expressions.IExpressionEvalContext">
            <summary>
            提供表达式执行时的上下文对象。
            </summary>
            <remarks>
            IExpressionEvalContext 对象通常用来获取用于执行表达式的命名数据容器和变量集合。有关更多信息，请参见 <see cref="T:System.Data.DataExpression"/>。
            </remarks>
        </member>
        <member name="T:XMS.Core.Expressions.INamedDataContainer">
            <summary>
            表示用来计算表达式所使用的命名数据容器，表达式通过此容器接口访问命名节点、查找父级数据或聚合子级数据。
            </summary>
        </member>
        <member name="M:XMS.Core.Expressions.INamedDataContainer.GetNamedData(System.String)">
            <summary>
            获取指定名称的数据。
            </summary>
            <param name="table"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="F:XMS.Core.Expressions.Nodes.Unop">
            <summary>
            一元操作符节点
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Nodes.Binop">
            <summary>
            二元操作符节点
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Nodes.Zop">
            <summary>
            零元操作符节点
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Nodes.Call">
            <summary>
            函数调用节点
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Nodes.Access">
            <summary>
            "."访问节点
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Nodes.Arguments">
            参数节点为了和call节点区分开（实际Arguments节点可以包含在call节点中，但是目前不支持其他的call节点，所以单独区分Arguments节点）
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Noop">
            <summary>
            无操作符
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Negative">
            <summary>
            负号 -
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.UnaryPlus">
            <summary>
            正号 +
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Not">
            <summary>
            非 Not
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.BetweenAnd">
            <summary>
            表示 Between 运算符的 And 部分，参见 Between 运算符。
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.In">
            <summary>
            确定给定的值是否与子查询或列表中的值相匹配。
            </summary>
            <remarks>
            test_expression [ NOT ] IN
            ( 
            	subquery
            	| expression [ ,...n ] 
            )
            </remarks>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Between">
            <summary>
            在……之间  Between
            </summary>
            <remarks>
            指定测试范围。test_expression [ NOT ] BETWEEN begin_expression AND end_expression
            </remarks>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.EqualTo">
            <summary>
            等于 =
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.GreaterThen">
            <summary>
            大于 &gt;
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.LessThen">
            <summary>
            小于 &lt;
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.GreaterOrEqual">
            <summary>
            大于等于 &gt;=
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.LessOrEqual">
            <summary>
            小于等于 &lt;=
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.NotEqual">
            <summary>
            不等于 &lt;&gt;
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Is">
            <summary>
            是 Is
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Like">
            <summary>
            象 Like
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Plus">
            <summary>
            加 +
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Minus">
            <summary>
            减 -
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Multiply">
            <summary>
            乘 *
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Divide">
            <summary>
            除 /
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Modulo">
            <summary>
            求余 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:XMS.Core.Expressions.Operators.BitwiseAnd" -->
        <member name="F:XMS.Core.Expressions.Operators.BitwiseOr">
            <summary>
            按位或 |
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.BitwiseXor">
            <summary>
            按位异或 ^
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.BitwiseNot">
            <summary>
            按位求反 ~
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.And">
            <summary>
            并 And
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Or">
            <summary>
            或 Or
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Proc">
            <summary>
            
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Iff">
            <summary>
            如果否则 Iff
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Qual">
            <summary>
            访问符 . 点
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Dot">
            <summary>
            点 .
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Index">
            <summary>
            索引访问
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Null">
            <summary>
            空 Null
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.True">
            <summary>
            真 True
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.False">
            <summary>
            假 False
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Date">
            <summary>
            日期 Date
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.GenUniqueId">
            <summary>
            生成唯一标识 GenUniqueId
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.GenGUID">
            <summary>
            生成 GUID
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.GUID">
            <summary>
            GUID 字符串
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.IsNot">
            <summary>
            不是 Is Not
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.Exists">
            <summary>
            Exists 一元运算符
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.priContains">
            <summary>
            整除
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.priPlusMinus">
            <summary>
            加减
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.priMod">
            <summary>
            求余
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Operators.priIDiv">
            <summary>
            
            </summary>
        </member>
        <member name="M:XMS.Core.Expressions.Operators.IsLogical(System.Int32)">
            <summary>
            
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Expressions.Operators.Priority(System.Int32)">
            <summary>
            获得指定操作符得优先级
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.Name">
            <summary>
            名称标识符。
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.Numeric">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.Decimal">
            <summary>
            小数
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.Float">
            <summary>
            浮点数字
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.LeftParen">
            <summary>
            左括号
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.RightParen">
            <summary>
            右括号
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.ZeroOp">
            <summary>
            零元操作符
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.UnaryOp">
            <summary>
            一元操作符
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.BinaryOp">
            <summary>
            二元操作符
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.Child">
            <summary>
            表示对子表的引用
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.Parent">
            <summary>
            表示对父表的引用
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.Dot">
            <summary>
            表示
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.RelationPath">
            <summary>
            关系路径
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.ContextProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.ObjectAccess">
            <summary>
            对象访问
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.LeftBracket">
            <summary>
            左中括号
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.RightBracket">
            <summary>
            右中括号
            </summary>
        </member>
        <member name="F:XMS.Core.Expressions.Tokens.EOS">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:XMS.Core.IExtensibleChildrenObject">
            <summary>
            可扩展的子对象接口。
            </summary>
        </member>
        <member name="P:XMS.Core.IExtensibleChildrenObject.Children">
            <summary>
             获取或者设置扩展对象的扩展属性集合。
            </summary>
        </member>
        <member name="T:XMS.Core.IExtensibleObject">
            <summary>
            可扩展对象接口
            </summary>
        </member>
        <member name="P:XMS.Core.IExtensibleObject.ExtendProperties">
            <summary>
             获取或者设置扩展对象的扩展属性集合。
            </summary>
        </member>
        <member name="T:XMS.Core.BaseExtensibleObject">
            <summary>
            可扩展对象基类的基本实现，该实现中通过反射获取基本属性，在扩展字典中获取扩展属性。
            </summary>
        </member>
        <member name="M:XMS.Core.BaseExtensibleObject.#ctor">
            <summary>
            初始化 BaseExtensibleObject 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.BaseExtensibleObject.GetPropertyValue(System.String)">
            <summary>
            获取基本属性值，默认实现是使用反射实现的。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.BaseExtensibleObject.ExtendProperties">
            <summary>
            扩展属性集合。
            </summary>
        </member>
        <member name="T:XMS.Core.IPropertyIndexingObject">
            <summary>
            属性可索引化访问对象接口
            </summary>
        </member>
        <member name="P:XMS.Core.IPropertyIndexingObject.Item(System.String)">
            <summary>
            获取指定属性名称的属性的值。
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.BasePropertyIndexingObject">
            <summary>
            属性可索引化访问对象基类的基本实现，该实现中通过反射获取属性。
            </summary>
        </member>
        <member name="M:XMS.Core.BasePropertyIndexingObject.#ctor">
            <summary>
            初始化 BasePropertyIndexingObject 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.BasePropertyIndexingObject.Item(System.String)">
            <summary>
            获取指定属性名称的属性的值。
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.BasePropertyIndexingObject.GetPropertyValue(System.String)">
            <summary>
            获取基本属性值，默认实现是使用反射实现的。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.GIS.LatLon">
            <summary>
            位置类
            </summary>
        </member>
        <member name="F:XMS.Core.GIS.LatLon.EARTH_RADIUS">
            <summary>
            赤道半径 earth radius
            </summary>
        </member>
        <member name="F:XMS.Core.GIS.LatLon.POLAR_RADIUS">
            <summary>
            极半径 polar radius
            </summary>
        </member>
        <member name="M:XMS.Core.GIS.LatLon.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XMS.Core.GIS.LatLon.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="lat">纬度</param>
            <param name="lon">经度</param>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.Lat">
            <summary>
            纬度
            </summary>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.Lon">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.RadLat">
            <summary>
            纬度的弧度
            </summary>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.RadLon">
            <summary>
            经度的弧度
            </summary>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.Ec">
            <summary>
            ?
            </summary>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.Ed">
            <summary>
            ?
            </summary>
        </member>
        <member name="T:XMS.Core.GIS.GeoHelper">
            <summary>
            Geo辅助类
            </summary>
        </member>
        <member name="M:XMS.Core.GIS.GeoHelper.GetDistance(XMS.Core.GIS.LatLon,XMS.Core.GIS.LatLon)">
            <summary>
            根据两点的经纬度计算两点距离
            可参考:通过经纬度计算距离的公式 http://www.storyday.com/html/y2009/2212_according-to-latitude-and-longitude-distance-calculation-formula.html
            </summary>
            <param name="src">A点维度</param>        
            <param name="dest">B点经度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.GIS.GeoHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            根据两点的经纬度计算两点距离
            可参考:通过经纬度计算距离的公式 http://www.storyday.com/html/y2009/2212_according-to-latitude-and-longitude-distance-calculation-formula.html
            </summary>
            <param name="lat1">A点维度</param>
            <param name="lon1">A点经度</param>
            <param name="lat2">B点维度</param>
            <param name="lon2">B点经度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.GIS.GeoHelper.GetLatLon(XMS.Core.GIS.LatLon,System.Double,System.Double)">
            <summary>
            已知点A经纬度，根据B点据A点的距离，和方位，求B点的经纬度
            </summary>
            <param name="a">已知点A</param>
            <param name="distance">B点到A点的距离 </param>
            <param name="angle">B点相对于A点的方位，12点钟方向为零度，角度顺时针增加</param>
            <returns>B点的经纬度坐标</returns>
        </member>
        <member name="M:XMS.Core.GIS.GeoHelper.GetLatLon(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            已知点A经纬度，根据B点据A点的距离，和方位，求B点的经纬度
            </summary>
            <param name="longitude">已知点A经度</param>
            <param name="latitude">已知点A纬度</param>
            <param name="distance">B点到A点的距离</param>
            <param name="angle">B点相对于A点的方位，12点钟方向为零度，角度顺时针增加</param>
            <returns>B点的经纬度坐标</returns>
        </member>
        <member name="M:XMS.Core.GIS.GeoHelper.GetFormatedLatLon(XMS.Core.GIS.LatLon)">
            <summary>
             format latitude,longtitude to 4 fractional ditigal double;
            </summary>
            <param name="objLatLon"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.GIS.GeoHashHelper">
            <summary>
            GeoHash辅助类，方便周边查询
            </summary>
        </member>
        <member name="T:XMS.Core.IgnoredConfigurationException">
            <summary>
            表示一个系统调用期间可忽略的配置异常，该异常通知缓存系统发生了重复的配置错误，同一配置错误在之前的调用中已经发生过，并且在其第一次发生时缓存系统为其记录了错误日志。
            设计本类的目的，是为了解决当缓存配置发生错误时，产生大量相同错误日志的问题（例如：缓存系统的访问频率较高，每次访问都会要求初始化 CacheSettings 的实例，在配置文件不正确的情况下，每次访问都会产生一次日志）
            </summary>
        </member>
        <member name="T:XMS.Core.IOutline">
            <summary>
            纲要接口，为复杂原始对象提供纲要功能，该纲要可简练的表达原始对象的关键信息。
            </summary>
        </member>
        <member name="M:XMS.Core.IOutline.ToOutline">
            <summary>
            返回一个新的对象，该对象表示当前对象的纲要信息，这些信息已足够描述原始对象的关键信息，在需要的时候，可以将该纲要对象进行存储，这比存储原始对象可大幅节省存储空间。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.DateTimeSerializer.Prepare(System.DateTime,System.Boolean)">
            <summary>
            If AlwaysUseUtc is set to true then convert all DateTime to UTC.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.DateTimeSerializer.RepairXsdTimeSeparator(System.String)">
            <summary>
            Repairs an out-of-spec XML date/time string which incorrectly uses a space instead of a 'T' to separate the date from the time.
            These string are occasionally generated by SQLite and can cause errors in OrmLite when reading these columns from the DB.
            </summary>
            <param name="dateTimeStr">The XML date/time string to repair</param>
            <returns>The repaired string. If no repairs were made, the original string is returned.</returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.DateTimeSerializer.ParseWcfJsonDateOffset(System.String)">
            <summary>
            WCF Json format: /Date(unixts+0000)/
            </summary>
            <param name="wcfJsonDate"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.DateTimeSerializer.ParseWcfJsonDate(System.String)">
            <summary>
            WCF Json format: /Date(unixts+0000)/
            </summary>
            <param name="wcfJsonDate"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.DeserializeTypeUtils.GetTypeStringConstructor(System.Type)">
            <summary>
            Get the type(string) constructor if exists
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.JsWriter.HasAnyEscapeChars(System.String)">
            <summary>
            micro optimizations: using flags instead of value.IndexOfAny(EscapeChars)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.JsonTypeSerializer.WriteRawString(System.IO.TextWriter,System.String)">
            <summary>
            Shortcut escape when we're sure value doesn't contain any escaped chars
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:XMS.Core.JsonFast.JsonTypeSerializer.ConvertFromUtf32(System.Int32)">
            <summary>
            Given a character as utf32, returns the equivalent string provided that the character
            is legal json.
            </summary>
            <param name="utf32"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.JsonUtils.HasAnyEscapeChars(System.String)">
            <summary>
            micro optimizations: using flags instead of value.IndexOfAny(EscapeChars)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.JsonFast.JsonWriter`1">
            <summary>
            Implement the serializer using a more static approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XMS.Core.JsonFast.Support.DoubleConverter.ToExactString(System.Double)" -->
        <!-- Badly formed XML comment ignored for member "T:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal" -->
        <!-- Badly formed XML comment ignored for member "F:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.digits" -->
        <member name="F:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:XMS.Core.JsonFast.Utils.AssemblyUtils">
            <summary>
            Utils to load types
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.AssemblyUtils.FindType(System.String)">
            <summary>
            Find the type from the name supplied
            </summary>
            <param name="typeName">[typeName] or [typeName, assemblyName]</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.AssemblyUtils.MainInterface``1">
            <summary>
            The top-most interface of the given type, if any.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.AssemblyUtils.FindType(System.String,System.String)">
            <summary>
            Find type if it exists
            </summary>
            <param name="typeName"></param>
            <param name="assemblyName"></param>
            <returns>The type if it exists</returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.AutoMappingUtils.PopulateObjectInternal(System.Object,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Populates the object with example data.
            </summary>
            <param name="obj"></param>
            <param name="recursionInfo">Tracks how deeply nested we are</param>
            <returns></returns>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sTimeSpanHandler">
            <summary>
            Sets which format to use when serializing TimeSpans
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sEmitCamelCaseNames">
            <summary>
            <see langword="true"/> if the <see cref="T:XMS.Core.JsonFast.Common.ITypeSerializer"/> is configured
            to take advantage of <see cref="T:System.CLSCompliantAttribute"/> specification,
            to support user-friendly serialized formats, ie emitting camelCasing for JSON
            and parsing member names and enum values in a case-insensitive manner.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sEmitLowercaseUnderscoreNames">
            <summary>
            <see langword="true"/> if the <see cref="T:XMS.Core.JsonFast.Common.ITypeSerializer"/> is configured
            to support web-friendly serialized formats, ie emitting lowercase_underscore_casing for JSON
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sPropertyConvention">
            <summary>
            Define how property names are mapped during deserialization
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sThrowOnDeserializationError">
            <summary>
            Gets or sets a value indicating if the framework should throw serialization exceptions
            or continue regardless of deserialization errors. If <see langword="true"/>  the framework
            will throw; otherwise, it will parse as many fields as possible. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sAlwaysUseUtc">
            <summary>
            Gets or sets a value indicating if the framework should always convert <see cref="T:System.DateTime"/> to UTC format instead of local time. 
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sAssumeUtc">
            <summary>
            Gets or sets a value indicating if the framework should always assume <see cref="T:System.DateTime"/> is in UTC format if Kind is Unspecified. 
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sAppendUtcOffset">
            <summary>
            Gets or sets whether we should append the Utc offset when we serialize Utc dates. Defaults to no.
            Only supported for when the JsConfig.DateHandler == JsonDateHandler.TimestampOffset
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sEscapeUnicode">
            <summary>
            Gets or sets a value indicating if unicode symbols should be serialized as "\uXXXX".
            </summary>
        </member>
        <member name="P:XMS.Core.JsonFast.Utils.JsConfig.PreferInterfaces">
            <summary>
            If set to true, Interface types will be prefered over concrete types when serializing.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sIncludePublicFields">
            <summary>
            If set to true, Interface types will be prefered over concrete types when serializing.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sReuseStringBuffer">
            <summary>
            For extra serialization performance you can re-use a ThreadStatic StringBuilder
            when serializing to a JSON String.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sMaxDepth">
            <summary>
            Sets the maximum depth to avoid circular dependencies
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sModelFactory">
            <summary>
            Set this to enable your own type construction provider.
            This is helpful for integration with IoC containers where you need to call the container constructor.
            Return null if you don't know how to construct the type and the parameterless constructor will be used.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.IncludeTypeInfo">
            <summary>
            Always emit type info for this type.  Takes precedence over ExcludeTypeInfo
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.ExcludeTypeInfo">
            <summary>
            Never emit type info for this type
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.EmitCamelCaseNames">
            <summary>
            <see langword="true"/> if the <see cref="T:XMS.Core.JsonFast.Common.ITypeSerializer"/> is configured
            to take advantage of <see cref="T:System.CLSCompliantAttribute"/> specification,
            to support user-friendly serialized formats, ie emitting camelCasing for JSON
            and parsing member names and enum values in a case-insensitive manner.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.serializeFn">
            <summary>
            Define custom serialization fn for BCL Structs
            </summary>
        </member>
        <member name="P:XMS.Core.JsonFast.Utils.JsConfig`1.TreatValueAsRefType">
            <summary>
            Opt-in flag to set some Value Types to be treated as a Ref Type
            </summary>
        </member>
        <member name="P:XMS.Core.JsonFast.Utils.JsConfig`1.HasSerializeFn">
            <summary>
            Whether there is a fn (raw or otherwise)
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.rawSerializeFn">
            <summary>
            Define custom raw serialization fn
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.onSerializingFn">
            <summary>
            Define custom serialization hook
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.onSerializedFn">
            <summary>
            Define custom after serialization hook
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.DeSerializeFn">
            <summary>
            Define custom deserialization fn for BCL Structs
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.RawDeserializeFn">
            <summary>
            Define custom raw deserialization fn for objects
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.ExcludePropertyNames">
            <summary>
            Exclude specific properties of this type from being serialized
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.PropertyConvention.Strict">
            <summary>
            The property names on target types must match property names in the JSON source
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.PropertyConvention.Lenient">
            <summary>
            The property names on target types may not match the property names in the JSON source
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.TimeSpanHandler.DurationFormat">
            <summary>
            Uses the xsd format like PT15H10M20S
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.TimeSpanHandler.StandardFormat">
            <summary>
            Uses the standard .net ToString method of the TimeSpan class
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.JsonExtensions.Get``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get JSON string value converted to T
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.JsonExtensions.Get(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get JSON string value
            </summary>
        </member>
        <member name="P:XMS.Core.JsonFast.Utils.JsonObject.Item(System.String)">
            <summary>
            Get JSON string value
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.JsonObject.GetUnescaped(System.String)">
            <summary>
            Get unescaped string value
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.JsonObject.Child(System.String)">
            <summary>
            Get unescaped string value
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.JsonObject.WriteValue(System.IO.TextWriter,System.Object)">
            <summary>
            Write JSON Array, Object, bool or number values as raw string
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ReflectionExtensions.New``1(System.Type)">
            <summary>
            Creates a new instance of type. 
            First looks at JsConfig.ModelFactory before falling back to CreateInstance
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ReflectionExtensions.New(System.Type)">
            <summary>
            Creates a new instance of type. 
            First looks at JsConfig.ModelFactory before falling back to CreateInstance
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ReflectionExtensions.CreateInstance(System.Type)">
            <summary>
            Creates a new instance from the default constructor of type
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.PlatformExtensions.AddAttributes(System.Reflection.PropertyInfo,System.Attribute[])">
            <summary>
            Add a Property attribute at runtime. 
            <para>Not threadsafe, should only add attributes on Startup.</para>
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.PlatformExtensions.ReplaceAttribute(System.Reflection.PropertyInfo,System.Attribute)">
            <summary>
            Add a Property attribute at runtime. 
            <para>Not threadsafe, should only add attributes on Startup.</para>
            </summary>
        </member>
        <member name="T:XMS.Core.JsonFast.Utils.TypeSerializer">
            <summary>
            Creates an instance of a Type from a string value
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.TypeSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.TypeSerializer.DeserializeFromString(System.String,System.Type)">
            <summary>
            Parses the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.TypeSerializer.ToStringDictionary``1(``0)">
            <summary>
            Useful extension method to get the Dictionary[string,string] representation of any POCO type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.JsonFast.JsonSerializer">
            <summary>
            Creates an instance of a Type from a string value
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.ELK.ELKBufferAppender">
            <summary>
            ELKBufferAppender 输出器
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.ELK.RabbitMQClusterElement">
            <summary>
            表示一个消息集群。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.ELK.RabbitMQClusterElement.#ctor">
            <summary>
            初始化 RabbitMQClusterElement 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ELK.RabbitMQClusterElement.Address">
            <summary>
            消息关联的消息服务器集群的访问地址。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ELK.RabbitMQClusterElement.Port">
            <summary>
            消息关联的消息服务器集群的访问端口。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ELK.RabbitMQClusterElement.VirtualHost">
            <summary>
            消息关联的消息服务器集群的访问用户名。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ELK.RabbitMQClusterElement.UserName">
            <summary>
            消息关联的消息服务器集群的访问用户名。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ELK.RabbitMQClusterElement.Password">
            <summary>
            消息关联的消息服务器集群的访问用户名。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ELK.RabbitMQClusterElement.PublishConnectionCount">
            <summary>
            消息关联的消息服务器集群的发布连接数，默认值为 2。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ELK.RabbitMQClusterElement.MinChannelCountPerPublishConnection">
            <summary>
            消息关联的消息服务器集群的每连接最小发布信道数，默认值为 8。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ELK.RabbitMQClusterElement.MaxChannelCountPerPublishConnection">
            <summary>
            消息关联的消息服务器集群的每连接最大发布信道数，默认值为 16。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.ELK.ELKSettingsSection">
            <summary>
            表示 ELK 配置节。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.ELK.ELKSettingsSection.#ctor">
            <summary>
            初始化 ELKSettingsSection 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.ELK.ELKAppender">
            <summary>
            RabbitMQ 输出器
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ELK.ELKAppender.Enable">
            <summary>
            获取一个值，该值指示是否启用当前输出器。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ELK.ELKAppender.RequiresLayout">
            <summary>
            不需要布局
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.BaseLogger">
            <summary>
            日志服务的基础实现。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.InnerLogger">
            <summary>
            获取内部日志记录器。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.#ctor">
            <summary>
            初始化 DefaultLogService 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.IsDebugEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Debug 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.IsInfoEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Info 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.IsWarnEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Warn 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.IsErrorEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Error 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.IsFatalEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Fatal 级别。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.Exception)">
            <summary>
            Info
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.Exception)">
            <summary>
            Error
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.String,System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.String,System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.Exception,System.String)">
            <summary>
            Info
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.String,System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.Exception,System.String)">
            <summary>
            Warn
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.String,System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.Exception,System.String)">
            <summary>
            Error
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.Exception,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="T:XMS.Core.Logging.ILogger">
            <summary>
            日志接口。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogger.IsDebugEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Debug 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogger.IsInfoEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Info 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogger.IsWarnEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Warn 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogger.IsErrorEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Error 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogger.IsFatalEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Fatal 级别。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.Exception)">
            <summary>
            Info
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.Exception)">
            <summary>
            Error
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.String,System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.String,System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.String,System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.Exception,System.String)">
            <summary>
            Warn
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.String,System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.Exception,System.String)">
            <summary>
            Error
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.Exception,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="T:XMS.Core.Logging.ILogService">
            <summary>
            日志服务接口。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.IsDebugEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Debug 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.IsInfoEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Info 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.IsWarnEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Warn 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.IsErrorEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Error 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.IsFatalEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Fatal 级别。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.Exception)">
            <summary>
            Info
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.Exception)">
            <summary>
            Error
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.String,System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.String,System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.String,System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.Exception,System.String)">
            <summary>
            Warn
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.String,System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.Exception,System.String)">
            <summary>
            Error
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.Exception,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.GetLogger(System.String)">
            <summary>
            根据日志名称获取日志记录器，默认情况下，该日志记录器将日志记录到：logs\{loggerName}\{loggerName}.{n}.log 中。
            </summary>
            <param name="loggerName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.GetLogger(System.String,System.String)">
            <summary>
            根据目录名称和日志名称获取日志记录器，默认情况下，该日志记录器将日志记录到：logs\{directoryName}\{loggerName}.{n}.log 中。
            </summary>
            <param name="directoryName">目录名称</param>
            <param name="loggerName">日志名称</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.GetLogger(System.Type)">
            <summary>
            根据对象类型获取日志记录器，默认情况下，该日志记录器将日志记录到：logs\{typeName}\{typeName}.{n}.log 中。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.UnexpectedBehavorLogger">
            <summary>
            特殊的logger，记录根据逻辑打死都不该发生的事情
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.IntervalLogger">
            <summary>
            间隔性日志记录器，在指定的时间段内，如果出现连续 n 次相同的日志，则仅记录一次日志，其它的忽略，该类适用于以下场景：
            	1.间隔时间很短的循环性任务中记录日志；
            	2.高并发访问的函数中；
            使用此类，可有效减少相同类型日志的数量，方便监控和调试。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.FixContextFlags">
            <summary>
            固化上下文标记。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.FixContextFlags.RunContext">
            <summary>
            运行上下文，包括 Runmode、AppName、AppVersion、Machine 属性。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.FixContextFlags.UserContext">
            <summary>
            固化用户上下文，包括 UserName、UserId、UserToken、UserIP、RawUrl 等属性。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.FixContextFlags.AppAgent">
            <summary>
            固化客户端访问代理的信息
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.FixContextFlags.All">
            <summary>
            支持所有
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.CustomBufferAppender">
            <summary>
            自定义缓冲日志输出器
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomBufferAppender.Enable">
            <summary>
            获取一个值，该值指示是否启用当前输出器。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomBufferAppender.FlushInterval">
            <summary>
            缓冲刷新间隔。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomBufferAppender.MergeThreshold">
            <summary>
            日志合并，当大于配置值，则合并日志，默认值1000
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomBufferAppender.FixContext">
            <summary>
            固化上下文属性。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomBufferAppender.ActivateOptions">
            <summary>
            重载 ActivateOptions, 在基础实现的基础上启动缓冲刷新线程。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomBufferAppender.OnClose">
            <summary>
            重载 OnClose, 在基础实现的基础上停止缓冲刷新线程。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomBufferAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            重载 SendBuffer, 将要发送的缓冲添加到临时链表中以供刷新线程发送。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomBufferAppender.Flush(System.Boolean)">
            <summary>
            重载 Flush, 在基础实现的基础上增加从缓冲的 list 中发送日志事件的处理逻辑。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.CustomFileAppender">
            <summary>
            自定义日志文件输出器。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomFileAppender.Enable">
            <summary>
            获取一个值，该值指示是否启用当前输出器。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomFileAppender.DirectoryByDate">
            <summary>
            获取一个值，该值指示是否按日期对日志进行分目录。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomFileAppender.KeepDays">
            <summary>
            获取一个值，该值指示日志保留天数，该选项仅在 DirectoryByDate 为 true 时有效。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.CustomFileAppender.lastOpenFileOfDate">
            <summary>
            Holds date of last roll over
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.CustomFileAppender.m_maxFileSize">
            <summary>
            The default maximum file size is 10MB
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomFileAppender.MaxFileSize">
            <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
            <value>
            The maximum size in bytes that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
            <remarks>
            <para>
            This property is equivalent to <see cref="P:XMS.Core.Logging.Log4net.CustomFileAppender.MaximumFileSize"/> except
            that it is required for differentiating the setter taking a
            <see cref="T:System.Int64"/> argument from the setter taking a <see cref="T:System.String"/> 
            argument.
            </para>
            <para>
            The default maximum file size is 10MB (10*1024*1024).
            </para>
            </remarks>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomFileAppender.MaximumFileSize">
            <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
            <value>
            The maximum size that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
            <remarks>
            <para>
            This property allows you to specify the maximum size with the
            suffixes "KB", "MB" or "GB" so that the size is interpreted being 
            expressed respectively in kilobytes, megabytes or gigabytes. 
            </para>
            <para>
            For example, the value "10KB" will be interpreted as 10240 bytes.
            </para>
            <para>
            The default maximum file size is 10MB.
            </para>
            <para>
            If you have the option to set the maximum file size programmatically
            consider using the <see cref="P:XMS.Core.Logging.Log4net.CustomFileAppender.MaxFileSize"/> property instead as this
            allows you to set the size in bytes as a <see cref="T:System.Int64"/>.
            </para>
            </remarks>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomFileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <remarks>
            This method can be overridden by sub classes.
            </remarks>
            <param name="writer">the writer to set</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomFileAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Write out a logging event.
            </summary>
            <param name="loggingEvent">the event to write to file.</param>
            <remarks>
            <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomFileAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Write out an array of logging events.
            </summary>
            <param name="loggingEvents">the events to write to file.</param>
            <remarks>
            <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomFileAppender.ActivateOptions">
            <summary>
            ActivateOptions
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomFileAppender.DetermineCurSizeRollBackups">
            <summary>
            Determines curSizeRollBackups (only within the current roll point)
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.CustomLayout">
            <summary>
            自定义日志布局器
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLayout.#ctor">
            <summary>
            初始化 CustomLayout 类的新实例
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.CustomLogManager.wrapperMap">
            <summary>
            The wrapper map to use to hold the <see cref="T:XMS.Core.Logging.Log4net.DefaultCustomLog"/> objects
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.#ctor">
            <summary>
            Private constructor to prevent object creation
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.Exists(System.String)">
            <summary>
            Returns the named logger if it exists
            </summary>
            <remarks>
            <para>If the named logger exists (in the default hierarchy) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.</para>
            </remarks>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.Exists(System.String,System.String)">
            <summary>
            Returns the named logger if it exists
            </summary>
            <remarks>
            <para>If the named logger exists (in the specified domain) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.</para>
            </remarks>
            <param name="domain">the domain to lookup in</param>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.Exists(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the named logger if it exists
            </summary>
            <remarks>
            <para>If the named logger exists (in the specified assembly's domain) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.</para>
            </remarks>
            <param name="assembly">the assembly to use to lookup the domain</param>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetCurrentLoggers">
            <summary>
            Returns all the currently defined loggers in the default domain.
            </summary>
            <remarks>
            <para>The root logger is <b>not</b> included in the returned array.</para>
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetCurrentLoggers(System.String)">
            <summary>
            Returns all the currently defined loggers in the specified domain.
            </summary>
            <param name="domain">the domain to lookup in</param>
            <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetCurrentLoggers(System.Reflection.Assembly)">
            <summary>
            Returns all the currently defined loggers in the specified assembly's domain.
            </summary>
            <param name="assembly">the assembly to use to lookup the domain</param>
            <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.String)">
             <summary>
             Retrieve or create a named logger.
             </summary>
             <remarks>
             <para>Retrieve a logger named as the <paramref name="name"/>
             parameter. If the named logger already exists, then the
             existing instance will be returned. Otherwise, a new instance is
             created.</para>
            
             <para>By default, loggers do not have a set level but inherit
             it from the hierarchy. This is one of the central features of
             log4net.</para>
             </remarks>
             <param name="name">The name of the logger to retrieve.</param>
             <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.String,System.String)">
             <summary>
             Retrieve or create a named logger.
             </summary>
             <remarks>
             <para>Retrieve a logger named as the <paramref name="name"/>
             parameter. If the named logger already exists, then the
             existing instance will be returned. Otherwise, a new instance is
             created.</para>
            
             <para>By default, loggers do not have a set level but inherit
             it from the hierarchy. This is one of the central features of
             log4net.</para>
             </remarks>
             <param name="repository">the repository to lookup in</param>
             <param name="name">The name of the logger to retrieve.</param>
             <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.Reflection.Assembly,System.String)">
             <summary>
             Retrieve or create a named logger.
             </summary>
             <remarks>
             <para>Retrieve a logger named as the <paramref name="name"/>
             parameter. If the named logger already exists, then the
             existing instance will be returned. Otherwise, a new instance is
             created.</para>
            
             <para>By default, loggers do not have a set level but inherit
             it from the hierarchy. This is one of the central features of
             log4net.</para>
             </remarks>
             <param name="repositoryAssembly">the assembly to use to lookup the domain</param>
             <param name="name">The name of the logger to retrieve.</param>
             <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="type">The full name of <paramref name="type"/> will
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.String,System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="repository">the repository to lookup in</param>
            <param name="type">The full name of <paramref name="type"/> will
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.Reflection.Assembly,System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="repositoryAssembly">the assembly to use to lookup the domain</param>
            <param name="type">The full name of <paramref name="type"/> will
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.WrapLogger(log4net.Core.ILogger)">
            <summary>
            Lookup the wrapper object for the logger specified
            </summary>
            <param name="logger">the logger to get the wrapper for</param>
            <returns>the wrapper for the logger specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.WrapLoggers(log4net.Core.ILogger[])">
            <summary>
            Lookup the wrapper objects for the loggers specified
            </summary>
            <param name="loggers">the loggers to get the wrappers for</param>
            <returns>Lookup the wrapper objects for the loggers specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.WrapperCreationHandler(log4net.Core.ILogger)">
            <summary>
            Method to create the <see cref="T:log4net.Core.ILoggerWrapper"/> objects used by
            this manager.
            </summary>
            <param name="logger">The logger to wrap</param>
            <returns>The wrapper for the logger specified</returns>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.DefaultCustomLog">
            <summary>
            自定义日志的默认实现。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.DefaultCustomLog.ThisDeclaringType">
            <summary>
            声明的类型
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.#ctor(log4net.Core.ILogger)">
            <summary>
            初始化 DefaultCustomLogger 类的新实例
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Debug(System.String,System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Debug(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Info(System.String,System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Info(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Warn(System.String,System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Warn(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Error(System.String,System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Error(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Fatal(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.IAppenderEnable.Enable">
            <summary>
            获取一个值，该值指示是否启用当前输出器。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.ICustomLog">
            <summary>
            自动以日志接口
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Debug(System.String,System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Debug(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Info(System.String,System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Info(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Warn(System.String,System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Warn(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Error(System.String,System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Error(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Fatal(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.LogCenterAppender">
            <summary>
            日志中心输出器
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.LogCenterAppender.Enable">
            <summary>
            获取一个值，该值指示是否启用当前输出器。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.LogCenterAppender.RequiresLayout">
            <summary>
            不需要布局
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.LogCategory">
            <summary>
            定义常量
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Start">
            <summary>
            日志类别-服务处理
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Default">
            <summary>
            日志类别-服务处理
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.ServiceHandle">
            <summary>
            日志类别-服务处理
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.ServiceRequest">
            <summary>
            日志类别-服务请求
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.ServiceHost">
            <summary>
            日志类别-服务宿主
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Task">
            <summary>
            日志类别-任务
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Configuration">
            <summary>
            日志类别-配置
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Cache">
            <summary>
            日志类别-缓存
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Messaging">
            <summary>
            日志类别-消息
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.DefaultLogService">
            <summary>
            日志服务的默认实现。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.DefaultLogService.#ctor">
            <summary>
            初始化 DefaultLogService 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.InternalLogService">
            <summary>
            XMS.Core 内部使用的日志
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Commands.CommandAttribute">
            <summary>
            定义消息特性，该特性指定一个类型为某种类型的消息并为这种类型的消息指定元属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Commands.CommandAttribute.Name">
            <summary>
            命令的名称。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Commands.CommandAttribute.#ctor(System.String)">
            <summary>
            初始化 MessageAttribute 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Commands.ICommandContext">
            <summary>
            表示一个消息上下文，该上下文对象的实例与一个消息关联。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Commands.ICommandContext.CommandName">
            <summary>
            获取命令名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Commands.ICommandContext.MessageContext">
            <summary>
            获取命令相关的消息上下文。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Commands.ICommandExecutor`1">
            <summary>
            为命令执行程序定义统一的接口。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XMS.Core.Messaging.Commands.ICommandExecutor`1.Execute(XMS.Core.Messaging.Commands.ICommandContext,`0)">
            <summary>
            处理指定类型的指令。
            	可根据需要在事物的 Commit 方法前调用 context.Message.Complete 方法，保证消息处理和事物的两段式一致性。
            </summary>
            <param name="context">消息上下文。</param>
            <param name="command">要处理的消息。</param>
        </member>
        <member name="T:XMS.Core.Messaging.Commands.CommandContext">
            <summary>
            命令上下文。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Commands.CommandContext.CommandName">
            <summary>
            获取命令名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Commands.CommandContext.MessageContext">
            <summary>
            获取命令相关的消息上下文。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Commands.CommandContext.#ctor(System.String,XMS.Core.Messaging.IMessageContext)">
            <summary>
            初始化 CommandContext 类的新实例。
            </summary>
            <param name="commandName">命令名称。</param>
            <param name="messageContext">消息上下文。</param>
        </member>
        <member name="T:XMS.Core.Messaging.Configuration.ClusterElement">
            <summary>
            表示一个消息集群。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElement.#ctor">
            <summary>
            初始化 ClusterElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElement.#ctor(System.String)">
            <summary>
            使用指定的类型初始化 EntityTypeElement 类的新实例。
            </summary>
            <param name="name">name。</param>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElement.Name">
            <summary>
            消息集群的 Name。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElement.Address">
            <summary>
            消息关联的消息服务器集群的访问地址。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElement.Port">
            <summary>
            消息关联的消息服务器集群的访问端口。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElement.VirtualHost">
            <summary>
            消息关联的消息服务器集群的访问用户名。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElement.UserName">
            <summary>
            消息关联的消息服务器集群的访问用户名。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElement.Password">
            <summary>
            消息关联的消息服务器集群的访问用户名。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElement.PublishConnectionCount">
            <summary>
            消息关联的消息服务器集群的发布连接数，默认值为 2。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElement.MinChannelCountPerPublishConnection">
            <summary>
            消息关联的消息服务器集群的每连接最小发布信道数，默认值为 8。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElement.MaxChannelCountPerPublishConnection">
            <summary>
            消息关联的消息服务器集群的每连接最大发布信道数，默认值为 16。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Configuration.ClusterElementCollection">
            <summary>
            集群集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElementCollection.#ctor">
            <summary>
            初始化 ClusterElementCollection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElementCollection.CollectionType">
            <summary>
            重载 CollectionType
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElementCollection.CreateNewElement">
            <summary>
            重载 CreateNewElement
            </summary>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElementCollection.CreateNewElement(System.String)">
            <summary>
            重载 CreateNewElement
            </summary>
            <param name="key">键。</param>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            重载 GetElementKey。
            </summary>
            <param name="element">配置项</param>
            <returns>配置项的键</returns>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElementCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的配置项。
            </summary>
            <param name="index">索引。</param>
            <returns>错误码配置项。</returns>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClusterElementCollection.Item(System.String)">
            <summary>
            获取指定键的配置项。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElementCollection.IndexOf(XMS.Core.Messaging.Configuration.ClusterElement)">
            <summary>
            获取指定 EntityElement 的索引。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElementCollection.Add(XMS.Core.Messaging.Configuration.ClusterElement)">
            <summary>
            添加配置元素。
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElementCollection.Remove(XMS.Core.Messaging.Configuration.ClusterElement)">
            <summary>
            移除指定的配置元素。
            </summary>
            <param name="element">要移除的配置元素。</param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElementCollection.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElementCollection.Remove(System.String)">
            <summary>
            移除指定键的索引。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.ClusterElementCollection.Clear">
            <summary>
            清空集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Configuration.ClustersElement">
            <summary>
            表示消息集群的配置。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClustersElement.Default">
            <summary>
            消息默认的消息集群。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.ClustersElement.Clusters">
            <summary>
            获取消息集群集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Configuration.MessagingSettingsSection">
            <summary>
            表示消息配置节。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.MessagingSettingsSection.#ctor">
            <summary>
            初始化 MessagingSettingsSection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.MessagingSettingsSection.ClientId">
            <summary>
            应用作为消息客户端的 Id，如果未指定，则是用默认值: {AppName}_{AppVersion}。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Configuration.PublishMessageTypeElement">
            <summary>
            表示一个消息类型。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElement.#ctor">
            <summary>
            初始化 PublishMessageTypeElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElement.#ctor(System.String)">
            <summary>
            使用指定的类型初始化 PublishMessageTypeElement 类的新实例。
            </summary>
            <param name="id">id。</param>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.PublishMessageTypeElement.Id">
            <summary>
            消息类型的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.PublishMessageTypeElement.Cluster">
            <summary>
            消息关联的消息服务器集群。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.PublishMessageTypeElement.Exchange">
            <summary>
            消息关联的交换机。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.PublishMessageTypeElement.ReliabilityLevel">
            <summary>
            消息发送的可靠性级别。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Configuration.PublishElement">
            <summary>
            表示发布的配置。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishElement.#ctor">
            <summary>
            初始化 PublishElement 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.PublishElement.MessageTypes">
            <summary>
            获取消息类型集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection">
            <summary>
            消息类型集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.#ctor">
            <summary>
            初始化 PublishMessageTypeElementCollection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.CollectionType">
            <summary>
            重载 CollectionType
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.CreateNewElement">
            <summary>
            重载 CreateNewElement
            </summary>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.CreateNewElement(System.String)">
            <summary>
            重载 CreateNewElement
            </summary>
            <param name="key">键。</param>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            重载 GetElementKey。
            </summary>
            <param name="element">配置项</param>
            <returns>配置项的键</returns>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的配置项。
            </summary>
            <param name="index">索引。</param>
            <returns>错误码配置项。</returns>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.Item(System.String)">
            <summary>
            获取指定键的配置项。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.IndexOf(XMS.Core.Messaging.Configuration.PublishMessageTypeElement)">
            <summary>
            获取指定 MessageElement 的索引。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.Add(XMS.Core.Messaging.Configuration.PublishMessageTypeElement)">
            <summary>
            添加配置元素。
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.Remove(XMS.Core.Messaging.Configuration.PublishMessageTypeElement)">
            <summary>
            移除指定的配置元素。
            </summary>
            <param name="element">要移除的配置元素。</param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.Remove(System.String)">
            <summary>
            移除指定键的索引。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.PublishMessageTypeElementCollection.Clear">
            <summary>
            清空集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Configuration.SubscribeElement">
            <summary>
            表示订阅的配置。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeElement.#ctor">
            <summary>
            初始化 PublishElement 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.SubscribeElement.MessageTypes">
            <summary>
            获取消息类型集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement">
            <summary>
            表示一个消息类型。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement.#ctor">
            <summary>
            初始化 SubscribeMessageTypeElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement.#ctor(System.String)">
            <summary>
            使用指定的类型初始化 SubscribeMessageTypeElement 类的新实例。
            </summary>
            <param name="id">id。</param>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement.Id">
            <summary>
            消息类型的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement.Cluster">
            <summary>
            消息关联的消息服务器集群。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement.ParallelCount">
            <summary>
            并行处理消息的个数。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement.Queue">
            <summary>
            消息关联的队列。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement.SubscribeMode">
            <summary>
            消息订阅模试。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection">
            <summary>
            消息类型集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.#ctor">
            <summary>
            初始化 SubscribeMessageTypeElementCollection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.CollectionType">
            <summary>
            重载 CollectionType
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.CreateNewElement">
            <summary>
            重载 CreateNewElement
            </summary>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.CreateNewElement(System.String)">
            <summary>
            重载 CreateNewElement
            </summary>
            <param name="key">键。</param>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            重载 GetElementKey。
            </summary>
            <param name="element">配置项</param>
            <returns>配置项的键</returns>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的配置项。
            </summary>
            <param name="index">索引。</param>
            <returns>错误码配置项。</returns>
        </member>
        <member name="P:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.Item(System.String)">
            <summary>
            获取指定键的配置项。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.IndexOf(XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement)">
            <summary>
            获取指定 MessageElement 的索引。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.Add(XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement)">
            <summary>
            添加配置元素。
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.Remove(XMS.Core.Messaging.Configuration.SubscribeMessageTypeElement)">
            <summary>
            移除指定的配置元素。
            </summary>
            <param name="element">要移除的配置元素。</param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.Remove(System.String)">
            <summary>
            移除指定键的索引。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XMS.Core.Messaging.Configuration.SubscribeMessageTypeElementCollection.Clear">
            <summary>
            清空集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.IMessage">
            <summary>
            消息接口。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.Id">
            <summary>
            获取一个值，该值指示消息的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.TypeId">
            <summary>
            获取一个值，该值指示消息类型编号。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.TypeName">
            <summary>
            获取一个值，该值指示消息类型名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.MachineName">
            <summary>
            获取一个值，该值指示消息的发送方的机器名。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.AppName">
            <summary>
            获取一个值，该值指示消息的发送方 AppName。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.AppVersion">
            <summary>
            获取一个值，该值指示消息的发送方 AppVersion。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.CreateTime">
            <summary>
            获取一个值，该值指示消息的创建时间，如果 CreateTime 与 PublishTime 相同，那么消息是实时消息，应立即入队，否则是延时消息，定时入队。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.EnqueueTime">
            <summary>
            获取一个值，该值指示消息进入消息队列的时间，如果 EnqueueTime 与 CreateTime 相同，那么消息是实时消息，应立即入队，否则是延时消息，定时入队。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.PreventDuplication">
            <summary>
            获取一个值，该值指示消息是否应该防止重复处理，默认为 false。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.ContentEncoding">
            <summary>
            获取消息体的内容编码，如果为定义，则为 string。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.ContentType">
            <summary>
            获取消息体的内容类型，如果为定义，则为 string。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.Body">
            <summary>
            获取一个值，该值指示消息体原始内容。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.IMessageClient">
            <summary>
            消息客户端。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageClient.Publish(XMS.Core.Messaging.IMessage)">
            <summary>
            发布消息。
            </summary>
            <param name="message">要发布的消息。</param>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageClient.Publish(System.Collections.Generic.IList{XMS.Core.Messaging.IMessage})">
            <summary>
            发布多条消息。
            </summary>
            <param name="messages">要发布的消息集合。</param>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageClient.Dispose">
            <summary>
            释放消息客户端占用的托管资源。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.IMessageListener">
            <summary>
            消息客户端。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageListener.DefaultClusterConnected">
            <summary>
            获取一个值，该值指示当前监听器是否从连上默认消息服务器集群。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageListener.Start">
            <summary>
            启动消息监听器。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageListener.Stop">
            <summary>
            停止消息监听器。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.Message">
            <summary>
            消息。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.MessageAttribute">
            <summary>
            定义消息特性，该特性指定一个类型为某种类型的消息并为这种类型的消息指定元属性。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageAttribute.MessageTypeId">
            <summary>
            消息类型的 id。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageAttribute.PreventDuplication">
            <summary>
            防止重复处理，默认为 false。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageAttribute.#ctor(System.String)">
            <summary>
            初始化 MessageAttribute 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.LoggerName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.LogTime">
            <summary>
            日志记录时间
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.Category">
            <summary>
            日志类别
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.Message">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.Exception">
            <summary>
            日志异常
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.AppName">
            <summary>
            应用程序
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.AppVersion">
            <summary>
            应用版本
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.Machine">
            <summary>
            日志源机器
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.UserId">
            <summary>
            会员 Id
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.UserIP">
            <summary>
            访问者 IP
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.RawUrl">
            <summary>
            原始访问 Url
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.AgentName">
            <summary>
            应用程序
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.AgentVersion">
            <summary>
            应用版本
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.AgentPlatform">
            <summary>
            客户端平台
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.MobileDeviceManufacturer">
            <summary>
            移动设备制造商
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.MobileDeviceModel">
            <summary>
            移动设备型号
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.LogMessage.MobileDeviceId">
            <summary>
            移动设备 Id
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ErrorMessage.Exchange">
            <summary>
            The exchange the message was originally published to.
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ErrorMessage.RoutingKey">
            <summary>
            The routing key used when the message was originally published.
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ErrorMessage.QueueName">
            <summary>
            队列名信息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ErrorMessage.ErrorInfo">
            <summary>
            错误信息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ErrorMessage.StackInfo">
            <summary>
            错误相关的堆栈信息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ProxyMessage.Messages">
            <summary>
            要代理发送的消息集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ProxyMessage.ClientId">
            <summary>
            获取一个值，该值指示消息客户端的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.TimingMessage.Raw">
            <summary>
            要定时发送的原始消息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.TimingMessage.ClientId">
            <summary>
            获取一个值，该值指示消息客户端的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.CommandMessage.Name">
            <summary>
            获取一个值，该值指示要执行的命令的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.CommandMessage.Parameters">
            <summary>
            获取一个值，该值指示要执行命令的参数。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.MessagingException">
            <summary>
            表示在消息调用、处理过程中引发的异常。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessagingException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Messaging.MessagingException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“业务操作的过程中发生错误。”。
            </remarks>
        </member>
        <member name="M:XMS.Core.Messaging.MessagingException.#ctor(System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.Messaging.MessagingException"/> 类的实例。
            </summary>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Messaging.MessagingException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.Messaging.MessagingException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessagingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="T:XMS.Core.Messaging.ReliabilityLevel">
            <summary>
            消息发送的可靠性级别
            </summary>
        </member>
        <member name="F:XMS.Core.Messaging.ReliabilityLevel.Low">
            <summary>
            低，消息以普通方式发送，发送者不需要确认消息发送结果即可立即向下执行，可靠性级别较低，性能最好，适用于对可靠性要求比较低的场合。
            </summary>
        </member>
        <member name="F:XMS.Core.Messaging.ReliabilityLevel.High">
            <summary>
            高，消息以确认机制发送，发送这需要确认消息发送结果后才可向下继续执行，可靠性级别较高，性能较差，适用于对可靠性要求比较高的场合。
            </summary>
        </member>
        <member name="F:XMS.Core.Messaging.ReliabilityLevel.Highest">
            <summary>
            最高，消息以事物机制发送，发送这需要确认消息发送结果后才可向下继续执行，可靠性级别最高，性能最差，适用于对可靠性要求极高的场合。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.SubscribeMode">
            <summary>
            订阅模式。
            </summary>
        </member>
        <member name="F:XMS.Core.Messaging.SubscribeMode.FairDispatch">
            <summary>
            公平分发，默认模式，一个消费者同时只能处理一条消息。
            </summary>
        </member>
        <member name="F:XMS.Core.Messaging.SubscribeMode.MainStandby">
            <summary>
            主备，同时只有一个应用实例可以订阅消息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessagingSettings.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessagingSettings.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessagingSettings.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessagingSettings.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageService.Publish(System.Object)">
            <summary>
            发布实时消息。
            </summary>
            <param name="msgBody">要发布的消息对的消息体。</param>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageService.Publish(System.Object,System.DateTime)">
            <summary>
            发布延迟消息。
            </summary>
            <param name="msgBody">要发布的消息对的消息体。</param>
            <param name="sendTime">消息的发送时间。</param>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageService.Publish(XMS.Core.Messaging.MessageCollection)">
            <summary>
            将消息集合中的消息发布到消息服务器，消息集合中可以包含实时消息和延迟消息。
            如果消息集合中只有一条消息，则直接发布到消息服务器，否则将要发送的消息打包成一个消息发送到消息代理服务器，然后通过消息代理服务器异步中转发布集合中的每一个消息。
            </summary>
            <param name="messages">要发布的消息集合。</param>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageService.SendCommand(System.Object)">
            <summary>
            通过消息服务向当前应用程序的所有实例发送指定的自定义命令，并要求这些实例执行这个命令。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageService.SendRemoveLocalCacheItemCommand(System.String,System.String)">
            <summary>
            通过消息服务向当前应用程序的所有实例发送删除本地缓存项的命令，并要求这些实例执行这个命令。
            </summary>
            <param name="regionName">缓存分区名。</param>
            <param name="key">缓存键。</param>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageService.SendClearLocalCacheRegionCommand(System.String)">
            <summary>
            通过消息服务向当前应用程序的所有实例发送清空本地缓存分区的命令，并要求这些实例执行这个命令。
            </summary>
            <param name="regionName">缓存分区名。</param>
        </member>
        <member name="T:XMS.Core.Messaging.MessageCollection">
            <summary>
            消息集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageCollection.#ctor">
            <summary>
            初始化 MessageCollection 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageCollection.#ctor(System.Int32)">
            <summary>
            初始化 MessageCollection 类的新实例。
            </summary>
            <param name="capacity">新集合可以存储的消息数。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageCollection.Add(System.Object)">
            <summary>
            向消息集合中添加一条立即发布到消息服务器的消息。
            </summary>
            <param name="msgBody">消息体。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageCollection.Add(System.Object,System.DateTime)">
            <summary>
            向消息集合中添加一条在指定时间才发布到消息服务器的消息。
            </summary>
            <param name="msgBody">消息体。</param>
            <param name="sendTime">消息发送时间。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageCollection.AddCommand(System.Object)">
            <summary>
            向消息集合中添加一条立即发布到消息服务器的命令消息。
            </summary>
            <param name="command">要发送的命令。</param>
        </member>
        <member name="M:XMS.Core.Messaging.DefaultMessageService.Publish(System.Object)">
            <summary>
            发布实时消息。
            </summary>
            <param name="msgBody">要发布的消息对的消息体。</param>
        </member>
        <member name="M:XMS.Core.Messaging.DefaultMessageService.Publish(System.Object,System.DateTime)">
            <summary>
            发布延迟消息。
            </summary>
            <param name="msgBody">要发布的消息对的消息体。</param>
            <param name="sendTime">消息的发送时间。</param>
        </member>
        <member name="M:XMS.Core.Messaging.DefaultMessageService.Publish(XMS.Core.Messaging.MessageCollection)">
            <summary>
            将消息集合中的消息发布到消息服务器，如果消息集合中只有一条消息，则直接发布到消息服务器，否则将要发送的消息打包成一个消息发送到消息代理服务器，然后通过消息代理服务器异步中转发布集合中的每一个消息。
            </summary>
            <param name="messages">要发布的消息集合。</param>
        </member>
        <member name="M:XMS.Core.Messaging.DefaultMessageService.SendCommand(System.Object)">
            <summary>
            通过消息服务向当前应用程序的所有实例发送指定的命令，并要求这些实例执行这个命令。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.DefaultMessageService.SendRemoveLocalCacheItemCommand(System.String,System.String)">
            <summary>
            通过消息服务向当前应用程序的所有实例发送删除本地缓存项的命令，并要求这些实例执行这个命令。
            </summary>
            <param name="regionName">缓存分区名。</param>
            <param name="key">缓存键。</param>
        </member>
        <member name="M:XMS.Core.Messaging.DefaultMessageService.SendClearLocalCacheRegionCommand(System.String)">
            <summary>
            通过消息服务向当前应用程序的所有实例发送清空本地缓存分区的命令，并要求这些实例执行这个命令。
            </summary>
            <param name="regionName">缓存分区名。</param>
        </member>
        <member name="M:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageClientBase.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageClientBase.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageClientBase.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageContext">
            <summary>
            RabbitMQ 消息上下文。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageContext.ReceivedMessageInfo">
            <summary>
            获取收到的消息信息，该字符串可用于各种日志。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageContext.#ctor(RabbitMQ.Client.IModel,RabbitMQ.Client.Events.BasicDeliverEventArgs,XMS.Core.Logging.ILogger,System.DateTime,System.String,System.String,XMS.Core.Messaging.Message,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            初始化 RabbitMQMessageContext 类的新实例。
            </summary>
            <param name="channel">信道。</param>
            <param name="args">消息事件参数。</param>
            <param name="listenLogger">监听日志记录器。</param>
            <param name="receiveTime">接收时间。</param>
            <param name="clusterName">集群名称。</param>
            <param name="queueName">队列名称。</param>
            <param name="raw">原始消息。</param>
            <param name="handleCount">处理次数。</param>
            <param name="lastHandleTime">上次处理时间。</param>
        </member>
        <member name="M:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageContext.RejectCore(System.Boolean,System.String)">
            <summary>
            拒绝消息。
            </summary>
            <param name="requeue">如果为 true，则消息会被重新放入消息队列，否则，消息会被丢弃。</param>
            <param name="reason">拒绝的原因，如果该值不为空，将会输出一条警告日志，以记录拒绝发生时的原因。</param>
        </member>
        <member name="P:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageListener.IsRunning">
            <summary>
            获取一个值，该值指示监听器是否正在运行。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageListener.Stop">
            <summary>
            停止消息订阅主机实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageListener.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageListener.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Messaging.RabbitMQ.RabbitMQMessageListener.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.IMessageContext">
            <summary>
            表示一个消息上下文，该上下文对象的实例与一个消息关联。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.ListenLogger">
            <summary>
            获取消息监听日志记录器，该记录器记录的日志记录到单独的监听文件夹中。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.ReceiveTime">
            <summary>
            获取消息的接收时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.ClusterName">
            <summary>
            获取集群名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.QueueName">
            <summary>
            获取队列名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.Raw">
            <summary>
            获取原始消息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.ReceivedMessageInfo">
            <summary>
            获取收到的消息信息，该字符串可用于各种日志。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.HandleCount">
            <summary>
            处理次数。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.LastHandleTime">
            <summary>
            上次处理时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.IsCompleted">
            <summary>
            获取一个值，该值指示消息是否已经处理完成。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.IsRejected">
            <summary>
            获取一个值，该值指示消息是否已经被拒绝。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageContext.Complete">
            <summary>
            完成消息，该操作通知消息服务器消息处理成功并从消息持久化存储中删除消息，一般情况下，在事物提交之前调用此方法，如果消息处理过程中未调用此方法，消息监听程序会自动调用此方法。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageContext.Reject(System.Boolean)">
            <summary>
            拒绝消息。
            </summary>
            <param name="requeue">如果为 true，则消息会被重新放入消息队列，否则，消息会被丢弃。</param>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageContext.Reject(System.Boolean,System.String)">
            <summary>
            拒绝消息。
            </summary>
            <param name="requeue">如果为 true，则消息会被重新放入消息队列，否则，消息会被丢弃。</param>
            <param name="reason">拒绝的原因，如果该值不为空，将会输出一条警告日志，以记录拒绝发生时的原因。</param>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageContext.Reject(System.Boolean,System.Exception)">
            <summary>
            拒绝消息。
            </summary>
            <param name="requeue">如果为 true，则消息会被重新放入消息队列，否则，消息会被丢弃。</param>
            <param name="error">引发拒绝操作的错误，如果该值不为空，将会输出一条警告日志，以记录拒绝发生时的原因。</param>
        </member>
        <member name="T:XMS.Core.Messaging.IMessageHandler`1">
            <summary>
            为消息处理程序定义统一的接口。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageHandler`1.Handle(XMS.Core.Messaging.IMessageContext,`0)">
            <summary>
            处理指定类型的消息。
            	可根据需要在事物的 Commit 方法前调用 context.Complete 方法，保证消息处理和事物的两段式一致性。
            </summary>
            <param name="context">消息上下文。</param>
            <param name="message">要处理的消息。</param>
        </member>
        <member name="T:XMS.Core.Messaging.MessageContext">
            <summary>
            消息上下文。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.ListenLogger">
            <summary>
            获取监听日志记录器，该记录器记录的日志记录到单独的监听文件夹中。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.ReceiveTime">
            <summary>
            获取消息的接收时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.ClusterName">
            <summary>
            获取集群名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.QueueName">
            <summary>
            获取队列名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.Raw">
            <summary>
            获取原始消息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.ReceivedMessageInfo">
            <summary>
            获取收到的消息信息，该字符串可用于各种日志。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.HandleCount">
            <summary>
            处理次数。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.LastHandleTime">
            <summary>
            上次处理时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.IsCompleted">
            <summary>
            获取一个值，该值指示消息是否已经处理完成。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.IsRejected">
            <summary>
            获取一个值，该值指示消息是否已经被拒绝。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.#ctor(XMS.Core.Logging.ILogger,System.DateTime,System.String,System.String,XMS.Core.Messaging.Message,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            初始化 MessageContext 类的新实例。
            </summary>
            <param name="listenLogger">监听日志记录器。</param>
            <param name="receiveTime">接收时间。</param>
            <param name="clusterName">集群名称。</param>
            <param name="queueName">队列名称。</param>
            <param name="raw">原始消息。</param>
            <param name="handleCount">处理次数。</param>
            <param name="lastHandleTime">上次处理时间。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.Complete">
            <summary>
            完成消息，该操作通知消息服务器消息处理成功并从消息持久化存储中删除消息，一般情况下，在事物提交之前调用此方法，如果消息处理过程中未调用此方法，消息监听程序会自动调用此方法。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.Reject(System.Boolean)">
            <summary>
            拒绝消息。
            </summary>
            <param name="requeue">如果为 true，则消息会被重新放入消息队列，否则，消息会被丢弃。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.Reject(System.Boolean,System.String)">
            <summary>
            拒绝消息。
            </summary>
            <param name="requeue">如果为 true，则消息会被重新放入消息队列，否则，消息会被丢弃。</param>
            <param name="reason">拒绝的原因，如果该值不为空，将会输出一条警告日志，以记录拒绝发生时的原因。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.Reject(System.Boolean,System.Exception)">
            <summary>
            拒绝消息。
            </summary>
            <param name="requeue">如果为 true，则消息会被重新放入消息队列，否则，消息会被丢弃。</param>
            <param name="error">引发拒绝操作的错误，如果该值不为空，将会输出一条警告日志，以记录拒绝发生时的原因。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.CompleteCore">
            <summary>
            完成消息，该操作通知消息服务器消息处理成功并从消息持久化存储中删除消息，一般情况下，在事物提交之前调用此方法，如果消息处理过程中未调用此方法，消息监听程序会自动调用此方法。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.RejectCore(System.Boolean,System.String)">
            <summary>
            拒绝消息。
            </summary>
            <param name="requeue">如果为 true，则消息会被重新放入消息队列，否则，消息会被丢弃。</param>
            <param name="reason">拒绝的原因，如果该值不为空，将会输出一条警告日志，以记录拒绝发生时的原因。</param>
        </member>
        <member name="T:XMS.Core.Messaging.MessageSubscribeHost">
            <summary>
            消息订阅宿主。
            </summary>
        </member>
        <member name="F:XMS.Core.Messaging.MessageSubscribeHost.Instance">
            <summary>
            获取消息订阅主机实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageSubscribeHost.Start">
            <summary>
            启动消息订阅主机实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageSubscribeHost.Stop">
            <summary>
            停止消息订阅主机实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Security.BaseAuthorizationService">
            <summary>
            IAuthorizationService 接口的基础实现。
            </summary>
        </member>
        <member name="M:XMS.Core.Security.BaseAuthorizationService.#ctor">
            <summary>
            初始化 BaseAuthorizationService 的构造函数。
            </summary>
        </member>
        <member name="M:XMS.Core.Security.BaseAuthorizationService.GetUserAuthorization(System.Int32,System.Int32)">
            <summary>
            根据用户 Id 和 组织 Id 获取 UserAuthorization 对象。
            </summary>
            <param name="userId">用户 Id。</param>
            <param name="orgId">组织 Id。</param>
            <returns>UserAuthorization 对象。</returns>
        </member>
        <member name="M:XMS.Core.Security.BaseAuthorizationService.GetUserAuthorizationInternal(System.Int32,System.Int32)">
            <summary>
            根据用户 Id 和 组织 Id 获取 UserAuthorization 对象的内部实现。
            </summary>
            <param name="userId">用户 Id。</param>
            <param name="orgId">组织 Id。</param>
            <returns>UserAuthorization 对象。</returns>
        </member>
        <member name="T:XMS.Core.Security.IAuthorizationService">
            <summary>
            授权服务。
            </summary>
        </member>
        <member name="M:XMS.Core.Security.IAuthorizationService.GetUserAuthorization(System.Int32,System.Int32)">
            <summary>
            根据用户 Id 和 组织 Id 获取 UserAuthorization 对象。
            </summary>
            <param name="userId">用户 Id。</param>
            <param name="orgId">组织 Id。</param>
            <returns>UserAuthorization 对象。</returns>
        </member>
        <member name="T:XMS.Core.Security.UserAuthorization">
            <summary>
            表示一个用户授权对象，该对象指示用户可以访问系统的权限。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.UserId">
            <summary>
            用户 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.OrgId">
            <summary>
            组织 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.OrgPath">
            <summary>
            组织路径。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.DutyLevel">
            <summary>
            用户在组织中的职务级别， 1 通常为 主管级，可查看同一组织内所有其它级别用户拥有的数据。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.Resources">
            <summary>
            用户可访问的资源。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.Roles">
            <summary>
            用户所拥有的角色。
            </summary>
        </member>
        <member name="M:XMS.Core.SerialNumber.DefaultSerialNumber.Format(System.String,System.Int32)">
            <summary>
            将当前序列号的值格式化为由 numberLength 参数指定长度的字符串，不足部分补'0'，然后将 format 参数指定的字符串中的格式项替换为该字符串。
            </summary>
            <param name="format">用于对当前序列号进行格式化的字符串。</param>
            <param name="numberLength">当前序列号的值格式化后的长度。</param>
            <returns>格式化后的序列号。</returns>
            <example>
            执行 SerialNumberGeneratorManager.Instance.GetSerialNumberGenerator("20120214").Format("20120214{0}",8) 将得到 2012021400000001、2012021400000002 等。
            </example>
        </member>
        <member name="M:XMS.Core.SerialNumber.DefaultSerialNumber.FormatWithRandom(System.String,System.Int32)">
            <summary>
            根据当前序列号的值生成一个不超过 10 的 numberLength 次方的唯一随机数，然后将该随机数格式化为由 numberLength 参数指定长度的字符串，不足部分补'0'，最后将 format 参数指定的字符串中的格式项替换为该字符串。
            </summary>
            <param name="format">用于对当前序列号进行格式化的字符串。</param>
            <param name="numberLength">当前序列号的值格式化后的长度。</param>
            <returns>格式化后的具有随机数的序列号。</returns>
            <example>
            执行 SerialNumberGeneratorManager.Instance.GetSerialNumberGenerator("20120214").FormatWithRandom("20120214{0}",8) 将得到 2012021434657823、2012021476432345 等。
            </example>
            <remarks>
            该方法在当前序列号的值和当前序列号产生时的时间刻度（秒）的基础上生成随机数并进行格式化，满足序列编号固定长度、唯一不重复、先生成后使用、随机不可猜、不泄露商业机密的需求。
            </remarks>
        </member>
        <member name="T:XMS.Core.InvokeStatistics">
            <summary>
            关于调用时长的统计类，nAbnormalInvokeTimeLength，异常调用的时长，可为空，将使用系统默认值，目前为10MS，超过该时长，将打印log，统计用的默认门限值为10，50，100，200,使用本类请使用Using,或者在使用结束后调用Dispose接口
            </summary>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sKey">统计的主键，一般取方法名</param>
            <param name="sInvokeParas">调用的参数</param>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Int32[])">
             <summary>
            
             </summary>
             <param name="sKey">统计的主键，一般取方法名</param>
             <param name="sInvokeParas">调用的参数</param>
             <param name="nAbnormalInvokeTimeLength">异常调用的时长，超过该时长，将打印log</param>
             <param name="aThreshold">统计用的门限值，必须升序排列</param>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.#ctor(System.String,System.String,System.Int32)">
            <summary>
            XMS.Core cache专用
            </summary>
            <param name="sKey"></param>
            <param name="sInvokeParas"></param>
            <param name="NotNeedPara">没用的参数，主要为了跟外部的构造函数区别，写的elegant太麻烦了</param>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.#ctor(System.String,System.Nullable{System.Int32},System.Int32[],System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            接口专用
            </summary>
            <param name="sKey"></param>
            <param name="nAbnormalInvokeTimeLength"></param>
            <param name="aThreshold"></param>
            <param name="parameters"></param>
            <param name="inputs"></param>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.CreateInvokeStep(System.String)">
            <summary>
            建立统计单步的对象
            </summary>
            <param name="sStepName">方法内每个单独的步骤名字</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:XMS.Core.InvokeStep">
            <summary>
            使用本类，请使用using，或者在使用结束后调用Dispose接口，才能保证统计的准确性
            </summary>
        </member>
        <member name="M:XMS.Core.InvokeStep.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.InvokeStep.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.InvokeStep.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.Client.ServiceProxyWrapper`1.EndPointTrace">
            <summary>
            获取当前服务代理包装对象相关的终端点。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.Client.ServiceProxyWrapper`1.ServiceClient">
            <summary>
            服务客户端对象，通过它可以访问底层通道，服务代理对象通过该客户端访问远程服务。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceProxyWrapper`1.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="T:XMS.Core.WCF.Client.ServiceFactory`1">
            <summary>
            服务工厂基类
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactory`1.#ctor(XMS.Core.WCF.Client.ClientChannelCacheMode)">
            <summary>
            
            </summary>
            <param name="cacheModel">要注册的服务在客户端的缓存模式。</param>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactory`1.CreateService">
            <summary>
            创建可用来访问服务的代理对象。
            </summary>
            <returns>可用来访问服务的代理对象。</returns>
        </member>
        <member name="T:XMS.Core.WCF.Client.ServiceFactory`1.ServiceInterceptor">
            <summary>
            服务拦截器
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactory`1.ServiceInterceptor.InterceptInner(Castle.DynamicProxy.IInvocation,XMS.Core.WCF.Client.ServiceProxyWrapper{`0}@,XMS.Core.WCF.Client.EndPointTrace{`0},XMS.Core.InvokeStatistics,System.Collections.Generic.List{XMS.Core.Pair{System.DateTime,System.String}},System.Boolean,System.Int32)">
            <summary>
            /
            </summary>
            <param name="invocation"></param>
            <param name="serviceProxyWrapper"></param>
            <param name="errorEndpoint"></param>
            <param name="objInvoke"></param>
            <param name="invokeStack"></param>
            <param name="bIsStillUseErrorEndpoint">true，表明是递归调用</param>
            <param name="nRetryCount"></param>
        </member>
        <member name="M:XMS.Core.WCF.Client.SyncList`1.Dispose">
            <summary>
            释放托管和非托管资源。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.SyncList`1.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.WCF.Client.SyncList`1.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.Client.EndPointTrace`1.HasError">
            <summary>
            确定通道工厂是否发生通信错误，只有发生通信错误时，才认为该通道工厂对应的服务终端点已失效，应废弃该通道工厂。
            注意：发生超时错误时，只是因为通道工厂对应的服务终端点太忙来不及响应请求，但其仍然有效。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.EndPointTrace`1.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="F:XMS.Core.WCF.Client.EndPointContainer`1.array">
            <summary>
            在配置变化前，永远不会有更改，配置变化的时候，应该初始化好新的array后，直接替换
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.EndPointContainer`1.GetServiceChannelFactory(XMS.Core.WCF.Client.EndPointTrace{`0})">
            <summary>
            获取可用的终端点。
            </summary>
            <param name="retryCount">整个重试过程中的重试次数。</param>
            <param name="firstEndPoint">本次请求中使用的第一个终端点。</param>
            <param name="currentErrorEndPoint">当前正在使用且出错的终端点。</param>
            <returns></returns>
            <remarks>
            出于性能考虑，这里采用开放式策略获取终端点，既允许在遍历终端点集合的时候，其它线程改变终端点的错误状态，
            这样，在所有终端点都不可用的极端情况下，遍历结束前，一个已经遍历过的终端点恰巧变为可用状态，这时不会返回该终端点（因为已经遍历过），而是返回 null，
            最终结果是给用户报告一个暂时找不到可用服务的错误。
            </remarks>
        </member>
        <member name="T:XMS.Core.WCF.Client.ClientChannelCacheMode">
            <summary>
            
            </summary>
            <remarks>
            PerCall 模式，每次调用成功后都会关闭通道的连接，下次调用会重新打开连接（如果连接已经被关闭）。
            PerWebRequest 模式，在请求结束后自动关闭连接。
            PerThread 模式，在线程结束后自动关闭连接。
            PerEndPoint 模式，所有请求都使用同一个连接，只有在发生网络错误时才会强行中断连接。
            </remarks>
        </member>
        <member name="F:XMS.Core.WCF.Client.ClientChannelCacheMode.PerCall">
            <summary>
            针对每次客户端调用(即请求执行服务中的任何一个方法都认为是一次调用)重新创建一个通道及其服务代理对象以执行请求。
            这种情况下，调用完成后会自动关闭连接。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.Client.ClientChannelCacheMode.PerRequest">
            <summary>
            针对每次请求重新创建一个通道及其服务代理对象；
            在 Web 环境中，该请求指 HttpRequest，在 服务环境中，该请求指服务上下文，Web 环境优先；
            其它环境中，自动转为 PerCall 模式。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.Client.ClientChannelCacheMode.PerThread">
            <summary>
            针对每个独立的线程重新创建一个通道及其服务代理对象
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.Client.ClientChannelCacheMode.PerEndPoint">
            <summary>
            针对每个服务终端点都会在客户端缓存一个服务代理对象，这样所有请求都将通过此服务代理对象进行。
            这种情况下，此代理对象与服务终端点的连接将是长久保持的，除非发生错误才会进行中断。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.Client.ClientChannelCacheMode.Pool">
            <summary>
            对象池模式
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.Client.ClientChannelCacheModeAttribute">
            <summary>
            指定一个服务契约在客户端的缓存模式
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.Client.ClientChannelCacheModeAttribute.ClientChannelCacheMode">
            <summary>
            获取一个值，该值指示客户端通道的缓存模式。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactories.ConcentratedConfigServiceClient.RegisterServices(XMS.Core.Container)">
            <summary>
            向指定的容器中注册服务
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactories.ConcentratedConfigServiceClient.IsNotWebApplication">
            <summary>
            判断当前应用程序是否非Web应用程序
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactories.ConcentratedConfigServiceClient.RegisterService(XMS.Core.Container,System.Type,XMS.Core.WCF.Client.ClientChannelCacheMode)">
            <summary>
            注册一个服务类型，以便服务工厂进行管理。
            该方法将指定的服务类型放入IOC容器，任何服务类型必须在注册后才能够通过IOC容器进行访问。
            该服务类型的实例是通过服务工厂对象创建的，其生命周期由为其定义的 ClientChannelCacheModeAttribute 决定。
            </summary>
            <param name="container">要在其中注册服务的容器。</param>
            <param name="serviceType">要注册的服务类型。</param>
            <param name="cacheModel">要注册的服务在客户端的缓存模式。</param>
        </member>
        <member name="T:XMS.Core.WCF.OperationContextHelper">
            <summary>
            Request类的常用扩展
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.OperationContextHelper.GetIP(System.ServiceModel.Channels.MessageProperties)">
            <summary>
            
            </summary>
            <param name="incomingMessageProperties"></param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.WCF.AppAgentHeader.Name">
            <summary>
            app-agent 标头的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.AppAgentHeader.NameSpace">
            <summary>
            app-agent 标头的名称空间。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.AuthorizationTicketHeader">
            <summary>
            表示身份验证票头
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.AuthorizationTicketHeader.Name">
            <summary>
            app-agent 标头的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.AuthorizationTicketHeader.NameSpace">
            <summary>
            app-agent 标头的名称空间。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.CustomHeaderClientMessageInspector">
            <summary>
            自定义客户端消息拦截器。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.CustomHeaderClientMessageInspector.#ctor(System.Collections.Generic.List{XMS.Core.WCF.ICustomHeader})">
            <summary>
            初始化 CustomHeaderClientMessageInspector 类的新实例。
            </summary>
            <param name="headers">自定义头的列表。</param>
        </member>
        <member name="M:XMS.Core.WCF.CustomHeaderClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            
            </summary>
            <param name="reply"></param>
            <param name="correlationState"></param>
        </member>
        <member name="M:XMS.Core.WCF.CustomHeaderClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.WCF.InvokeChainHeader">
            <summary>
            调用链自定义标头。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.InvokeChainHeader.name">
            <summary>
            invoke-chain 标头的名称。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.InvokeChainHeader.nameSpace">
            <summary>
            invoke-chain 标头的名称空间。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.UserIPHeader">
            <summary>
            表示用户IP标头
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.UserIPHeader.Name">
            <summary>
            app-agent 标头的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.UserIPHeader.NameSpace">
            <summary>
            app-agent 标头的名称空间。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.IOCBehavior">
            <summary>
            提供与服务日志记录行为相关的属性。
            </summary>
            <remarks>
            日志可在服务级别和操作级别发生，此类同时支持这两种级别。
            </remarks>
        </member>
        <member name="M:XMS.Core.WCF.IOCBehavior.#ctor(System.Boolean)">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.IOCBehavior"/> 类的新实例。
            </summary>
            <param name="showExceptionDetailToClient">指示是否应向客户端展示异常详细信息</param>
        </member>
        <member name="M:XMS.Core.WCF.IOCBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            插入自定义扩展对象。
            </summary>
            <param name="serviceDescription">服务说明。</param>
            <param name="serviceHostBase">当前正在生成的宿主。</param>
        </member>
        <member name="T:XMS.Core.WCF.ManageableServiceHostManager">
            <summary>
            表示 ManageableServiceHost 的管理器，用于对服务宿主实例进行管理，可响应配置文件变化事件。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHostManager.Instance">
            <summary>
            ManageableServiceHostManager 类的单例访问入口。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHostManager.GetServiceNetTcpUri(System.Type)">
            <summary>
            为指定类型的服务获取一个支持 nettcp 绑定的终端点地址。
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHostManager.RegisterService(System.Type)">
            <summary>
            向 ManageableServiceHostFactory 中注册服务类型。
            </summary>
            <param name="serviceType"></param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHostManager.Start">
            <summary>
            启动服务管理器。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHostManager.Stop">
            <summary>
            停止服务管理器。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.ManageableWebServiceHostFactory">
            <summary>
            在可动态创建主机实例以响应传入消息的 IIS 托管宿主环境中提供支持配置服务且具有高可管理性的 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 的实例的工厂。 
            </summary>
            <remarks>
            <para>
            此工厂提供一种支持集中配置的 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/>，以便在托管宿主环境为 Internet Information Services (IIS) 中启用集中配置服务并提升服务的可管理性。
            ManageableWebServiceHostFactory 创建一个继承自 WebServiceHost 的宿主的实例，该实例禁用 HTTP 帮助页和 Web 服务描述语言 (WSDL) GET 功能，以使元数据终结点不干扰默认 HTTP 终结点。
            </para>
            <para>
            集中配置注意：当某应用程序在中心配置服务器上的服务配置（Services.config）发生变化时，应用程序会响应该变化并应用新的配置，新的配置生效前的大部分正在执行的请求可以正常执行完成，
            但仍然会有少数请求（例如执行时间过长的请求）被强制关闭，可以通过将同一服务部署到多台备份机器上并利用客户端应用程序通过轮询实现的可靠性机制来将这一部分请求转移到备份机器上重新执行，
            从而可有效避免错误的出现。最后，为了尽可能的减少因配置变化引发的错误，请尽量在访问量最小的时候更新配置。
            </para>
            </remarks>
            <example>
            <para>
            可以在 .SVC 文件中声明支持集中配置的服务，示例如下：<br/>
            <code>
            &lt;%@ServiceHost Language="c#" Service="XMS.Samples.SampleService" Factory="XMS.Core.WCF.ManageableWebServiceHostFactory"%&gt;
            </code>
            .SVC 文件中使用 <see cref="T:XMS.Core.WCF.ManageableWebServiceHostFactory"/> 需要特别注意：<br/>
                当服务宿主为 普通 IIS 宿主 或 IIS7 中的WAS宿主时，不需要也无法为其指定基址和为其 EndPoint 指定 Address，系统自动使用 Svc文件的地址为作为服务的地址。<br/>
                另外，当服务宿主为普通 IIS 宿主时，仅支持 Http 协议，当服务宿主为 IIS7 中的WAS宿主时，支持所有可用的传输协议。<br/>
            </para>
            <para>
            也可以在 Web.config 配置文件中声明支持集中配置的服务，示例如下：
            <code>
              &lt;serviceHostingEnvironment multipleSiteBindingsEnabled="true"&gt;
                 &lt;serviceActivations&gt;
                   &lt;add factory="XMS.Core.WCF.ManageableWebServiceHostFactory" service="WebApplication1.Service1" relativeAddress="test.svc"/&gt;
                 &lt;/serviceActivations&gt;
               &lt;/serviceHostingEnvironment&gt;
             </code>
            </para>
            <para>
            上述任何一种声明服务的方式都需要相应的服务配置信息（参考集中配置机制，按如下顺序查找：conf/Services.config > Services.config > Web.config ），如下所示：
             <code>
               &lt;services&gt;
            	 &lt;service name="WebApplication1.Service1" behaviorConfiguration="IOCBehavior"&gt;
            		&lt;endpoint binding="wsHttpBinding" contract="WebApplication1.IService1" bindingConfiguration="WSBindingConfig"/&gt;
            	 &lt;/service&gt;
               &lt;/services&gt;
            </code>
            </para>
            </example>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHostFactory.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            使用指定的服务类型和基址创建 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 类的实例。
            </summary>
            <param name="serviceType">要创建的服务主机的类型。</param>
            <param name="baseAddresses">该服务的基址的数组。</param>
            <returns>从 <see cref="T:System.ServiceModel.Web.WebServiceHost"/> 派生的 <see cref="T:XMS.Core.WCF.ManageableWebServiceHostFactory"/> 类的实例。</returns>
        </member>
        <member name="T:XMS.Core.WCF.ManageableWebServiceHost">
            <summary>
            一个 WebServiceHost 派生类，支持配置服务，通过配置服务获取服务配置文件并加载服务说明信息。
            </summary>
            <remarks>
            使用注意事项请参考 MSDN 中关于 WebServiceHost 的说明。
            </remarks>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHost.ApplyConfiguration">
            <summary>
            重载自 <see cref="T:System.ServiceModel.ServiceHostBase"/> 类，通过配置服务获取服务配置文件并加载服务说明信息，并将其应用于正在构造的运行库。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHost.EnableDiscovery(System.Boolean,System.Boolean)">
            <summary>
            为当前宿主中承载的服务启用自动发现机制。
            </summary>
            <param name="enableMEX">是否启用元数据交换服务，默认为 <c>true</c>。</param>
            <param name="enableHttpGet">是否启用 Http Get 协议。</param>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.HasUdpDiscoveryEndpoint">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint"/> （UDP 发现终结点）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.HasDiscoveryBehavior">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Discovery.ServiceDiscoveryBehavior"/> （服务发现行为）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.HasMetadataExchangeEndpoint">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Description.IMetadataExchange"/> （元数据交换服务端点）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.HasMetadataBehavior">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Description.ServiceMetadataBehavior"/> （元数据交换服务行为）。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHost.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 类的新实例。
            </summary>
            <remarks>
            有两个构造函数可用于创建 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 类的实例。 
            多数情况下，均使用将服务类型作为输入参数的 <see cref="M:XMS.Core.WCF.ManageableWebServiceHost.#ctor(System.Type,System.Uri[])"/> 构造函数。
            根据需要，主机还可以使用此函数创建新服务。仅在您希望服务主机使用特定的服务单一实例时才使用 <see cref="M:XMS.Core.WCF.ManageableWebServiceHost.#ctor(System.Object,System.Uri[])"/> 构造函数。
            </remarks>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHost.#ctor(System.Type,System.Uri[])">
            <summary>
            使用服务的类型及其指定的基址初始化 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 类的新实例。 
            </summary>
            <param name="type">承载服务的类型。</param>
            <param name="baseAddresses">Uri 类型的数组，包含承载服务的基址。</param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHost.#ctor(System.Object,System.Uri[])">
            <summary>
            使用服务的实例及其指定的基址初始化 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 类的新实例。
            </summary>
            <param name="singleton">承载的服务的实例。</param>
            <param name="baseAddresses">Uri 类型的 Array，包含承载服务的基址。</param>
        </member>
        <member name="T:XMS.Core.WCF.ManageableServiceHost">
            <summary>
            一个 ServiceHost 派生类，支持配置服务，通过配置服务获取服务配置文件并加载服务说明信息。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.ApplyConfiguration">
            <summary>
            重载自 <see cref="T:System.ServiceModel.ServiceHostBase"/> 类，通过配置服务获取服务配置文件并加载服务说明信息，并将其应用于正在构造的运行库。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.EnableDiscovery(System.Boolean,System.Boolean)">
            <summary>
            为当前宿主中承载的服务启用自动发现机制。
            </summary>
            <param name="enableMEX">是否启用元数据交换服务，默认为 <c>true</c>。</param>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.HasUdpDiscoveryEndpoint">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint"/> （UDP 发现终结点）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.HasDiscoveryBehavior">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Discovery.ServiceDiscoveryBehavior"/> （服务发现行为）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.HasMetadataExchangeEndpoint">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Description.IMetadataExchange"/> （元数据交换服务端点）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.HasMetadataBehavior">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Description.ServiceMetadataBehavior"/> （元数据交换服务行为）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.ServiceType">
            <summary>
            获取服务的类型。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.ManageableServiceHost"/> 类的新实例。
            </summary>
            <remarks>
            有两个构造函数可用于创建 <see cref="T:XMS.Core.WCF.ManageableServiceHost"/> 类的实例。 
            多数情况下，均使用将服务类型作为输入参数的 <see cref="M:XMS.Core.WCF.ManageableServiceHost.#ctor(System.Type,System.Uri[])"/> 构造函数。
            根据需要，主机还可以使用此函数创建新服务。仅在您希望服务主机使用特定的服务单一实例时才使用 <see cref="M:XMS.Core.WCF.ManageableServiceHost.#ctor(System.Object,System.Uri[])"/> 构造函数。
            </remarks>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.#ctor(System.Type,System.Uri[])">
            <summary>
            使用服务的类型及其指定的基址初始化 <see cref="T:XMS.Core.WCF.ManageableServiceHost"/> 类的新实例。 
            </summary>
            <param name="type">承载服务的类型。</param>
            <param name="baseAddresses">Uri 类型的数组，包含承载服务的基址。</param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.#ctor(System.Object,System.Uri[])">
            <summary>
            使用服务的实例及其指定的基址初始化 <see cref="T:XMS.Core.WCF.ManageableServiceHost"/> 类的新实例。
            </summary>
            <param name="singleton">承载的服务的实例。</param>
            <param name="baseAddresses">Uri 类型的 Array，包含承载服务的基址。</param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.GetAvailableLocalIPV4">
            <summary>
            获取一个本地可用的 IP V4 地址。
            不能使用	 System.Net.Dns.GetHostAddresses(System.Net.Dns.GetHostName())[0].ToString() 来获取 IP，因为，
            在 windows server 2008 下，通过这种方式获取的 IP 为类似 fe80::8c11:dc56:65b6:d43d%19 这种格式（目前不知原因）
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.WCF.IOCBehaviorSection">
            <summary>
            IOCBehavior 对应的配置节. 
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.IOCBehaviorSection.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.IOCBehaviorSection"/> 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.IOCBehaviorSection.BehaviorType">
            <summary>
            获取 <see cref="T:XMS.Core.WCF.IOCBehavior"/> 的类型。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.IOCBehaviorSection.ShowExceptionDetailToClient">
            <summary>
            获取或设置一个值，该值指示是否应向客户端展示异常详细信息。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.IOCBehaviorSection.CreateBehavior">
            <summary>
            创建 <see cref="T:XMS.Core.WCF.IOCBehavior"/> 行为的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.WCF.IOCInstanceProvider">
            <summary>
            提供一些方法，以便能从注入容器中获取获取服务实例。 
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.IOCInstanceProvider.#ctor(System.Type)">
            <summary>
            初始化 IOCInstanceProvider 类型的新实例.
            </summary>
            <param name="serviceType">服务的类型。</param>
        </member>
        <member name="M:XMS.Core.WCF.IOCInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
            <summary>
            根据指定的 InstanceContext 对象，则返回服务对象。
            </summary>
            <param name="instanceContext">当前的 InstanceContext 对象。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.IOCInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
            <summary>
            根据指定的 InstanceContext 、Message 对象，则返回服务对象。
            </summary>
            <param name="instanceContext">当前的 InstanceContext 对象。</param>
            <param name="message">触发服务对象的创建的消息。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.IOCInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
            <summary>
            在 System.ServiceModel.InstanceContext 对象回收服务对象时调用。
            </summary>
            <param name="instanceContext">服务的实例上下文。</param>
            <param name="instance">要回收的服务对象。</param>
        </member>
        <member name="T:XMS.Core.WCF.OperationInterceptorBehavior">
            <summary>
            实现对服务端应用程序中的操作进行运行时拦截的行为。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.OperationInterceptorBehavior.ShowExceptionDetailToClient">
            <summary>
            获取一个值，该值指示是否应向客户端展示异常详细信息。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptorBehavior.#ctor(System.Boolean)">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.OperationInterceptorBehavior"/> 类的新实例。
            </summary>
            <param name="showExceptionDetailToClient">指示是否应向客户端展示异常详细信息</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptorBehavior.CreateInvoker(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.IOperationInvoker)">
            <summary>
            创建用于拦截服务端应用程序中的操作的拦截器。
            </summary>
            <param name="operationDescription">当前要拦截的方法。</param>
            <param name="invoker">用于创建操作拦截器的 <see cref="T:System.ServiceModel.Dispatcher.IOperationInvoker"/> 对象。</param>
            <returns>可用于拦截服务端应用程序中的操作的拦截器。</returns>
        </member>
        <member name="T:XMS.Core.WCF.OperationInterceptor">
            <summary>
            定义一个可用于对服务操作进行拦截的基础拦截器。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.#ctor(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.IOperationInvoker,System.Boolean)">
            <summary>
            使用指定的 <see cref="T:System.ServiceModel.Dispatcher.IOperationInvoker"/> 对象初始化 <see cref="T:XMS.Core.WCF.OperationInterceptor"/> 类的新实例。
            </summary>
            <param name="operationDescription">当前要拦截的方法。</param>
            <param name="invoker">一个 <see cref="T:System.ServiceModel.Dispatcher.IOperationInvoker"/> 对象，拦截器内部使用该对象调用目标操作。</param>
            <param name="showExceptionDetailToClient">指示是否应向客户端展示异常详细信息</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.AllocateInputs">
            <summary>
            返回参数对象的数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InitAppAgent(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            初始化应用代理。
            </summary>
            <param name="appName"></param>
            <param name="appVersion"></param>
            <param name="platform"></param>
            <param name="isMobileDevice"></param>
            <param name="manufacturer"></param>
            <param name="model"></param>
            <param name="deviceId"></param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InitUser(XMS.Core.ITicket)">
            <summary>
            初始化用户。
            </summary>
            <param name="ticket"></param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InitUser(XMS.Core.ITicket,System.Int32,System.Int32)">
            <summary>
            初始化用户。
            </summary>
            <param name="ticket"></param>
            <param name="orgId">组织 Id。</param>
            <param name="deviceId">设备 Id。</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InitUser(XMS.Core.ITicket,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            初始化用户。
            </summary>
            <param name="ticket"></param>
            <param name="orgId">组织 Id。</param>
            <param name="deviceId">设备 Id。</param>
            <param name="extendProperties">扩展属性。</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.OnInvoke(System.Object,System.ServiceModel.Description.OperationDescription,System.Object[])">
            <summary>
            在对方法进行调用前执行。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="operationDescription">要调用对象的方法的说明。</param>
            <param name="inputs">方法的输入。</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.OnInvoked(System.Object,System.ServiceModel.Description.OperationDescription,System.Object[],System.Object[],System.Object)">
            <summary>
            在对方法进行成功调用后执行，如果调用过程中发生异常，那么不会执行到该方法。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="operationDescription">要调用对象的方法的说明。</param>
            <param name="inputs">方法的输入参数。</param>
            <param name="outputs">方法的输出参数。</param>
            <param name="returnedValue">方法的返回值。</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.OnInvokeFinally(System.DateTime,System.Object,System.ServiceModel.Description.OperationDescription,System.Object[],System.Object[],System.Object,System.Exception)">
            <summary>
            在对方法调用结束后执行，不论调用过程中是否发生异常，都会执行该方法。
            </summary>
            <param name="beginTime"></param>
            <param name="instance"></param>
            <param name="operationDescription"></param>
            <param name="inputs"></param>
            <param name="outputs"></param>
            <param name="returnedValue"></param>
            <param name="exception"></param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.Invoke(System.Object,System.Object[],System.Object[]@)">
            <summary>
            从一个实例和输入对象的集合返回一个对象和输出对象的集合。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="inputs">方法的输入。</param>
            <param name="outputs">方法的输出。</param>
            <returns>方法的返回值。</returns>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
            <summary>
            异步开始方法。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="inputs">方法的输入。</param>
            <param name="callback">异步回调对象。</param>
            <param name="state">关联的状态数据。</param>
            <returns>用来完成异步调用的 System.IAsyncResult 。</returns>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
            <summary>
            异步结束方法。
            </summary>
            <param name="instance">调用的对象。</param>
            <param name="outputs">方法的输出。</param>
            <param name="result"><see cref="T:System.IAsyncResult"/> 对象。</param>
            <returns>方法的返回值。</returns>
        </member>
        <member name="P:XMS.Core.WCF.OperationInterceptor.IsSynchronous">
            <summary>
            获取一个值，该值指定调度程序是调用 <see cref="M:XMS.Core.WCF.OperationInterceptor.Invoke(System.Object,System.Object[],System.Object[]@)"/> 方法还是调用 <see cref="M:XMS.Core.WCF.OperationInterceptor.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)"/> 方法。 
            </summary>
            <value>如果调度程序调用同步操作，则为 <c>true</c>；否则为 <c>false</c>。</value>
        </member>
        <member name="P:XMS.Core.WCF.WCFServiceBase.Logger">
            <summary>
            获取日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.WCFServiceBase.Cache">
            <summary>
            获取缓存服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.WCFServiceBase.ConfigService">
            <summary>
            获取配置服务。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.ServiceInterceptorBehavior">
            <summary>
            实现一种对服务端应用程序中的整个服务的全部操作进行运行时拦截的行为。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.ServiceInterceptorBehavior.ShowExceptionDetailToClient">
            <summary>
            获取一个值，该值指示是否应向客户端展示异常详细信息。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ServiceInterceptorBehavior.#ctor(System.Boolean)">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.ServiceInterceptorBehavior"/> 类的新实例。
            </summary>
            <param name="showExceptionDetailToClient">指示是否应向客户端展示异常详细信息</param>
        </member>
        <member name="M:XMS.Core.WCF.ServiceInterceptorBehavior.CreateOperationInterceptorBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Description.OperationDescription)">
            <summary>
            创建 <see cref="T:XMS.Core.WCF.OperationInterceptorBehavior"/> 对象，该对象用于为整个服务的每一个操作创建可在运行时拦截操作的拦截器。
            </summary>
            <param name="endpoint"></param>
            <param name="operation"></param>
            <returns>可用于为整个服务的每一个操作创建可在运行时拦截操作的拦截器的 <see cref="T:XMS.Core.WCF.OperationInterceptorBehavior"/> 对象。</returns>
        </member>
        <member name="M:XMS.Core.WCF.ServiceInterceptorBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            
            </summary>
            <param name="serviceDescription"></param>
            <param name="serviceHostBase"></param>
            <param name="endpoints"></param>
            <param name="bindingParameters"></param>
        </member>
        <member name="M:XMS.Core.WCF.ServiceInterceptorBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            
            </summary>
            <param name="serviceDescription"></param>
            <param name="serviceHostBase"></param>
        </member>
        <member name="M:XMS.Core.WCF.ServiceInterceptorBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            
            </summary>
            <param name="serviceDescription"></param>
            <param name="serviceHostBase"></param>
        </member>
        <member name="T:XMS.Core.WCF.JsonContentTypeMapper">
            <summary>
            指定传入消息内容映射到的格式为 JSON，强制使用 JSON 解析消息内容，而忽略传入请求头中定义的 ContentType。
            该类型用于 WebHttpBinding 的 contentTypeMapper 属性。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.RawContentTypeMapper">
            <summary>
            指定传入消息内容映射到的格式为 Raw，强制使用流自定义解析传入消息内容，而忽略传入请求头中定义的 ContentType。
            该类型用于 WebHttpBinding 的 contentTypeMapper 属性。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.WebHttpBindingHelper">
            <summary>
            当使用 WebHttpBinding 向外部暴露 rest 风格的接口时，由于 .net 内置的 JSON 格式的局限性，需要采用 Stream 参数和返回值用来接收或返回使用我们的 json 序列化机制，
            WebHttpBindingHelper 类提供的方法可用于将传入的 stream 参数反序列化为对象或者将执行结果序列化为流。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.WebHttpBindingHelper.DeserializeContent``1(System.IO.Stream)">
            <summary>
            使用 json 反序列化流中的内容为类型参数限定的对象并返回。
            </summary>
            <typeparam name="T">目标对象类型。</typeparam>
            <param name="contentStream">包含反序列化内容的流，流中的内容为 json 格式字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:XMS.Core.WCF.WebHttpBindingHelper.SerializeContent``1(``0,XMS.Core.Json.TimeFormat)">
            <summary>
            使用指定的时间格式对指定的对象进行 json 序列化，并将序列化结果以流的形式返回。
            </summary>
            <typeparam name="T">要序列化的对象的类型。</typeparam>
            <param name="content">要序列化的对象。</param>
            <param name="timeForamt">时间属性或字段的序列化格式。</param>
            <returns>包含序列化结果的流。</returns>
        </member>
        <member name="M:XMS.Core.WCF.SyncContext.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.WCF.SyncContext.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.WCF.WorkThread.Stop">
            <summary>
            调用线程不必等到当前线程结束就可立即返回。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.WorkThread.Abort">
            <summary>
            立即强制终止当前线程。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.WorkThread.Join">
            <summary>
            阻塞调用线程直到当前线程结束
            </summary>
        </member>
        <member name="T:XMS.Core.PrimitiveHelper">
            <summary>
            常用的 Primitive 类型的扩展方法
            </summary>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.ToMilliSecondsFrom1970L(System.DateTime)">
            <summary>
            将指定时间转换为 1970 年以来的毫秒数。
            </summary>
            <param name="value">要转换的时间。</param>
            <returns>1970 年以来的毫秒数。。</returns>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.MilliSecondsFrom1970ToDateTime(System.Int64)">
            <summary>
            将指定的 1970 年以来的毫秒数转换为时间格式。
            </summary>
            <param name="millisecondsFrom1970">1970 年以来的毫秒数。</param>
            <returns>与1970 年以来的毫秒数对应的时间对象。</returns>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.MilliSecondsFrom1970ToDateTime(System.Double)">
            <summary>
            将指定的 1970 年以来的毫秒数转换为时间格式。
            </summary>
            <param name="millisecondsFrom1970">1970 年以来的毫秒数。</param>
            <returns>与1970 年以来的毫秒数对应的时间对象。</returns>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.ToShortString(System.DateTime)">
            <summary>
            to "yyyy-MM-dd"
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.ToDefaultString(System.DateTime)">
            <summary>
            to "yyyy-MM-dd hh:mm:ss"
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.ToMSString(System.DateTime)">
            <summary>
            to "yyyy-MM-dd hh:mm:ss.fff"
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.ErrorCode">
            <summary>
            提供定义业务错误码并从中生成业务异常的功能。
            BusinessErrorCode 优先从配置文件中为每一个 code 读取唯一的错误码，如果配置文件中未定义，则使用提供的默认消息创建 BusinessException。
            </summary>
        </member>
        <member name="F:XMS.Core.ErrorCode.Request_Invalid">
            <summary>
            表示请求格式无效错误码。
            </summary>
        </member>
        <member name="F:XMS.Core.ErrorCode.Request_Unauthorized">
            <summary>
            表示没有访问权限错误码。
            </summary>
        </member>
        <member name="F:XMS.Core.ErrorCode.Data_Update_Concurrency">
            <summary>
            表示数据并发错误码。
            </summary>
        </member>
        <member name="P:XMS.Core.ErrorCode.Key">
            <summary>
            获取错误码的键。
            </summary>
        </member>
        <member name="P:XMS.Core.ErrorCode.Code">
            <summary>
            获取错误码的整数表示形式。
            </summary>
        </member>
        <member name="P:XMS.Core.ErrorCode.DefaultMessage">
            <summary>
            获取错误码的默认消息提示。
            </summary>
        </member>
        <member name="M:XMS.Core.ErrorCode.#ctor(System.String,System.Int32,System.String)">
            <summary>
            初始化 BusinessErrorCode 类的新实例。
            </summary>
            <param name="code">错误码的整数表示形式。</param>
            <param name="key">键。</param>
            <param name="defaultMessage">默认错误提示。</param>
        </member>
        <member name="M:XMS.Core.ErrorCode.GetSection(System.String)">
            <summary>
            从 ErrorCodes.Config 配置文件中返回指定的 ConfigurationSection 对象。
            </summary>
            <param name="sectionName">要返回的 ErrorCodesSection 的名称。</param>
            <returns>指定的 ErrorCodesSection 对象。</returns>
        </member>
        <member name="M:XMS.Core.ErrorCode.ToException">
            <summary>
            将当前错误码转成异常。
            </summary>
            <returns>一个异常对象。</returns>
        </member>
        <member name="M:XMS.Core.ErrorCode.ToException(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            将当前错误码转成异常。
            </summary>
            <returns>一个异常对象。</returns>
        </member>
        <member name="M:XMS.Core.ErrorCode.ToException(System.Object)">
            <summary>
            将当前错误码转成异常。
            </summary>
            <returns>一个异常对象。</returns>
        </member>
        <member name="T:XMS.Core.ConfirmErrorCode">
            <summary>
            表示需要客户确认才能继续进行操作的错误码。
            </summary>
        </member>
        <member name="M:XMS.Core.ConfirmErrorCode.#ctor(System.String,System.String)">
            <summary>
            初始化 ConfirmErrorCode 类的新实例。
            </summary>
            <param name="key">键。</param>
            <param name="defaultMessage">默认错误提示。</param>
        </member>
        <member name="T:XMS.Core.BusinessException">
            <summary>
            表示在业务处理过程中引发的异常。
            </summary>
        </member>
        <member name="P:XMS.Core.BusinessException.Code">
            <summary>
            错误码。
            </summary>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.BusinessException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“业务操作的过程中发生错误。”。
            </remarks>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.BusinessException"/> 类的实例。
            </summary>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.BusinessException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.Int32)">
            <summary>
            初始化 <see cref="T:XMS.Core.BusinessException"/> 类的一个新实例。
            </summary>
            <param name="code">错误码。</param>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“业务操作的过程中发生错误。”。
            此构造函数用 code 参数初始化新实例的 Code 属性。
            </remarks>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.Int32,System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.BusinessException"/> 类的实例。
            </summary>
            <param name="code">错误码。</param>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.BusinessException"/> 类的新实例。
            </summary>
            <param name="code">错误码。</param>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.BusinessException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="M:XMS.Core.BusinessException.ToString">
            <summary>
            获取当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.FindDate(System.DateTime,System.DateTime)">
            <summary>
            查询某时间段内的节假日信息
            </summary>
            <param name="dtStartDate">开始时间</param>
            <param name="dtEndDate">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.LunarYearDays(System.Int32)">
            <summary>
            传入农历年　返回农历y年的总天数
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.leapDays(System.Int32)">
            <summary>
            返回农历y年闰月的天数
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.leapMonth(System.Int32)">
            <summary>
            返回农历y年闰哪个月1-12 , 没闰返回0
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.monthDays(System.Int32,System.Int32)">
            <summary>
            返回农历y年m月的总天数
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.solarDays(System.Int32,System.Int32)">
            <summary>
            返回公历y年某m+1月的天数
            </summary>
            <param name="y">公历年</param>
            <param name="m">公历月</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.Cyclical(System.Int32)">
            <summary>
            传入农历年返回干支, 0=甲子
            </summary>
            <param name="lunarYear"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.Animal(System.Int32)">
            <summary>　
            传入农历年返回干支, 0=鼠
            </summary>
            <param name="lunarYear"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.FormatYear(System.Int32)">
            <summary>
            格式化中文年
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.GetLunarDate(System.DateTime)">
            <summary>
            根据公历日期返回农历日期对象
            </summary>
            <param name="dtSolarDate">公历日期</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.SolarFestival(System.Int32,System.Int32)">
            <summary>
            公历日期返回公历节假日
            </summary>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.LunarFete(System.Int32,System.Int32)">
            <summary>
            农历日期返回农历节日
            </summary>
            <param name="lunarMonth"></param>
            <param name="Lunarday"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.WordFete(System.Int32,System.Int32,System.Int32)">
            <summary>
            取出是否是周几的节日
            </summary>
            <param name="month">月</param>
            <param name="num">该月第几周</param>
             <param name="week">周几</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.CaculateWeekDay(System.DateTime)">
            <summary>
            期根据年月日计算星期几方法　返回int
            </summary>
            <param name="dtDate"></param>        
            <returns>周日为0</returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.returnweekNum(System.DateTime)">
            <summary>
            计算是该月第几周
            </summary>
            <param name="dtDate"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XMS.Core.Calendar.LunarCalendar.QingMing(System.Int32)" -->
        <member name="P:XMS.Core.Calendar.ResultDate.SolarDate">
            <summary>
            公历日期
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.ResultDate.LunarDateObj">
            <summary>
            农历日期对象
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.ResultDate.SolarFestival">
            <summary>
            公历假日
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.ResultDate.LegalFestival">
            <summary>
            法定节日(包含农历和阳历假日)
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.ResultDate.LunarFestival">
            <summary>
            农历节日
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.LunarYear">
            <summary>
            农历年份
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.nLunarYear">
            <summary>
            农历年份
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.LunarMonth">
            <summary>
            农历月份
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.nLunarMonth">
            <summary>
            农历月份
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.LunarDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.nLunarDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.Festival.FestivalName">
            <summary>
            节日名称
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.Festival.IsLegal">
            <summary>
            是否法定
            </summary>
        </member>
        <member name="T:XMS.Core.AppDomainExtend">
            <summary>
            AppDomain 扩展
            </summary>
        </member>
        <member name="M:XMS.Core.AppDomainExtend.MapAbsolutePath(System.AppDomain,System.String)">
            <summary>
            以 '\\' 开头的 UNC 路径不做任何处理
            在宿主环境下，将相对路径映射到服务器上的绝对路径（以'/'开头和分隔路径层次）；
            在普通环境下，将相对路径映射为当前应用程序安装目录下的绝对路径（以'\'开头和分隔路径层次）。
            </summary>
            <param name="relativePath">要映射的相对路径。</param>
            <returns>映射后的绝对路径。</returns>
            <remarks>
            MapAbsolutePath(null) == MapAbsolutePath("") == MapAbsolutePath("  ") == MapAbsolutePath("/") == MapAbsolutePath("\\") <br/>
            MapAbsolutePath("\\conf") == MapAbsolutePath("conf")
            </remarks>
        </member>
        <member name="M:XMS.Core.AppDomainExtend.MapPhysicalPath(System.AppDomain,System.String)">
            <summary>
            在宿主环境下，将虚拟相对路径（以'/'开头和分隔路径层次）映射到服务器上的物理路径；
            在普通环境下，将物理相对路径（以'\\'开头和分隔路径层次）映射到当前应用程序安装目录下的物理路径。
            </summary>
            <param name="relativePath">要映射的物理路径或相对路径。</param>
            <returns>映射后的物理路径。</returns>
            <remarks>
            MapPhysicalPath(null) == MapPhysicalPath("") == MapPhysicalPath("  ") == MapPhysicalPath("/") == MapPhysicalPath("\\") <br/>
            MapPhysicalPath("\\conf") == MapPhysicalPath("conf")
            </remarks>
        </member>
        <member name="M:XMS.Core.AppDomainExtend.MapPhysicalPath(System.AppDomain,System.String,System.String)">
            <summary>
            根据指定的相对路径，获取其相对于当前应用程序域下某个指定的基础相对路径的物理路径。
            </summary>
            <param name="domain"></param>
            <param name="baseRelativePath"></param>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.ExceptionHelper">
            <summary>
            常用的String类的扩展方法
            </summary>
        </member>
        <member name="M:XMS.Core.ExceptionHelper.GetFriendlyMessage(System.Exception)">
            <summary>
            获取异常消息的友好表示形式，该方法仅返回异常消息的友好表示形式。
            </summary>
            <param name="exception">要获取其消息友好表示形式的异常。</param>
            <returns>异常消息的友好表示形式。</returns>
        </member>
        <member name="M:XMS.Core.ExceptionHelper.GetFriendlyToString(System.Exception)">
            <summary>
            获取异常的友好表示形式，该方法返回异常的完整友好表示形式。
            </summary>
            <param name="exception">要获取其友好表示形式的异常。</param>
            <returns>异常的友好表示形式。</returns>
        </member>
        <member name="M:XMS.Core.ExceptionHelper.GetFriendlyStackTrace(System.Exception)">
            <summary>
            获取异常的友好表示形式，该方法返回异常堆栈的完整友好表示形式。
            </summary>
            <param name="exception">要获取其友好表示形式的异常。</param>
            <returns>异常的友好表示形式。</returns>
        </member>
        <member name="T:XMS.Core.ObjectHelper">
            <summary>
            常用的 Object 类的扩展方法
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectHelper.MemberwiseCopy``1(System.Object,System.Object,System.Boolean)">
            <summary>
            浅表复制，将源对象中与目标对象同名的公共非静态字段或属性的值复制到目标对象。
            如果字段是值类型的，则对该字段执行逐位复制。 如果字段是引用类型，则复制引用但不复制引用的对象；因此，源对象及当前对象引用同一对象。
            此方法要求 source 类型必须为 TSource 或从其继承，但仅复制源对象中由 TSource 限定的部分字段或属性。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectHelper.MemberwiseCopy(System.Object,System.Object,System.Boolean)">
            <summary>
            浅表复制，将源对象中与目标对象同名的公共非静态字段或属性的值复制到目标对象。
            如果字段是值类型的，则对该字段执行逐位复制。 如果字段是引用类型，则复制引用但不复制引用的对象；因此，源对象及当前对象引用同一对象。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectHelper.CreateMemberwiseCopyDelegate(System.Type,System.Type,System.Boolean)">
            <summary>
            动态创建一个委托并返回
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.ObjectHelper.MemberwiseClone``1(``0)">
            <summary>
            浅表复制，将源对象中与目标对象同名的公共非静态字段或属性的值复制到目标对象。
            如果字段是值类型的，则对该字段执行逐位复制。 如果字段是引用类型，则复制引用但不复制引用的对象；因此，源对象及当前对象引用同一对象。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectHelper.CreateMemberwiseCloneDelegate(System.Type)">
            <summary>
            动态创建一个委托并返回
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.ObjectHelper.ConvertTo``1(System.Object,``0)">
            <summary>
            调用 Convert.ToXXX(object) 方法将指定对象转换为具有等效值的公共语言运行时类型, 如：Boolean、 SByte、 Byte、 Int16、 UInt16、 Int32、 UInt32、 Int64、 UInt64、 Single、 Double、 Decimal、 DateTime、 Char 和 String等，
            如果对象为 null 或转换过程中发生异常，则返回 defaultValue 参数指定的默认值。
            </summary>
            <typeparam name="T">目标类型。</typeparam>
            <param name="value">指定的对象。</param>
            <param name="defaultValue">默认值，如果不指定，则为目标类型的默认值。</param>
            <returns>对象转换后的值。</returns>
        </member>
        <member name="M:XMS.Core.ObjectHelper.ConvertTo``1(System.Object,System.Boolean,``0)">
            <summary>
            调用 Convert.ToXXX(object) 方法将指定对象转换为具有等效值的公共语言运行时类型, 如：Boolean、 SByte、 Byte、 Int16、 UInt16、 Int32、 UInt32、 Int64、 UInt64、 Single、 Double、 Decimal、 DateTime、 Char 和 String等，
            如果对象为 null 或转换过程中发生异常，则返回 defaultValue 参数指定的默认值。
            </summary>
            <typeparam name="T">目标类型。</typeparam>
            <param name="value">指定的对象。</param>
            <param name="throwOnError">指定在转换出错时是否抛出异常。</param>
            <param name="defaultValue">默认值，如果不指定，则为目标类型的默认值。</param>
            <returns>对象转换后的值。</returns>
        </member>
        <member name="M:XMS.Core.ObjectHelper.ConvertTo(System.Object,System.Type,System.Boolean,System.Object)">
            <summary>
            调用 Convert.ToXXX(object) 方法将指定对象转换为具有等效值的公共语言运行时类型, 如：Boolean、 SByte、 Byte、 Int16、 UInt16、 Int32、 UInt32、 Int64、 UInt64、 Single、 Double、 Decimal、 DateTime、 Char 和 String等，
            如果对象为 null 或转换过程中发生异常，则返回 defaultValue 参数指定的默认值。
            </summary>
            <param name="value">指定的对象。</param>
            <param name="targetType">目标类型。</param>
            <param name="throwOnError">指定在转换出错时是否抛出异常。</param>
            <param name="defaultValue">默认值，如果不指定，则为目标类型的默认值。</param>
            <returns>对象转换后的值。</returns>
        </member>
        <member name="T:XMS.Core.Web.HttpContextHelper">
            <summary>
            HttpContext 的常用扩展。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.BuildCookieName(System.Web.HttpContext,System.String)">
            <summary>
            创建与请求上下文相关的 Cookie 名，该 Cookie 名与 AddCookie 和 GetCookie 方法中最终使用的 Cookie 名相同。
            </summary>
            <param name="context"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.AddCookie(System.Web.HttpContext,System.String,System.Nullable{System.DateTime})">
            <summary>
            使用指定的名称从 Response 中获取或创建 Cookie，该 Cookie 的默认 Domain 为 xxx.xxx.xiaomishu.com 中的 ".xiaomishu.com"，默认Path 为 "/"，可通过该 Cookie 修改其默认 Domain 和 Path，并通过其 Value 属性为其赋值。
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
            <param name="expireTime">过期时间，null 表示临时 Cookie。</param>
            <returns>已经存在或者新创建的 Cookie。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.AddCookie(System.Web.HttpContext,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            使用指定的名称、过期时间从 Response 中获取或创建 Cookie，并使用指定的值为其赋值，该 Cookie 的默认 Domain 为 xxx.xxx.xiaomishu.com 中的 ".xiaomishu.com"，默认Path 为 "/"，可通过该 Cookie 修改其默认 Domain 和 Path，并通过其 Value 属性为其赋值。
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
            <param name="value">值。</param>
            <param name="expireTime">过期时间，null 表示临时 Cookie。</param>
            <returns>已经存在或者新创建的 Cookie。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.AddCookie(System.Web.HttpContext,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            使用指定的名称、过期时间、域名、路径从 Response 中获取或创建 Cookie，并使用指定的值为其赋值。
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
            <param name="value">值。</param>
            <param name="expireTime">过期时间，null 表示临时 Cookie。</param>
            <param name="domain">域名。</param>
            <param name="path">路径。</param>
            <returns>已经存在或者新创建的 Cookie。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.AddCookie(System.Web.HttpContext,System.String,System.Collections.Specialized.NameValueCollection,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            使用指定的名称、过期时间、域名、路径从 Response 中获取或创建 Cookie，并使用指定的值为其赋值。
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
            <param name="values">值。</param>
            <param name="expireTime">过期时间，null 表示临时 Cookie。</param>
            <param name="domain">域名。</param>
            <param name="path">路径。</param>
            <returns>已经存在或者新创建的 Cookie。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.GetCookie(System.Web.HttpContext,System.String)">
            <summary>
            获取请求上下文相关的 Cookie
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
            <returns>可用的 Cookie 对象。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.DeleteCookie(System.Web.HttpContext,System.String)">
            <summary>
            删除当前上下文中指定名称的 Cookie。
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.TryGetRequest(System.Web.HttpContext)">
            <summary>
            .net2.0 开始 HttpContext.Current.Request 和 HttpContext.Current.Response 在 IIS7.0 的某些情况下(比如 Application_Start 事件中)访问，
            会抛出 HttpException 异常，我们的某些依赖于 HttpContext.Current.Request 的底层组件，比如 RunContext、AppAgent 等，在这种情况下，
            直接访问 HttpContext.Current.Request 不能正常运行，因此，在这些组件里，必须通过下面的 TryGetRequest 和 TryGetResponse 方法进行安全的访问
            </summary>
            <param name="context">当前请求上下文。</param>
            <returns>Http 请求。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.TryGetResponse(System.Web.HttpContext)">
            <summary>
            .net2.0 开始 HttpContext.Current.Request 和 HttpContext.Current.Response 在 IIS7.0 的某些情况下(比如 Application_Start 事件中)访问，
            会抛出 HttpException 异常，我们的某些依赖于 HttpContext.Current.Request 的底层组件，比如 RunContext、AppAgent 等，在这种情况下，
            直接访问 HttpContext.Current.Request 不能正常运行，因此，在这些组件里，必须通过下面的 TryGetRequest 和 TryGetResponse 方法进行安全的访问
            </summary>
            <param name="context">当前请求上下文。</param>
            <returns>Http 响应。</returns>
        </member>
        <member name="T:XMS.Core.Web.ResponseHelper">
            <summary>
            Response 类的常用扩展
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ResponseHelper.Redirect(System.Web.HttpResponse,System.String,System.Int32,System.Boolean,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            301 或 302 重定向。
            </summary>
            <param name="response">用来进行重定向的 HttpResponse 对象。</param>
            <param name="url">重定向的目标 url。</param>
            <param name="code"></param>
            <param name="enableClientCache"></param>
            <param name="cacheExpireTime"></param>
            <param name="endResponse"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Web.RequestHelper">
            <summary>
            Request类的常用扩展
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetIP(System.Web.HttpRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetSubDomain(System.Web.HttpRequest)">
            <summary>
            获取指定请求的子级域名， 如：a.b.57.cn 返回 a.b；a.57.cn 返回 a。
            </summary>
            <param name="request">当前请求。</param>
            <returns>子级域名。</returns>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetMainDomain(System.Web.HttpRequest)">
            <summary>
            获取指定请求的主域名， 如：a.b.57.cn 返回 57.cn,www.xiaomishu.com 返回 xiaomishu.com。
            </summary>
            <param name="request">当前请求。</param>
            <returns>主域名。</returns>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetValue(System.Web.HttpRequest,System.String)">
            <summary>
            接收参数,返回字符型
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetIntByParams(System.String)">
            <summary>
            接收参数,返回整型
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetStringByParams(System.String)">
            <summary>
            接收参数,返回字符型
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.ProcessRequest(System.String)">
            <summary>
            处理非法字符
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetCheckBoxValue(System.String)">
            <summary>
            接收参数,正则过滤特殊字符,并返回CheckBox值
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetDoubleByParams(System.String)">
            <summary>
            接收参数,返回double型
            </summary>
            <param name="sParam"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetDecimalByParams(System.String)">
            <summary>
            接收参数,返回decimal型
            </summary>
            <param name="sParam"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.Alert(System.String)">
            <summary>
            提交返回信息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.Success(System.String)">
            <summary>
            提交返回成功
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.Fail(System.String)">
            <summary>
            提交返回成功
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.SendGoto(System.String,System.String)">
            <summary>
            提交返回信息,跳转到指定页
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.Reload(System.String)">
            <summary>
            提交返回信息,刷新本页
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.Write(System.String)">
            <summary>
            直接输出json字符窜
            </summary>
            <param name="sJson"></param>
        </member>
        <member name="T:XMS.Core.Web.CookiesHelper">
            <summary>
            CookiesHelper
            </summary>
        </member>
        <member name="M:XMS.Core.Web.CookiesHelper.WriteCookie(System.String,System.Collections.Specialized.NameValueCollection,System.Nullable{System.DateTime},System.String)">
            <summary>
            write Cookies
            </summary>
            <param name="CookieName">cookie name</param>
            <param name="Nvc">NameValueCollection</param>
            <param name="datetime">cookie date</param>
            <param name="Domain">Domain</param>
            <returns>bool</returns>
        </member>
        <member name="M:XMS.Core.Web.CookiesHelper.WriteCookie(System.String,System.Collections.Specialized.NameValueCollection,System.Nullable{System.DateTime})">
            <summary>
            write cookie value
            </summary>
            <param name="CookieName">cookie name</param>
            <param name="Nvc">NameValueCollection</param>
            <param name="days">cookie date</param>
            <returns>bool</returns>
        </member>
        <member name="M:XMS.Core.Web.CookiesHelper.UpdateCookie(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            update cookie
            </summary>
            <param name="CookieName">cookie name</param>
            <param name="Nvc">NameValueCollection</param>
            <returns>bool</returns>
        </member>
        <member name="M:XMS.Core.Web.CookiesHelper.GetCookie(System.String)">
            <summary>
            get cookie 
            </summary>
            <param name="CookieName">cookie name</param>
            <returns>NameValueCollection</returns>
        </member>
        <member name="M:XMS.Core.Web.CookiesHelper.DeleteCookie(System.String)">
            <summary>
            delete cookie
            </summary>
            <param name="CookieName"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Web.ImageHelper">
            <summary>
            图片助手类。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ImageHelper.CheckFileAndReturnExtension(System.IO.Stream)">
            <summary>
            检查指定的流是否图片并返回其扩展名。
            </summary>
            <param name="stream">要检查的流。</param>
            <returns>图片的扩展名。</returns>
        </member>
        <member name="T:XMS.Core.Web.JsonHelper">
            <summary>
            JSON 助手类
            </summary>
        </member>
        <member name="M:XMS.Core.Web.JsonHelper.ConvertJsonStringToObject``1(System.String)">
            <summary>
            将 JSON 字符串转换为指定类型的对象。
            </summary>
            <typeparam name="T">JSON 字符串表示的类型。</typeparam>
            <param name="strJson">要转换的 JSON 字符串。</param>
            <returns>JSON 字符串转换后的对象。</returns>
        </member>
        <member name="M:XMS.Core.Web.JsonHelper.ConvertJsonTypeToObject``1(System.Object)">
            <summary>
            通过 JSON 序列化机制，将给定对象转换为指定类型对象。
            </summary>
            <param name="objJson">要转换的原始对象。</param>
            <returns>指定类型的新对象。</returns>
        </member>
        <member name="M:XMS.Core.Web.JsonHelper.ConvertObjectToJsonString(System.Object)">
            <summary>
            将指定对象转换为 JSON 字符串表示形式。
            </summary>
            <param name="obj">要转换的对象。</param>
            <returns>指定对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="T:XMS.Core.Web.MapHelper">
            <summary>
            地图助手类。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.MapHelper.GetGoogleSmartyAddress(System.String)">
            <summary>
            得到一个在GOOGLE地图可识别的地址
            </summary>
            <param name="args">上海市xx路xx号</param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Web.PagerHelper">
            <summary>
            网站通用分页类
            </summary>
        </member>
        <member name="P:XMS.Core.Web.PagerHelper.CurrentPage">
            <summary>
            获取Page参数，当前页
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.PagerHelper.GetPager(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            生成分页的HTML代码
            </summary>
            <param name="nTotal">总条数</param>
            <param name="nCurrentPage">当前页</param>
            <param name="nPageSize">每页数</param>
            <param name="sUrlBase">地址</param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Web.ResourceHelper">
            <summary>
            资源助手类
            </summary>
        </member>
        <member name="P:XMS.Core.Web.ResourceHelper.UploadSiteUrl">
            <summary>
            图片站点Url
            </summary>
        </member>
        <member name="P:XMS.Core.Web.ResourceHelper.ResourceSiteUrl">
            <summary>
            静态资源站点Url
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ResourceHelper.GetFileAbsoluteUrl(System.String,System.Int32)">
            <summary>
            获取文件绝对地址
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ResourceHelper.IncludeFile(System.String,System.Int32)">
            <summary>
            加载文件
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ResourceHelper.IncludeFile(System.String,System.Int32,System.Boolean,XMS.Core.Web.ResourceHelper.EnumIncludeFileHost)">
            <summary>
            取文件版本
            </summary>
            <param name="sFileName">文件名（含相对路径）</param>
            <param name="nVersionType">版本添加类型 0:test.v2011.gif 1:test.gif?v=2011</param>
            <param name="bAddTag">是否自动添加父标签</param>
            <param name="emType">文件服务器Host</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ResourceHelper.GetUploadPicPath(System.String,System.String)">
            <summary>
            取文件服务器各种尺寸的图片地址
            </summary>
            <param name="sPath">文件路径</param>
            <param name="sSize">文件目录</param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Web.StringHelper">
            <summary>
            String类常用扩
            </summary>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.LostHTML(System.String)">
            <summary>
            过滤字符串中的html代码（包括换行、回车）
            </summary>
            <param name="Str"></param>
            <returns>返回过滤之后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.GetSubString(System.String,System.Int32,System.Boolean)">
            <summary>
            截取字符串函数
            </summary>
            <param name="Str">所要截取的字符串</param>
            <param name="Num">截取字符串的长度</param>
            <param name="RemoveHtml">是否移除Html字符</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.GetSubString(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            截取字符串函数
            </summary>
            <param name="Str">所要截取的字符串</param>
            <param name="Num">截取字符串的长度</param>
            <param name="sAppend">要插入的字符串</param>
            <param name="RemoveHtml">是否移除Html字符</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.EncryptString(System.String)">
            <summary>
            字符串加密  进行位移操作
            </summary>
            <param name="Input">待加密数据</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.NcyString(System.String)">
            <summary>
            字符串解密
            </summary>
            <param name="Input">待解密数据</param>
            <returns>解密成功后的数据</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.EncryptString(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串，失败返空字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.DecryptString(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返空字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.NumChar(System.String)">
            <summary>
            检测含中文字符串实际长度
            </summary>
            <param name="Input">待检测的字符串</param>
            <returns>返回正整数</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.HidenLastIp(System.String)">
            <summary>
            隐藏IP地址最后一位用*号代替
            </summary>
            <param name="Ipaddress">IP地址:192.168.34.23</param>
            <returns>返回 :192.168.34.*</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.GetRandomPassword(System.Int32)">
            <summary>
            获取随机数
            </summary>
            <param name="length">随机数长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.md5(System.String,System.Int32)">
            <summary>
            MD5加密
            </summary>
            <param name="str">加密字符</param>
            <param name="code">加密位数16/32</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.sRndNum(System.Int32)">
            <summary>
            按当前日期和时间生成随机数
            </summary>
            <param name="Num">附加随机数长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.RndNum(System.Int32)">
            <summary>
            生成0-9随机数
            </summary>
            <param name="VcodeNum">生成长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.RandomNUMSTR(System.Int32)">
            <summary>
            获取一个由数字和26个小写字母组成的指定长度的随即字符串
            </summary>
            <param name="intLong">指定长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.RndNumRNG(System.Int32)">
            <summary>
            通过RNGCryptoServiceProvider 生成随机数 0-9 
            </summary>
            <param name="length">随机数长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.FillZero(System.String,System.Int32)">
            <summary>
            按字符串位数补0
            </summary>
            <param name="CharTxt">字符串</param>
            <param name="CharLen">字符长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Check_Char_Is(System.String,System.String)">
            <summary>
            检测当前字符是否在以,号分开的字符串中(dd不在xx,sss,xaf,fdsf中)
            </summary>
            <param name="TempChar">需检测字符</param>
            <param name="TempStr">待检测字符串</param>
            <returns>存在true,不存在false</returns>
        </member>
        <member name="P:XMS.Core.Web.StringHelper.GetGUIDHashCode">
            <summary>
            获取一个GUID的HashCode
            </summary>
        </member>
        <member name="P:XMS.Core.Web.StringHelper.GetGUID">
            <summary>
            获取一个GUID字符串
            </summary>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.DangerTagsFilter(System.String)">
            <summary>
            危险标签清理
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Escape(System.String)">
            <summary>
            对字符串进行兼容javascript脚本语言的ecsape编码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.getLen(System.String)">
            <summary>
            返回字符串的真实长度，一个汉字字符相当于两个单位长度(使用Encoding类)
            </summary>
            <param name="str">指定字符串</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.ReplacePro(System.String,System.String,System.String,System.Int32)">
            <summary>
            高效率字符串替换 可控制替换次数
            </summary>
            <param name="original">原字符串</param>
            <param name="pattern">包含该关键词的字符串将被替换</param>
            <param name="replacement">关键词替换为？</param>
            <param name="replaceCount">替换次数 0为全部替换</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.CaseInsensitiveReplace(System.String,System.String,System.String)">
            <summary>
            替换字符串(忽略大小写)
            </summary>
            <param name="input">要进行替换的内容</param>
            <param name="oldValue">旧字符串</param>
            <param name="newValue">新字符串</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            替换首次出现的字符串
            </summary>
            <param name="input">要进行替换的内容</param>
            <param name="oldValue">旧字符串</param>
            <param name="newValue">新字符串</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            替换最后一次出现的字符串
            </summary>
            <param name="input">要进行替换的内容</param>
            <param name="oldValue">旧字符串</param>
            <param name="newValue">新字符串</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.FilterWords(System.String,System.String[])">
            <summary>
            根据词组过虑字符串(忽略大小写)
            </summary>
            <param name="input">要进行过虑的内容</param>
            <param name="filterWords">要过虑的词组</param>
            <returns>过虑后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.FilterWords(System.String,System.Char,System.String[])">
            <summary>
            根据词组过虑字符串(忽略大小写)
            </summary>
            <param name="input">要进行过虑的内容</param>
            <param name="mask">字符掩码</param>
            <param name="filterWords">要过虑的词组</param>
            <returns>过虑后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Base64StringEncode(System.String)">
            <summary>
            对字符串进行base64编码
            </summary>
            <param name="input">字符串</param>
            <returns>base64编码串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Base64StringDecode(System.String)">
            <summary>
            对base64字符串进行反编码
            </summary>
            <param name="input">base64编码串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Reverse(System.String)">
            <summary>
            字符串反转
            </summary>
            <param name="input">要进行反转的字符串</param>
            <returns>反转后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.SentenceCase(System.String)">
            <summary>
            转成首字母大字形式
            </summary>
            <param name="input">要进行转换的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.GetInArrayID(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串在指定字符串数组中的位置
            </summary>
            <param name="strSearch">字符串</param>
            <param name="stringArray">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>字符串在指定字符串数组中的位置, 如不存在则返回-1</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Spaces(System.Int32)">
            <summary>
            生成指定数量的html空格符号
            </summary>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.ConvertToInt(System.Object)">
            <summary>
            将对像转换为整型。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.ConvertToLong(System.Object)">
            <summary>
            将对像转换为长整型。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.HtmlToString(System.String)">
            <summary>
            将HTML字符变成普通字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Web.ValidateHelper">
            <summary>
            ValidateHelper
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsInteger(System.String)">
            <summary>
            检测是否整数型数据
            </summary>
            <param name="Num">待检查数据</param>
            <returns>True or False</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsInteger(System.String,System.Boolean)">
            <summary>
            是否全是正整数
            </summary>
            <param name="Input">待检查数据</param>
            <returns>True or False</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsDecimal(System.String)">
            <summary>
            判断是否是Decimal类型
            </summary>
            <param name="TBstr0">判断数据字符</param>
            <returns>true是false否</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsDate(System.String)">
            <summary>
            判断是否为日期类型 （try…catch 效率低）
            </summary>
            <param name="s">待检查数据</param>
            <returns>True or False</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsValidEmail(System.String)">
            <summary>
            检测是否为有效邮件地址格式
            </summary>
            <param name="strIn">输入邮件地址</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsValidURL(System.String)">
            <summary>
            判断字符串是否为有效的URL地址
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.ValidateIPAddress(System.String)">
            <summary>
            判断是否合法 IP
            </summary>
            <param name="strIP"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsNumberId(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的
            </summary>
            <param name="_value">需验证的字符串。。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsNumber(System.String)">
            <summary>
            判断是否是数字，包括小数和整数。
            </summary>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsLetterOrNumber(System.String)">
            <summary>
            检查一个字符串是否是纯字母和数字构成的
            </summary>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式
            </summary>
            <param name="_express">正则表达式的内容。</param>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsImgFilename(System.String)">
            <summary>
            判断文件名是否为浏览器可以直接显示的图片文件名
            </summary>
            <param name="filename">文件名</param>
            <returns>是否可以直接显示</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsTime(System.String)">
            <summary>
            判断是否为时间格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsPost">
            <summary>
            判断当前页面是否接收到了Post请求
            </summary>
            <returns>是否接收到了Post请求</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsGet">
            <summary>
            判断当前页面是否接收到了Get请求
            </summary>
            <returns>是否接收到了Get请求</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsBrowserGet">
            <summary>
            判断当前访问是否来自浏览器软件
            </summary>
            <returns>当前访问是否来自浏览器软件</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsSearchEnginesGet">
            <summary>
            判断是否来自搜索引擎链接
            </summary>
            <returns>是否来自搜索引擎链接</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsMobile(System.String)">
            <summary>
            判断是否是有效的手机号码
            </summary>
            <param name="sMobile"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsPhone(System.String)">
            <summary>
            判断是否是有效的电话号码
            </summary>
            <param name="sPhone"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Web.WebRequestHelper">
            <summary>
            Web 请求帮助类。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.WebRequestHelper.GetWebDataString(System.String,System.Int32,System.Boolean,System.Net.CookieContainer)">
            <summary>
            
            </summary>
            <param name="sUrl"></param>
            <param name="nTimeOut"></param>
            <param name="bIsUseGzip"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XMS.Core.Web.WebRequestHelper.GetWebData(System.String,System.Int32,System.Boolean,System.Net.CookieContainer)" -->
        <member name="M:XMS.Core.Container.HasComponent(System.Type)">
            <summary>
            判断容器中是否存在指定类型的服务。
            </summary>
            <param name="service">要判断的服务的类型。</param>
            <returns>如果容器中存在指定类型的服务，返回<c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Container.HasComponent(System.String)">
            <summary>
            判断容器中是否存在指定键的服务。
            </summary>
            <param name="key">要判断的服务的键。</param>
            <returns>如果容器中存在指定键的服务，返回<c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Container.Resolve``1">
            <summary>
            从容器中获取一个指定类型服务的实例，该类型以强类型的方式返回。
            </summary>
            <typeparam name="T">要获取服务实例的类型。</typeparam>
            <returns></returns>
            <example>
            ILogService log = Container.Instance.GetService&lt;ILogService&gt;();
            </example>
        </member>
        <member name="M:XMS.Core.Container.Resolve``1(System.String)">
            <summary>
            从容器中获取一个指定类型服务的实例，该类型以强类型的方式返回。
            </summary>
            <param name="key">键</param>
            <typeparam name="T">要获取服务实例的类型。</typeparam>
            <returns></returns>
            <example>
            ILogService log = Container.Instance.GetService&lt;ILogService&gt;();
            </example>
        </member>
        <member name="M:XMS.Core.Container.Resolve(System.Type)">
            <summary>
            
            </summary>
            <param name="service">要获取服务实例的类型。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Container.Register(System.Type)">
            <summary>
            向容器中注册服务
            </summary>
            <param name="serviceType"></param>
        </member>
        <member name="M:XMS.Core.Container.Register(System.Type,System.Type)">
            <summary>
            向容器中注册服务
            </summary>
            <param name="serviceType"></param>
            <param name="implementionType"></param>
        </member>
        <member name="M:XMS.Core.Container.Close">
            <summary>
            关闭容器
            </summary>
        </member>
        <member name="P:XMS.Core.Container.LogService">
            <summary>
            获取容器中注入的日志服务的实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Container.CacheService">
            <summary>
            获取容器中注入的缓存服务的实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Container.ConfigService">
            <summary>
            获取容器中注入的配置服务的实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Container.MessageService">
            <summary>
            获取容器中注入的配置服务的实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Container.ResourceService">
            <summary>
            获取容器中注入的资源服务的实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Container.EntityModelProvider">
            <summary>
            获取当前实体模型提供程序。
            </summary>
        </member>
        <member name="P:XMS.Core.Container.ClusterService">
            <summary>
            获取当前系群服务
            通过Start来初始化集群服务
            </summary>
        </member>
        <member name="P:XMS.Core.Container.SerialNumberService">
            <summary>
            获取序列号服务
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryData.Dictionary">
            <summary>
            获取当前字典数据相关的字典。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryData.BitwiseValue">
            <summary>
            获取当前字典中所有选中的字典项的位运算值。
            </summary>
            <remarks>
            只有当相关字典支持位运算时才返回位运算值，否则永远返回 0；
            </remarks>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryData.DataItems">
            <summary>
            获取当前字典直接包含的字典数据项的集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryData.All">
            <summary>
            获取当前字典中包含的所有字典数据项的集合。
            集合中的元素按照字典项的 SortNo 属性指定的顺序有小到大逐级排放，最终如下所示：
            	第一级序号	第二级序号
            	1
            				1
            				2
            				3
            	2
            				1
            				2
            	3
            				1
            </summary>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.#ctor(XMS.Core.Dictionary.DataModel.DictionaryData,XMS.Core.Dictionary.DataModel.DictionaryDataItem,XMS.Core.Dictionary.DictionaryItemCollection)">
            <summary>
            用指定的列表初始化 DictionaryItemCollection 。
            </summary>
            <param name="items">用来初始化 DictionaryItemCollection 的列表。</param>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.Contains(XMS.Core.Dictionary.DataModel.DictionaryDataItem)">
            <summary>
            确定当前字典数据项集合中是否包含特定编码的字典数据项。 
            </summary>
            <param name="item">要在字典数据项集合中定位的元素。</param>
            <returns>如果字典数据项集合中包含指定的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.ContainsCode(System.String)">
            <summary>
            确定当前字典数据项集合中是否包含特定编码的字典数据项。 
            </summary>
            <param name="code">要在字典数据项集合中定位的编码。</param>
            <returns>如果字典数据项集合中包含具有指定编码的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.ContainsValue(System.Int64)">
            <summary>
            确定当前字典数据项集合中是否包含特定值的字典数据项。 
            </summary>
            <param name="code">要在字典数据项集合中定位的值。</param>
            <returns>如果字典数据项集合中包含具有指定值的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.GetItemByValue(System.Int64)">
            <summary>
            获取指定字典数据项值关联的字典数据项。
            </summary>
            <param name="value">要获取的字典数据项的值。</param>
            <returns>与指定值关联的字典数据项，如果找不到关联的字典数据项，则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.GetItemByCode(System.String)">
            <summary>
            获取指定字典数据项编码关联的字典数据项。
            </summary>
            <param name="value">要获取的字典数据项的编码。</param>
            <returns>与指定编码关联的字典数据项，如果找不到关联的字典数据项，则返回 null。</returns>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.Item(System.Int32)">
            <summary>
            获取指定索引处的字典数据项。
            </summary>
            <param name="index">要获得字典数据项从零开始的索引。</param>
            <returns>指定索引处的字典数据项。如果 index 超出范围，既小于0 或者大于等于集合的 Count 属性，则返回 null。</returns>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.DictionaryItem">
            <summary>
            获取当前字典数据项对应的字典项。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.Selected">
            <summary>
            获取或者设置当前字典数据项的选中状态。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.Description">
            <summary>
            获取或设置当前字典数据的备注信息。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.Parent">
            <summary>
            获取当前字典项所属的父级字典数据项。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.Children">
            <summary>
            获取当前字典项中包含的子级字典数据项集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItem.#ctor(XMS.Core.Dictionary.DictionaryItem)">
            <summary>
            初始化 DictionaryDataItem 的新实例。
            </summary>
            <param name="dictionaryItem"></param>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.ExtendProperties">
            <summary>
            获取当前字典数据项的扩展属性。
            </summary>
            <remarks>
            只有当字典数据项是由绑定实体模型对象生成的情况下， ExtendProperties 中才包含有该实体模型对象的扩展属性数据，其它情况下，该属性集合总是为空（即集合数量为0）。
            因此，在使用 ExtendProperties 时，首先要使用其 Contains 方法判断要取值的扩展属性是否存在。
            </remarks>
        </member>
        <member name="T:XMS.Core.Dictionary.DefaultDictionaryService">
            <summary>
            字典服务的默认实现。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DefaultDictionaryService.ConfigService">
            <summary>
            基础配置服务
            </summary>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.GetDictionary(System.Int32,System.String)">
            <summary>
            根据指定的字典名称获取一个字典。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">要获取的字典的名称。</param>
            <returns>一个包含字典数据的字典对象。</returns>
            <exception cref="T:System.ArgumentException">dictionaryName 为空字符串或者为 null。</exception>
            <exception cref="T:System.ArgumentException">未找到指定名称的字典。</exception>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.GetRemoteDictionary(System.Int32,System.String)">
            <summary>
            获取远程字典对象
            </summary>
            <param name="cityId"></param>
            <param name="dictionaryName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateDictionaryData(System.Int32,System.String)">
            <summary>
            使用指定的字典名称创建一个字典数据对象，该字典数据对象中的数据项的选中状态为默认状态。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateSingleSelectDictionaryData(System.Int32,System.String,System.Int64)">
            <summary>
            解析指定的字典名称、选定值创建并返回字典数据对象，支持字典单选的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="selectedValue">选定值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateMultieSelectDictionaryDataWithBitwise(System.Int32,System.String,System.Int64)">
            <summary>
            解析指定的字典名称、位运算值创建并返回字典数据对象，支持通过位运算的复选但不需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="bitwiseValue">位运算后的值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateMultieSelectDictionaryDataWithBitwise(System.Int32,System.String,System.Int64,System.Collections.Generic.List{System.Object},System.String,System.String)">
            <summary>
            解析指定的字典名称、位运算值、数据项集合、值字段名称、备注字段名称创建并返回字典数据对象，支持字典通过位运算的复选且需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="bitwiseValue">位运算值</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateMultieSelectDictionaryData(System.Int32,System.String,System.Collections.Generic.List{System.Object},System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持普通（非位运算）的复选且备注信息（如果需要的话）在不选中的状态下不进行持久化的情况。
            这种情况下，dataItems 集合中的每一项对应的字典数据项都被认为是选中状态。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateMultieSelectDictionaryData(System.Int32,System.String,System.Collections.Generic.List{System.Object},System.String,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持非位运算的复选且备注信息（如果需要的话）在不选中的状态下仍然能够持久化的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <param name="selectedFieldName">选中字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.ResolveSingleSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@)">
            <summary>
            解析指定的数据字典对象并输出其选定的值，支持字典单选的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="selectedValue">选定值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.ResolveMultieSelectDictionaryDataWithBitwise(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@)">
            <summary>
            解析指定的字典名称、位运算值创建并输出其位运算后的，支持通过位运算的复选但不需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="bitwiseValue">位运算后的值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.ResolveMultieSelectDictionaryDataWithBitwise(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@,System.Type,System.String,System.String)">
            <summary>
            解析指定的字典名称、位运算值、数据项集合、值字段名称、备注字段名称，输出其位运算后的值并返回明细项集合，支持字典通过位运算的复选且需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="bitwiseValue">位运算值</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>明细项集合</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.ResolveMultieSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Type,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称，输出其位运算后的值并返回明细项集合，支持普通（非位运算）的复选且备注信息（如果需要的话）在不选中的状态下不进行持久化的情况。
            这种情况下，dataItems 集合中的每一项对应的字典数据项都被认为是选中状态。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.ResolveMultieSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Type,System.String,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持非位运算的复选且备注信息（如果需要的话）在不选中的状态下仍然能够持久化的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <param name="selectedFieldName">选中字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="T:XMS.Core.Dictionary.ItemValueDataType">
            <summary>
            表示字典中存储的字典项的数据类型，其枚举值与 .Net、Sql Server 中的数据类型对应如下：
            	枚举值		.Net类型		SqlServer类型	范围				说明
            	Boolean		Boolean		bit				0 或 1  		取值为 1、0 或 NULL 的整数数据类型 
            	Byte		Byte		tinyint			0 到 255 		无符号8位整数 
            	Int16		Int16		smallint		-2^15 到 2^15	有符号16位整数
            	Int			Int32		int				-2^31 到 2^31 	有符号32位整数
            	Int64		Int64		bigint			-2^63 到 2^63 	有符号64位整数
            </summary>
        </member>
        <member name="T:XMS.Core.Dictionary.Dictionary">
            <summary>
            表示一个字典对象。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.Name">
            <summary>
            获取字典的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.Caption">
            <summary>
            获取字典的标题
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.RaiseBitwise">
            <summary>
            获取一个值，该值指示当前字典中存储的项的值是否支持位运算，默认为 false。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.ItemValueDataType">
            <summary>
            获取字典中存储的字典项的值的类型，默认为 Int32。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.Description">
            <summary>
            获取当前字典的说明。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.Items">
            <summary>
            获取当前字典直接包含的字典项的集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.All">
            <summary>
            获取当前字典中包含的所有字典项的集合。
            集合中的元素按照 SortNo 属性指定的顺序有小到大逐级排放，最终如下所示：
            	第一级序号	第二级序号
            	1
            				1
            				2
            				3
            	2
            				1
            				2
            	3
            				1
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.LevelsCount">
            <summary>
            获取当前字典支持的层级数量。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Value">
            <summary>
            获取或设置当前字典项的值。
            </summary>
            <remarks>
            同一个字典中，字典项的值是唯一的。
            字典项的值是系统中引用字典时的实际存储数据。
            </remarks>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Code">
            <summary>
            获取或设置当前字典项的编码。
            </summary>
            <remarks>
            通常在字典数据定义中会为每个数据项定义一个编码。
            </remarks>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Caption">
            <summary>
            获取或设置当前字典项的标题。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.SortNo">
            <summary>
            获取或设置字典项在所属字典项树结构层级中的排序编号。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.RequireDescription">
            <summary>
            是否需要描述。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Parent">
            <summary>
            获取当前字典项所属的父级字典项。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Children">
            <summary>
            获取当前字典项中包含的子级字典项集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Level">
            <summary>
            获取当前字典项的级别
            </summary>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.#ctor(System.Collections.Generic.List{XMS.Core.Dictionary.DictionaryItem})">
            <summary>
            用指定的列表初始化 DictionaryItemCollection 。
            </summary>
            <param name="items">用来初始化 DictionaryItemCollection 的列表。</param>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.Contains(XMS.Core.Dictionary.DictionaryItem)">
            <summary>
            确定当前字典项集合中是否包含特定编码的字典项。 
            </summary>
            <param name="item">要在字典项集合中定位的元素。</param>
            <returns>如果字典项集合中包含指定的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.ContainsCode(System.String)">
            <summary>
            确定当前字典项集合中是否包含特定编码的字典项。 
            </summary>
            <param name="code">要在字典项集合中定位的编码。</param>
            <returns>如果字典项集合中包含具有指定编码的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.ContainsValue(System.Int64)">
            <summary>
            确定当前字典项集合中是否包含特定值的字典项。 
            </summary>
            <param name="code">要在字典项集合中定位的值。</param>
            <returns>如果字典项集合中包含具有指定值的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.GetItemByValue(System.Int64)">
            <summary>
            获取指定字典项值关联的字典项。
            </summary>
            <param name="value">要获取的字典项的值。</param>
            <returns>与指定值关联的字典项，如果找不到关联的字典项，则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.GetItemByCode(System.String)">
            <summary>
            获取指定字典项编码关联的字典项。
            </summary>
            <param name="value">要获取的字典项的编码。</param>
            <returns>与指定编码关联的字典项，如果找不到关联的字典项，则返回 null。</returns>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItemCollection.Item(System.Int32)">
            <summary>
            获取指定索引处的字典项。
            </summary>
            <param name="index">要获得字典项从零开始的索引。</param>
            <returns>指定索引处的字典项。如果 index 超出范围，既小于0 或者大于等于集合的 Count 属性，则返回 null。</returns>
        </member>
        <member name="T:XMS.Core.Dictionary.IDictionaryService">
            <summary>
            定义一组可用于访问字典数据的接口。
            </summary>
            <remarks>
            定义字典注意事项：
            	1.字典项的值必须在其 ItemValueDataType 对应的数据类型限定的范围之内（参见 ItemValueDataType 中的说明）；
            	2.字典项对应的实体模型的类型必须与 ItemValueDataType 保持一致。
            </remarks>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.GetDictionary(System.Int32,System.String)">
            <summary>
            根据指定的字典名称获取一个字典。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">要获取的字典的名称。</param>
            <returns>一个包含字典数据的字典对象。</returns>
            <exception cref="T:System.ArgumentException">dictionaryName 为空字符串或者为 null。</exception>
            <exception cref="T:System.ArgumentException">未找到指定名称的字典。</exception>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateDictionaryData(System.Int32,System.String)">
            <summary>
            使用指定的字典名称创建字典数据对象。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateSingleSelectDictionaryData(System.Int32,System.String,System.Int64)">
            <summary>
            解析指定的字典名称、选定值创建并返回字典数据对象，支持字典单选的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="selectedValue">选定值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateMultieSelectDictionaryDataWithBitwise(System.Int32,System.String,System.Int64)">
            <summary>
            解析指定的字典名称、位运算值创建并返回字典数据对象，支持通过位运算的复选但不需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="bitwiseValue">位运算后的值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateMultieSelectDictionaryDataWithBitwise(System.Int32,System.String,System.Int64,System.Collections.Generic.List{System.Object},System.String,System.String)">
            <summary>
            解析指定的字典名称、位运算值、数据项集合、值字段名称、备注字段名称创建并返回字典数据对象，支持字典通过位运算的复选且需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="bitwiseValue">位运算值</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateMultieSelectDictionaryData(System.Int32,System.String,System.Collections.Generic.List{System.Object},System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持普通（非位运算）的复选且备注信息（如果需要的话）在不选中的状态下不进行持久化的情况。
            这种情况下，dataItems 集合中的每一项对应的字典数据项都被认为是选中状态。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateMultieSelectDictionaryData(System.Int32,System.String,System.Collections.Generic.List{System.Object},System.String,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持非位运算的复选且备注信息（如果需要的话）在不选中的状态下仍然能够持久化的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <param name="selectedFieldName">选中字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.ResolveSingleSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@)">
            <summary>
            解析指定的数据字典对象并输出其选定的值，支持字典单选的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="selectedValue">选定值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.ResolveMultieSelectDictionaryDataWithBitwise(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@)">
            <summary>
            解析指定的字典名称、位运算值创建并输出其位运算后的，支持通过位运算的复选但不需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="bitwiseValue">位运算后的值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.ResolveMultieSelectDictionaryDataWithBitwise(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@,System.Type,System.String,System.String)">
            <summary>
            解析指定的字典名称、位运算值、数据项集合、值字段名称、备注字段名称，输出其位运算后的值并返回明细项集合，支持字典通过位运算的复选且需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="bitwiseValue">位运算值</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>明细项集合</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.ResolveMultieSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Type,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称，输出其位运算后的值并返回明细项集合，支持普通（非位运算）的复选且备注信息（如果需要的话）在不选中的状态下不进行持久化的情况。
            这种情况下，dataItems 集合中的每一项对应的字典数据项都被认为是选中状态。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.ResolveMultieSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Type,System.String,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持非位运算的复选且备注信息（如果需要的话）在不选中的状态下仍然能够持久化的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <param name="selectedFieldName">选中字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionary.Name">
            <summary>
            获取或设置字典的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionary.Caption">
            <summary>
            获取或设置字典的标题
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionary.RaiseBitwise">
            <summary>
            获取或设置一个值，该值指示当前字典中存储的项的值是否支持位运算，默认为 false。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionary.ItemValueDataType">
            <summary>
            获取或设置字典中存储的字典项的值的类型，默认为 "Int32"。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionary.Description">
            <summary>
            获取当前字典的说明。
            </summary>
        </member>
        <member name="M:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.Code">
            <summary>
            编码。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.SortNo">
            <summary>
            序号。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.RequireDescription">
            <summary>
            是否需要描述。
            </summary>
        </member>
        <member name="T:XMS.Core.Empty">
            <summary>
            提供统一的获取指定类型空值的方法。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.String">
            <summary>
            表示空字符串。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.Hashtable">
            <summary>
            表示空 Hashtable。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.ArrayList">
            <summary>
            表示空 ArrayList。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.Queue">
            <summary>
            表示空 Queue。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.Stack">
            <summary>
            表示空 Stack。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.SortedList">
            <summary>
            表示空 SortedList。
            </summary>
        </member>
        <member name="T:XMS.Core.Empty`1">
            <summary>
            提供统一的获取指定类型的值或空数组的方法。
            </summary>
            <typeparam name="T">空对象的类型。</typeparam>
        </member>
        <member name="F:XMS.Core.Empty`1.Array">
            <summary>
            表示空泛型数组。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`1.HashSet">
            <summary>
            表示空泛型 HashSet。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`1.List">
            <summary>
            表示空泛型 List。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`1.LinkedList">
            <summary>
            表示空泛型 LinkedList。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`1.Queue">
            <summary>
            表示空泛型 Queue。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`1.Stack">
            <summary>
            表示空泛型 Stack。
            </summary>
        </member>
        <member name="T:XMS.Core.Empty`2">
            <summary>
            提供统一的获取指定类型的值或空数组的方法。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:XMS.Core.Empty`2.Dictionary">
            <summary>
            表示空泛型 Dictionary。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`2.SortedDictionary">
            <summary>
            表示空泛型 SortedDictionary。
            </summary>
        </member>
        <member name="T:XMS.Core.Formatter.IObjectFormatter">
            <summary>
            定义一组方法，用于格式化指定的对象。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.IObjectFormatter.Format(System.Object)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <returns>对象格式化后的字符串表示形式。</returns>
        </member>
        <member name="M:XMS.Core.Formatter.IObjectFormatter.Format(System.Object,System.Text.StringBuilder)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <param name="sb">StringBuilder</param>
        </member>
        <member name="T:XMS.Core.Formatter.ObjectFormatter">
            <summary>
            为 IObjectFormatter 接口提供一个基本实现。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.#ctor">
            <summary>
            初始化 ObjectFormatter 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            使用指定的深度、最大字符串长度、最大集合数量初始化 PlainObjectFormatter 类的新实例。
            </summary>
            <param name="maximumDepth">深度</param>
            <param name="maximumStringLength">最大字符串长度</param>
            <param name="maximumCollectionLength">最大集合数量</param>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.MaximumDepth">
            <summary>
            获取或设置复杂对象在其对象图中可格式化的层深，默认值为 8，超过该深度，将使用省略号代替。
            </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.MaximumStringLength">
            <summary>
            获取或设置字符串类型的数据格式化后的最大长度，默认值为 1024，超过该长度，将使用省略号代替。
            </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.MaximumCollectionLength">
            <summary>
            获取或设置集合类型的数据格式化后的最大长度，默认值为 32，超过该长度，将使用省略号代替。
            </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.DecimalFormat">
             <summary>
            获取或设置 decimal 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.DoubleFormat">
             <summary>
            获取或设置 double 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.FloatFormat">
             <summary>
            获取或设置 float 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.IntegerFormat">
             <summary>
            获取或设置 integer 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.LongFormat">
             <summary>
            获取或设置 long 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.DateTimeFormat">
             <summary>
            获取或设置 DateTime 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.TimeSpanFormat">
             <summary>
            获取或设置 TimeSpan 类型数据的格式化格式。
             </summary>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.AddTypeFormatter(XMS.Core.Formatter.TypeFormatter)">
            <summary>
            添加一个类型格式化器。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.GetTypeFormatter(System.Type)">
            <summary>
            为指定的类型获取自定义的类型格式化器。
            </summary>
            <param name="dataType">要为其获取类型格式化器的类型。</param>
            <returns>如果存在，则返回该类型的格式化器，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.Format(System.Object)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <returns>对象格式化后的字符串表示形式。</returns>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.Format(System.Object,System.Text.StringBuilder)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <param name="sb">StringBuilder</param>
        </member>
        <member name="T:XMS.Core.Formatter.PlainObjectFormatter">
            <summary>
            简单对象格式化器的实现。
            </summary>
        </member>
        <member name="P:XMS.Core.Formatter.PlainObjectFormatter.Full">
            <summary>
            获取完整版对象格式化器，该对象格式化器完整格式化对象，不限制对象的深度、字符串的长度、集合的长度。
            </summary>
        </member>
        <member name="P:XMS.Core.Formatter.PlainObjectFormatter.Simplified">
            <summary>
            获取简化版对象格式化器，如果对象超过深度、字符串长度、集合长度限制，那么将部分格式化该对象，超过的部分使用省略号代替。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.PlainObjectFormatter.EscapeString(System.String)">
            <summary>
            替换字符串中的反斜杠、双引号、换行符
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Formatter.PlainObjectFormatter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            使用指定的深度、最大字符串长度、最大集合数量初始化 PlainObjectFormatter 类的新实例。
            </summary>
            <param name="maximumDepth">深度</param>
            <param name="maximumStringLength">最大字符串长度</param>
            <param name="maximumCollectionLength">最大集合数量</param>
        </member>
        <member name="M:XMS.Core.Formatter.PlainObjectFormatter.#ctor">
            <summary>
            初始化 PlainObjectFormatter 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.PlainObjectFormatter.Format(System.Object)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <returns>对象格式化后的字符串表示形式。</returns>
        </member>
        <member name="M:XMS.Core.Formatter.PlainObjectFormatter.Format(System.Object,System.Text.StringBuilder)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <param name="sb">StringBuilder</param>
        </member>
        <member name="T:XMS.Core.Formatter.TypeFormatter">
            <summary>
            为系统基础类型（字符串、基元、枚举、日期时间、数组、字典、集合等）之外的类型提供自定义的类型格式化器。
            </summary>
        </member>
        <member name="P:XMS.Core.Formatter.TypeFormatter.SupportedType">
            <summary>
            获取当前类型格式化器支持的类型。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.TypeFormatter.Format(System.Object,System.Int32,System.Boolean)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <param name="depth">当前对象在整个格式化进程中的深度。</param>
            <param name="isKeyOrPropertyName">指示该对象是否以字典的键或者复杂对象的属性名形式存在。</param>
            <returns>对象格式化后的字符串表示形式。</returns>
        </member>
        <member name="M:XMS.Core.Formatter.TypeFormatter.Format(System.Object,System.Text.StringBuilder,System.Int32,System.Boolean)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <param name="o">StringBuilder。</param>
            <param name="depth">当前对象在整个格式化进程中的深度。</param>
            <param name="isKeyOrPropertyName">指示该对象是否以字典的键或者复杂对象的属性名形式存在。</param>
        </member>
        <member name="P:XMS.Core.ServiceInvokeChainNode.IP">
            <summary>
            应用所在的 IP。
            </summary>
        </member>
        <member name="P:XMS.Core.ServiceInvokeChainNode.AppName">
            <summary>
            应用名。
            </summary>
        </member>
        <member name="P:XMS.Core.ServiceInvokeChainNode.AppVersion">
            <summary>
            应用版本。
            </summary>
        </member>
        <member name="P:XMS.Core.ServiceInvokeChainNode.Method">
            <summary>
            方法名。
            </summary>
        </member>
        <member name="T:XMS.Core.ServiceInvokeChain">
            <summary>
            表示服务调用链。
            </summary>
        </member>
        <member name="M:XMS.Core.ServiceInvokeChain.GetFromRequest(System.Web.HttpContext,System.ServiceModel.OperationContext)">
            <summary>
            从请求中获取并生成ServiceInvokeChain调用链对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Json.JsonPropertyAttribute">
            <summary>
            定义属性在序列化为 json 时的行为。
            </summary>
        </member>
        <member name="P:XMS.Core.Json.JsonPropertyAttribute.Name">
            <summary>
            获取或设置一个值，该值指示 json 序列化的名称。
            </summary>
        </member>
        <member name="M:XMS.Core.Json.JsonPropertyAttribute.#ctor">
            <summary>
            初始化 JsonMemberAttribute 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Json.JsonSerializer">
            <summary>
            JSON 序列化器。
            </summary>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            将指定的 json 字符串反序列化为泛型参数 T 限定类型的对象。
            注意：反序列化时忽略大小写。
            </summary>
            <typeparam name="T">反序列化目标对象的类型。</typeparam>
            <param name="input">要反序列化的 json 字符串。</param>
            <returns>反序列化产生的对象。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            将指定的 json 字符串反序列化为 targetType 限定类型的对象。
            </summary>
            <param name="input">要反序列化的 json 字符串。</param>
            <param name="targetType">反序列化目标对象的类型。。</param>
            <returns>反序列化产生的对象。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Deserialize``1(System.String,System.String[])">
            <summary>
            将指定的 json 字符串反序列化为泛型参数 T 限定类型的对象。
            </summary>
            <typeparam name="T">反序列化目标对象的类型。</typeparam>
            <param name="input">要反序列化的 json 字符串。</param>
            <param name="extraTimeFormats">额外支持的时间格式，如 new string[]{"yyyy-MM-dd HH:mm:ss fff", "yyyyMMddHHmmss.fff"}。</param>
            <returns>反序列化产生的对象。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Deserialize(System.String,System.Type,System.String[])">
            <summary>
            将指定的 json 字符串反序列化为 targetType 限定类型的对象。
            </summary>
            <param name="input">要反序列化的 json 字符串。</param>
            <param name="targetType">反序列化目标对象的类型。。</param>
            <param name="extraTimeFormats">额外支持的时间格式，如 new string[]{"yyyy-MM-dd HH:mm:ss fff", "yyyyMMddHHmmss.fff"}。</param>
            <returns>反序列化产生的对象。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object)">
            <summary>
            将指定的对象序列化为 json 字符串，日期时间采用 .net 内置的默认格式。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <returns>序列化产生的 json 字符串。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,XMS.Core.Json.TimeFormat)">
            <summary>
            将指定的对象序列化为 json 字符串，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
            <returns>序列化产生的 json 字符串。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,XMS.Core.Json.TimeFormat,System.String)">
            <summary>
            将指定的对象序列化为 json 字符串，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
            <param name="customDateTimeFormat">自定义日期序列化格式。</param>
            <returns>序列化产生的 json 字符串。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,XMS.Core.Json.TimeFormat,System.String,System.String)">
            <summary>
            将指定的对象序列化为 json 字符串，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
            <param name="customDateTimeFormat">自定义日期序列化格式。</param>
            <param name="customTimeSpanFormat">自定义时间间隔序列化格式。</param>
            <returns>序列化产生的 json 字符串。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            将指定的对象序列化为 json 字符串并将个字符串追加到 output 的结尾，日期时间采用 .net 内置的默认格式。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="output">用来存放序列化产生的 json 字符串的 StringBuilder 对象。。</param>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,System.Text.StringBuilder,XMS.Core.Json.TimeFormat)">
            <summary>
            将指定的对象序列化为 json 字符串并将个字符串追加到 output 的结尾，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="output">用来存放序列化产生的 json 字符串的 StringBuilder 对象。。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,System.Text.StringBuilder,XMS.Core.Json.TimeFormat,System.String)">
            <summary>
            将指定的对象序列化为 json 字符串并将个字符串追加到 output 的结尾，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="output">用来存放序列化产生的 json 字符串的 StringBuilder 对象。。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
            <param name="customDateTimeFormat">自定义日期序列化格式。</param>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,System.Text.StringBuilder,XMS.Core.Json.TimeFormat,System.String,System.String)">
            <summary>
            将指定的对象序列化为 json 字符串并将个字符串追加到 output 的结尾，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="output">用来存放序列化产生的 json 字符串的 StringBuilder 对象。。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
            <param name="customDateTimeFormat">自定义日期序列化格式。</param>
            <param name="customTimeSpanFormat">自定义时间间隔序列化格式。</param>
        </member>
        <member name="T:XMS.Core.Json.TimeFormat">
            <summary>
            表示在 JSON 序列化过程中日期时间的序列化格式。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.Default">
            <summary>
            我们的统一默认日期时间格式，为含有毫秒数的字符串格式，与 StringWithMilliseconds 相同。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.StringWithMilliseconds">
            <summary>
            将日期时间格式化为含有毫秒数的字符串格式，具体格式为：MM/dd/yyyy HH:mm:ss.fff，此格式可适用于 .net、java、apple平台，但不能通过 js 的 Date 对象直接初始化。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.StringNoneMilliseconds">
            <summary>
            将日期时间格式化为不含有毫秒数的字符串格式，具体格式为：MM/dd/yyyy HH:mm:ss，此格式可适用于全部平台，，也能通过 js 的 Date 对象直接初始化。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.MillisecondsFrom1970L">
            <summary>
            将日期时间格式化为自1970-1-1 0:0:0 以来的毫秒数，此格式可适用于所有平台，但每个平台都要做相应转换才能当成日期进行使用。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.Javascript">
            <summary>
            将日期时间格式化为 new Date(1970年以来的毫秒数)，然后可以直接使用 eval 得到它的值。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.NetDefault">
            <summary>
            将日期时间格式化为.net 默认格式，\/Date(1970年以来的毫秒数)\/
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.Custom">
            <summary>
            自定义，必须同时指定 customTimeFormat 参数。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.SerializationFormat.MillisecondsFrom1970L">
            <summary>
            序列化时，日期被序列化成1970年以来的毫秒数,TimeSpan 也被序列化成毫秒数
            </summary>
        </member>
        <member name="F:XMS.Core.Json.SerializationFormat.StringNoneMilliseconds">
            <summary>
            序列化时，日期被序列化成字符串，但没有毫秒数
            </summary>
        </member>
        <member name="F:XMS.Core.Json.SerializationFormat.StringWithMilliseconds">
            <summary>
            序列化时日期被序列化成字符串并有毫秒数。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.SerializationFormat.Custom">
            <summary>
            序列化时日期按照指定的格式自定义。
            </summary>
        </member>
        <member name="T:XMS.Core.Json.JsonIgnoreAttribute">
            <summary>
            在 json 序列化过程中忽略指定的属性或字段。
            </summary>
        </member>
        <member name="T:XMS.Core.KeyValue`2">
            <summary>
            表示用于存储两个相关对象的基本结构。
            </summary>
        </member>
        <member name="P:XMS.Core.KeyValue`2.Key">
            <summary>
            获取或设置二元结构的第一个 object。 
            </summary>
        </member>
        <member name="P:XMS.Core.KeyValue`2.Value">
            <summary>
            获取或设置二元结构的第二个 object。 
            </summary>
        </member>
        <member name="M:XMS.Core.KeyValue`2.#ctor">
            <summary>
            初始化 Pair 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Members.Member.RaisePropertyChanged(System.String)">
            <summary>
            支持属性变化事件
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:XMS.Core.Members.Member.DisplayName">
            <summary>
            获取当前会员的显示名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Members.Member.AnonymousName">
            <summary>
            获取会员的匿名显示名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Members.Member.HonourName">
            <summary>
            获取用户的尊称。
            </summary>
        </member>
        <member name="M:XMS.Core.Members.Member.GetDisplayName(System.String,System.String,System.String,XMS.Core.Members.Sex,System.String)">
            <summary>
            获取显示名，结合提供的昵称、邮箱、姓名、性别、手机号获取一个可用于在站点中向已登录用户显示的名称，如：X先生、X女士、admin@57.cn、13800138000等等。
            </summary>
            <param name="nickName"></param>
            <param name="email"></param>
            <param name="name"></param>
            <param name="sex"></param>
            <param name="mobilePhone"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Members.Member.GetAnonymousName(System.String,System.String,System.String,XMS.Core.Members.Sex,System.String)">
            <summary>
            获取匿名名称，结合提供的昵称、邮箱、姓名、性别、手机号获取一个可用于在站点中向所有用户显示的匿名名称，如：X先生、X女士、admin@57.cn、138****5678等等。
            </summary>
            <param name="nickName"></param>
            <param name="email"></param>
            <param name="name"></param>
            <param name="sex"></param>
            <param name="mobilePhone"></param>
        </member>
        <member name="M:XMS.Core.Members.Member.GetHonourName(System.String,XMS.Core.Members.Sex,System.String,System.String,System.String)">
            <summary>
            获取尊称，结合提供的姓名、性别、昵称、手机号、邮箱获取用户的尊称，适用于向用户发送短信、邮件等场景。
            </summary>
            <param name="name"></param>
            <param name="sex"></param>
            <param name="nickName"></param>
            <param name="mobilePhone"></param>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Members.Member.GetLastName(System.String)">
            <summary>
            获取姓名中的姓。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Pair`2">
            <summary>
            表示用于存储两个相关对象的基本结构。
            </summary>
        </member>
        <member name="P:XMS.Core.Pair`2.First">
            <summary>
            获取或设置二元结构的第一个 object。 
            </summary>
        </member>
        <member name="P:XMS.Core.Pair`2.Second">
            <summary>
            获取或设置二元结构的第二个 object。 
            </summary>
        </member>
        <member name="M:XMS.Core.Pair`2.#ctor">
            <summary>
            初始化 Pair 类的新实例。
            </summary>
        </member>
        <member name="F:XMS.Core.Pipes.PipeConstants.LogCategory">
            <summary>
            日志类别-消息
            </summary>
        </member>
        <member name="T:XMS.Core.Pipes.ClientChannelEventHandler">
            <summary>
            表示将对 <see cref="T:XMS.Core.Pipes.PipeServiceClientChannel"/> 对象的 <see cref="E:XMS.Core.Pipes.PipeServiceClientChannel.Closed"/>、<see cref="E:XMS.Core.Pipes.PipeServiceClientChannel.DataReceived"/> 事件进行处理的方法。
            </summary>
            <param name="sender">引发事件的源。</param>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientChannelEventArgs"/>。</param>
        </member>
        <member name="T:XMS.Core.Pipes.ClientChannelEventArgs">
            <summary>
            为 <see cref="T:XMS.Core.Pipes.PipeServiceClientChannel"/> 类的 <see cref="E:XMS.Core.Pipes.PipeServiceClientChannel.Closed"/>、<see cref="E:XMS.Core.Pipes.PipeServiceClientChannel.DataReceived"/> 事件提供数据。 
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.ClientChannelEventArgs.Channel">
            <summary>
            获取事件相关的客户端。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.ClientChannelEventArgs.#ctor(XMS.Core.Pipes.PipeServiceClientChannel)">
            <summary>
            使用指定的配置文件名称、配置文件物理路径初始化 <see cref="T:XMS.Core.Pipes.ClientChannelEventArgs"/> 类的新实例。
            </summary>
            <param name="channel">事件相关的客户端。</param>
        </member>
        <member name="T:XMS.Core.Pipes.ClientConnectEventHandler">
            <summary>
            表示将对 <see cref="T:XMS.Core.Pipes.PipeService"/> 对象的 <see cref="E:XMS.Core.Pipes.PipeService.ClientConnected"/>、<see cref="E:XMS.Core.Pipes.PipeService.ClientClosed"/> 事件进行处理的方法。
            </summary>
            <param name="sender">引发事件的源。</param>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientConnectEventArgs"/>。</param>
        </member>
        <member name="T:XMS.Core.Pipes.ClientConnectEventArgs">
            <summary>
            为 <see cref="T:XMS.Core.Pipes.PipeService"/> 类的 <see cref="E:XMS.Core.Pipes.PipeService.ClientConnected"/>、<see cref="E:XMS.Core.Pipes.PipeService.ClientClosed"/> 事件提供数据。 
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.ClientConnectEventArgs.Client">
            <summary>
            获取事件相关的客户端。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.ClientConnectEventArgs.#ctor(XMS.Core.Pipes.PipeServiceClient)">
            <summary>
            初始化 <see cref="T:XMS.Core.Pipes.ClientConnectEventArgs"/> 类的新实例。
            </summary>
            <param name="client">事件相关的客户端。</param>
        </member>
        <member name="T:XMS.Core.Pipes.DataReceivedEventHandler">
            <summary>
            表示将对 <see cref="T:XMS.Core.Pipes.PipeService"/> 对象的 <see cref="E:XMS.Core.Pipes.PipeService.DataReceived"/> 事件进行处理的方法。
            </summary>
            <param name="sender">引发事件的源。</param>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.DataReceivedEventArgs"/>。</param>
        </member>
        <member name="T:XMS.Core.Pipes.DataReceivedEventArgs">
            <summary>
            为 <see cref="T:XMS.Core.Pipes.PipeService"/> 类的 <see cref="E:XMS.Core.Pipes.PipeService.DataReceived"/>事件提供数据。 
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.DataReceivedEventArgs.Channel">
            <summary>
            获取事件相关的客户端。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.DataReceivedEventArgs.Data">
            <summary>
            获取事件相关的数据。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.DataReceivedEventArgs.#ctor(XMS.Core.Pipes.CallbackState)">
            <summary>
            使用指定的配置文件名称、配置文件物理路径初始化 <see cref="T:XMS.Core.Pipes.ClientConnectEventArgs"/> 类的新实例。
            </summary>
            <param name="callbackState">事件相关的回调状态数据。</param>
        </member>
        <member name="P:XMS.Core.Pipes.DataReceivedEventArgs.IsReplied">
            <summary>
            获取一个值，该值指示是否以为当前接收到的数据进行应答。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.DataReceivedEventArgs.Reply">
            <summary>
            通知消息总线客户端消息处理成功并从消息持久化存储中删除消息。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.DataReceivedEventArgs.ReturnValue">
            <summary>
            事件处理结束后的返回数据。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.DataReceivedEventArgs.ExtraError">
            <summary>
            获取并设置在事件处理过程中调用 Reply 方法之后发生的附加错误，该错误仅当 IsReplied 为 true 时能够设置成功。
            </summary>
        </member>
        <member name="T:XMS.Core.Pipes.PipeServiceChannelManager.PipeServiceChannelPool">
            <summary>
            ObjectPool 的包装
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceChannelManager.PipeServiceChannelPool.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceChannelManager.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceChannel.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="T:XMS.Core.Pipes.PipeService">
            <summary>
            管道服务
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.Started">
            <summary>
            表示管道启动事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.Stoped">
            <summary>
            表示管道停止事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.ClientChannelConnected">
            <summary>
            表示客户端通道连接时引发的事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.ClientChannelClosed">
            <summary>
            表示客户端通道断开连接时引发事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.ClientConnected">
            <summary>
            表示客户端连接时引发的事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.ClientClosed">
            <summary>
            表示客户端断开连接时引发事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.DataReceived">
            <summary>
            表示接收到客户端发送的数据时引发的事件。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireClientChannelConnected(XMS.Core.Pipes.ClientChannelEventArgs)">
            <summary>
            引发 ClientConnected 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientChannelEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireClientChannelClosed(XMS.Core.Pipes.ClientChannelEventArgs)">
            <summary>
            引发 ClientClosed 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientChannelEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireClientConnected(XMS.Core.Pipes.ClientConnectEventArgs)">
            <summary>
            引发 ClientConnected 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientConnectEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireClientClosed(XMS.Core.Pipes.ClientConnectEventArgs)">
            <summary>
            引发 ClientClosed 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientConnectEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireDataReceived(XMS.Core.Pipes.DataReceivedEventArgs)">
            <summary>
            引发 DataReceived 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.DataReceivedEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireStarted(System.EventArgs)">
            <summary>
            引发 Started 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:System.EventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireStoped(System.EventArgs)">
            <summary>
            引发 Stoped 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:System.EventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.#ctor(System.String,System.Int32)">
            <summary>
            初始化管道服务的新实例。
            </summary>
            <param name="pipeName">管道名称。</param>
            <param name="maxNumberOfServerInstances">最大共享实例数。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.#ctor(System.String,System.Int32,System.Threading.ThreadPriority,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化管道服务的新实例。
            </summary>
            <param name="pipeName">管道名称。</param>
            <param name="maxNumberOfServerInstances">最大共享实例数。</param>
            <param name="listenThreadPriority">监听线程优先级。</param>
            <param name="openTimeout">打开连接超时时间。</param>
            <param name="sendTimeout">发送数据超时时间。</param>
            <param name="receiveTimeout">监听线程等待超时时间。</param>
        </member>
        <member name="P:XMS.Core.Pipes.PipeService.PipeName">
            <summary>
            获取管道服务使用的管道名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeService.IsRunning">
            <summary>
            获取一个值，该值指示管道服务是否正在运行。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeService.Clients">
            <summary>
            获取正在运行的管道服务端通道列表，管道服务使用这些通道监听连接到管道服务的管道客户端通道发送的数据。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Start">
            <summary>
            启动管道服务。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Connect(System.String,System.String)">
            <summary>
            连接到目标管道服务。
            </summary>
            <param name="targetMachineName"></param>
            <param name="targetPipeName"></param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Stop">
            <summary>
            停止管道服务。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Send(System.String,System.Object)">
            <summary>
            通过管道服务向本机上指定名称的管道发送数据。
            </summary>
            <param name="targetPipeName">要想起发送数据的目标管道名。</param>
            <param name="value">要发送到目标管道的数据。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Send(System.String,System.String,System.Object)">
            <summary>
            通过管道服务向本机上指定名称的管道发送数据。
            </summary>
            <param name="targetMachineName">要想起发送数据的目标机器名。</param>
            <param name="targetPipeName">要想起发送数据的目标管道名。</param>
            <param name="value">要发送到目标管道的数据。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Request(System.String,System.Object)">
            <summary>
            通过管道服务向本机上指定名称的管道发送数据。
            </summary>
            <param name="targetPipeName">要想起发送数据的目标管道名。</param>
            <param name="value">要发送到目标管道的数据。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Request(System.String,System.String,System.Object)">
            <summary>
            通过管道服务向本机上指定名称的管道发送数据。
            </summary>
            <param name="targetMachineName">要想起发送数据的目标机器名。</param>
            <param name="targetPipeName">要想起发送数据的目标管道名。</param>
            <param name="value">要发送到目标管道的数据。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Finalize">
            <summary>
            释放管道服务占用的资源。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClient.PipeName">
            <summary>
            获取管道客户端的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClient.AppInstanceId">
            <summary>
             获取管道客户端应用实例的 id，一般的格式为 {PipeName}@{MachineName}
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClient.AppName">
            <summary>
            获取管道客户端所在的应用程序的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClient.AppVersion">
            <summary>
            获取管道客户端所在的应用程序的版本。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClient.HostName">
            <summary>
            获取管道客户端所在的主机名。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClient.ToString">
            <summary>
            重载 ToString 的实现。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Pipes.PipeServiceClientCollection">
            <summary>
            PipeServiceChannel 集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientCollection.#ctor">
            <summary>
            初始化 PipeServiceChannelCollection 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientCollection.#ctor(System.Int32)">
            <summary>
            使用指定的容量初始化 PipeServiceChannelCollection 类的新实例。
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientCollection.Remove(System.String)">
            <summary>
            从集合中移除指定项
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientCollection.GetServiceClient(System.String,System.String)">
            <summary>
            根据指定的机器名称和管道名称获取已连接的服务端通道。
            </summary>
            <param name="machineName"></param>
            <param name="pipeName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceListener.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="T:XMS.Core.Pipes.PipeServiceClientChannel">
            <summary>
            管道服务器端通道，该通道内部维护一个监听线程，用于接收管道客户端发送的数据。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeServiceClientChannel.Closed">
            <summary>
            表示客户端断开连接时引发事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeServiceClientChannel.DataReceived">
            <summary>
            表示接收到客户端发送的数据时引发的事件。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.FireClosed(XMS.Core.Pipes.ClientChannelEventArgs)">
            <summary>
            引发 ClientClosed 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientChannelEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.FireDataReceived(XMS.Core.Pipes.DataReceivedEventArgs)">
            <summary>
            引发 DataReceived 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.DataReceivedEventArgs"/>。</param>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClientChannel.Client">
            <summary>
            通道相关的客户端。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.Open">
            <summary>
            打开
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.Reply(System.Object,XMS.Core.Pipes.CallbackState)">
            <summary>
            在处理接收数据的事件中，调用此方法以通知调用方请求执行成功，该返回值应该是可序列化的。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="T:XMS.Core.Pipes.ReplyException">
            <summary>
            表示在管道服务器接收到数据后的数据处理事件中调用 Reply 方法对调用方进行应答时发生的错误。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.ReplyException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Pipes.ReplyException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“业务操作的过程中发生错误。”。
            </remarks>
        </member>
        <member name="M:XMS.Core.Pipes.ReplyException.#ctor(System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.Pipes.ReplyException"/> 类的实例。
            </summary>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Pipes.ReplyException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.Pipes.ReplyException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.Pipes.ReplyException.#ctor(System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.Pipes.ReplyException"/> 类的新实例。
            </summary>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.Pipes.ReplyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="T:XMS.Core.RequestException">
            <summary>
            表示在请求验证过程中引发的异常。
            </summary>
        </member>
        <member name="P:XMS.Core.RequestException.InnerMessage">
            <summary>
            获取描述异常的消息的内部版本，该版本仅供服务器内部使用
            </summary>
        </member>
        <member name="M:XMS.Core.RequestException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.RequestException"/> 类的新实例。
            </summary>
            <param name="code">错误码。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.RequestException.#ctor(System.Int32,System.String,System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.RequestException"/> 类的新实例。
            </summary>
            <param name="code">错误码。</param>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.RequestException.ToString">
            <summary>
            获取当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="T:XMS.Core.Resource.DefaultResourceService">
            <summary>
            资源服务接口的默认实现。
            </summary>
        </member>
        <member name="M:XMS.Core.Resource.DefaultResourceService.GetImageUrl(System.String,System.String,System.String)">
            <summary>
            获取指定名称和尺寸规格的图片的 Url，该方法需要在 app.config 或者默认配置文件（如web.config) 的 appsettings 节中添加键值为 RES_ImageServerUrl 的自定义项，用于配置图片服务器的格式化地址，如："http://upload{0}.xiaomishu.com"。
            </summary>
            <param name="rootPath">相对于 RES_ImageServerUrl 的根路径。</param>
            <param name="fileName">图片名称。</param>
            <param name="sizeSpeci">尺寸规格。</param>
            <returns>指定名称和尺寸规格的图片的 Url。</returns>
        </member>
        <member name="T:XMS.Core.Resource.IResourceService">
            <summary>
            定义一组可用于访问资源系统的接口。
            </summary>
        </member>
        <member name="M:XMS.Core.Resource.IResourceService.GetImageUrl(System.String,System.String,System.String)">
            <summary>
            获取指定名称和尺寸规格的图片的 Url，该方法需要在 app.config 或者默认配置文件（如web.config) 的 appsettings 节中添加键值为 RES_ImageServerUrl 的自定义项，用于配置图片服务器的格式化地址，如："http://upload{0}.xiaomishu.com"。
            </summary>
            <param name="rootPath">相对于 RES_ImageServerUrl 的根路径。</param>
            <param name="fileName">图片名称。</param>
            <param name="sizeSpeci">尺寸规格。</param>
            <returns>指定名称和尺寸规格的图片的 Url。</returns>
        </member>
        <member name="T:XMS.Core.IReturnValue">
            <summary>
            定义一组用于向程序边界外部公开方法调用结果的接口。
            </summary>
        </member>
        <member name="P:XMS.Core.IReturnValue.Code">
            <summary>
            获取返回码。
            </summary>
        </member>
        <member name="P:XMS.Core.IReturnValue.Message">
            <summary>
            获取返回消息。
            </summary>
        </member>
        <member name="P:XMS.Core.IReturnValue.Value">
            <summary>
            获取返回值。
            </summary>
        </member>
        <member name="T:XMS.Core.ReturnValue">
            <summary>
            一个用于向程序边界外部公开方法调用结果的对象。
            </summary>
        </member>
        <member name="P:XMS.Core.ReturnValue.Code">
            <summary>
            错误码。
            </summary>
        </member>
        <member name="P:XMS.Core.ReturnValue.Message">
            <summary>
            提示信息。
            </summary>
        </member>
        <member name="P:XMS.Core.ReturnValue.RawMessage">
            <summary>
            获取程序原错误提示消息。
            </summary>
        </member>
        <member name="M:XMS.Core.ReturnValue.#ctor">
            <summary>
            初始化 ReturnValue 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.ReturnValue.#ctor(System.Int32)">
            <summary>
            使用指定的错误码初始化 ReturnValue 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.ReturnValue.Get200OK">
            <summary>
            获取并返回编码为 200 的 ReturnValue。 
            </summary>
            <returns>编码为 200 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue.Get200OK(System.String)">
            <summary>
            获取并返回编码为 200 的 ReturnValue。 
            </summary>
            <param name="message">成功消息，该消息可用于提示最终用户。</param>
            <returns>编码为 200 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue.Get404Error(System.String)">
            <summary>
            获取并返回编码为 404 的 ReturnValue。
            </summary>
            <param name="message">错误信息。</param>
            <returns>编码为 404 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue.Get500Error(System.Exception,System.String)">
            <summary>
            获取并返回编码为 500 的 ReturnValue。
            </summary>
            <param name="ex">异常</param>
            <param name="message">错误信息。</param>
            <returns>编码为 500 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue.GetBusinessError(XMS.Core.BusinessException)">
            <summary>
            获取返回业务错误编码 的 ReturnValue。
            </summary>
            <param name="be">业务异常</param>
            <returns>自定义错误编码的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue.GetCustomError(System.Int32,System.Exception,System.String)">
            <summary>
            获取返回自定义错误编码 的 ReturnValue。
            </summary>
            <param name="code">错误编码</param>
            <param name="ex">异常</param>
            <param name="message">错误信息。</param>
            <returns>自定义错误编码的 ReturnValue。</returns>
        </member>
        <member name="T:XMS.Core.ReturnValue`1">
            <summary>
            泛型 ReturnValue 对象。
            </summary>
            <typeparam name="T">值的类型。</typeparam>
        </member>
        <member name="P:XMS.Core.ReturnValue`1.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.#ctor">
            <summary>
            初始化 ReturnValue 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.Get200OK(`0)">
            <summary>
            获取并返回编码为 200 的 ReturnValue。 
            </summary>
            <returns>编码为 200 的 ReturnValue。</returns>
            <param name="objValue">返回的值。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.Get200OK(`0,System.String)">
            <summary>
            获取并返回编码为 200 的 ReturnValue。 
            </summary>
            <param name="objValue">返回的值。</param>
            <param name="message">成功消息，该消息可用于提示最终用户。</param>
            <returns>编码为 200 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.Get404Error(System.String,`0)">
            <summary>
            获取并返回编码为 404 的 ReturnValue。
            </summary>
            <param name="message">错误信息。</param>
            <param name="objValue">返回的值。</param>
            <returns>编码为 404 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.Get500Error(System.Exception,System.String,`0)">
            <summary>
            获取并返回编码为 500 的 ReturnValue。
            </summary>
            <param name="ex">异常</param>
            <param name="message">错误信息。</param>
            <param name="objValue">返回的值。</param>
            <returns>编码为 500 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.GetBusinessError(XMS.Core.BusinessException,`0)">
            <summary>
            获取返回业务错误编码 的 ReturnValue。
            </summary>
            <param name="be">业务异常</param>
            <param name="objValue">返回的值。</param>
            <returns>自定义错误编码的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.GetCustomError(System.Int32,System.Exception,System.String,`0)">
            <summary>
            获取返回自定义错误编码 的 ReturnValue。
            </summary>
            <param name="code">错误编码</param>
            <param name="ex">异常</param>
            <param name="message">错误信息。</param>
            <param name="objValue">返回的值。</param>
            <returns>自定义错误编码的 ReturnValue。</returns>
        </member>
        <member name="T:XMS.Core.RunMode">
            <summary>
            定义运行模式。
            </summary>
        </member>
        <member name="F:XMS.Core.RunMode.Demo">
            <summary>
            表示以 Demo 模式运行。
            </summary>
        </member>
        <member name="F:XMS.Core.RunMode.Release">
            <summary>
            表示以 Release 模式运行。
            </summary>
        </member>
        <member name="T:XMS.Core.RunContext">
            <summary>
            运行上下文，提供当前应用程序所处的运行环境。
            </summary>
        </member>
        <member name="M:XMS.Core.RunContext.InitCurrent">
            <summary>
            从请求中初始化 Current 属性，这可将 RunContext 当前实例初始化化，后续对 Current 属性的访问不再依赖于具体的请求上下文，可避免访问已经释放的 OperationContext.Current 时发生错误，
            并可提高后续访问的性能，但必须在执行结束时成对调用 ResetCurrent 方法，以防止在线程被复用时误用之前的上下文实例。
            </summary>
        </member>
        <member name="M:XMS.Core.RunContext.ResetCurrent">
            <summary>
            将 RunContext 的当前实例重设为 null，该方法一般与 InitCurrent 成对使用。
            </summary>
        </member>
        <member name="P:XMS.Core.RunContext.Current">
            <summary>
            获取当前运行上下文，可通过该对象得到线程相关的当前运行模式。
            </summary>
        </member>
        <member name="F:XMS.Core.RunContext.contextRunMode">
            <summary>
            上下文中的运行模式
            </summary>
        </member>
        <member name="P:XMS.Core.RunContext.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="P:XMS.Core.RunContext.RunMode">
            <summary>
            获取一个值，该值指示当前业务上下文的运行模式。
            运行模式优先级：
            	1.在 RunContextScope 作用域中，优先使用 RunContextScope 的 RunMode，其优先级高于 Web 上下文 和 Service 上下文。
            	2.在 Service 上下文 中，如果服务请求中包含 DemoHeader 标头，则返回 demo 运行模式，否则忽略 Service 上下文。Service 上下文 优先级高于 Web 上下文。
            	3.在 Web 上下文 中，如果请求的 URI 以 demo. 打头，则返回 demo 运行模式，否则忽略 Web 上下文。Web 上下文 优先级高于配置。
            	4.其它情况，如果 AppSettings.config 中包含 runMode 配置项，则返回配置的运行模式，否则返回 release 运行模式。配置的优先级最低。
            </summary>
        </member>
        <member name="F:XMS.Core.RunContext.AppName">
            <summary>
            获取当前运行环境应用程序的名称，该字段不需要容器初始化就可直接访问。
            </summary>
        </member>
        <member name="F:XMS.Core.RunContext.AppVersion">
            <summary>
            获取当前运行环境应用程序的版本，该字段不需要容器初始化就可直接访问。
            </summary>
        </member>
        <member name="F:XMS.Core.RunContext.IsWebEnvironment">
            <summary>
            获取一个值，该值指示当前应用程序是否Web环境，该字段不需要容器初始化就可直接访问。
            </summary>
        </member>
        <member name="P:XMS.Core.RunContext.Machine">
            <summary>
            获取当前运行环境所处的机器名，该属性不需要容器初始化就可直接访问。
            </summary>
        </member>
        <member name="T:XMS.Core.RunScope">
            <summary>
            业务块
            </summary>
        </member>
        <member name="F:XMS.Core.RunScope.current">
            <summary>
            线程相关的当前业务作用域对象。
            </summary>
        </member>
        <member name="P:XMS.Core.RunScope.RunMode">
            <summary>
            获取一个值，该值指示当前业务上下文的运行模式。
            </summary>
        </member>
        <member name="M:XMS.Core.RunScope.CreateRunContextScopeForDemo">
            <summary>
            不管当前运行模式是 demo 还是 release，总是创建一个适用于 demo 场景的业务块。
            调用这个方法之前，必须先判断是否支持 demo 模式。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.RunScope.CreateRunContextScopeForRelease">
            <summary>
            不管当前运行模式是 demo 还是 release，总是创建一个适用于 release 场景的 实体业务块。
            调用这个方法之前，必须先判断是否支持 release 模式。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.ITicket">
            <summary>
            表示一个可用于存储的会员票据信息。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.Token">
            <summary>
            获取票据的令牌。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.UserId">
            <summary>
            获取票据相关的用户的Id。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.UserName">
            <summary>
            获取票据颁发给用户的姓名。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.IssueTime">
            <summary>
            获取票据颁发时间。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.ExpireTime">
            <summary>
            票获取据过期时间。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.Expired">
            <summary>
            获取一个值，该值指示票据是否已过期
            </summary>
        </member>
        <member name="T:XMS.Core.UserPrincipal">
            <summary>
            表示一个会员
            </summary>
        </member>
        <member name="F:XMS.Core.UserPrincipal.LocalSystem">
            <summary>
            表示本地系统，其会员 Id 为 -1。
            </summary>
        </member>
        <member name="F:XMS.Core.UserPrincipal.Guest">
            <summary>
            表示一个游客, 其会员 Id 为 0。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.IsGuest">
            <summary>
            获取一个值，该值指示当前用户是否为游客。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.IsLocalSystem">
            <summary>
            获取一个值，该值指示当前用户是否为本地系统用户。
            </summary>
        </member>
        <member name="M:XMS.Core.UserPrincipal.FromTicket(XMS.Core.ITicket)">
            <summary>
            从身份认证票据初始化一个会员身份对象。
            </summary>
            <param name="ticket">身份认证票据。</param>
            <returns>UserPrincipal 对象。</returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.FromTicket(XMS.Core.ITicket,System.Int32)">
            <summary>
            从身份认证票据和组织 Id 初始化一个会员身份对象。
            </summary>
            <param name="ticket">身份认证票据。</param>
            <param name="orgId">组织 Id。</param>
            <returns>UserPrincipal 对象。</returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.FromTicket(XMS.Core.ITicket,System.Int32,System.Int32)">
            <summary>
            从身份认证票据和组织 Id 初始化一个会员身份对象。
            </summary>
            <param name="ticket">身份认证票据。</param>
            <param name="orgId">组织 Id。</param>
            <param name="deviceId">设备 Id。</param>
            <returns>UserPrincipal 对象。</returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.FromTicket(XMS.Core.ITicket,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            从身份认证票据和组织 Id 初始化一个会员身份对象。
            </summary>
            <param name="ticket">身份认证票据。</param>
            <param name="orgId">组织 Id。</param>
            <param name="deviceId">设备 Id。</param>
            <param name="extendProperties">扩展属性。</param>
            <returns>UserPrincipal 对象。</returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.FromIdentity(XMS.Core.UserIdentity,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            从身份标识初始化一个会员身份对象。
            </summary>
            <param name="identity">身份标识。</param>
            <param name="deviceId">设备 Id。</param>
            <param name="extendProperties">扩展属性。</param>
            <returns>UserPrincipal 对象。</returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.Bind(XMS.Core.SecurityContext)">
            <summary>
            将当前用户对象绑定到当前安全上下文中，之后，便可通过 SecurityContext.Current.User 访问该用户对象。
            </summary>
            <param name="securityContext"></param>
        </member>
        <member name="M:XMS.Core.UserPrincipal.#ctor(XMS.Core.UserIdentity)">
            <summary>
            初始化 UserPrincipal 类的新实例。
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:XMS.Core.UserPrincipal.#ctor(XMS.Core.UserIdentity,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            初始化 UserPrincipal 类的新实例。
            </summary>
            <param name="identity"></param>
            <param name="deviceId"></param>
            <param name="extendProperties"></param>
        </member>
        <member name="M:XMS.Core.UserPrincipal.IsInRole(System.String)">
            <summary>
            判断当前会员是否具有指定的角色。
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.HasPermission(System.String)">
            <summary>
            检查用户是否具有指定编码资源的访问权限。
            </summary>
            <param name="resourceCode"></param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.UserPrincipal.DeviceId">
            <summary>
            获取当前用户所登录设备的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.OrgId">
            <summary>
            获取当前用户所属组织的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.OrgPath">
            <summary>
            获取当前用户所属组织的路径。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.DutyLevel">
            <summary>
            获取当前用户在其所属组织的职务级别。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.Identity">
            <summary>
            获取当前会员的身份标识。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.ExtendProerties">
            <summary>
             获取或者设置当前会员的扩展属性集合。
            </summary>
        </member>
        <member name="T:XMS.Core.UserIdentity">
            <summary>
            会员身份标识
            </summary>
        </member>
        <member name="M:XMS.Core.UserIdentity.#ctor(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            初始化 UserIdentity 类的新实例。
            </summary>
            <param name="userId"></param>
            <param name="name"></param>
            <param name="token"></param>
            <param name="orgId"></param>
        </member>
        <member name="P:XMS.Core.UserIdentity.AuthenticationType">
            <summary>
            获取当前会员的身份认证类型。
            </summary>
        </member>
        <member name="P:XMS.Core.UserIdentity.IsAuthenticated">
            <summary>
            指示当前会员已被验证。
            </summary>
        </member>
        <member name="P:XMS.Core.UserIdentity.Name">
            <summary>
            获取当前会员的姓名。
            </summary>
        </member>
        <member name="P:XMS.Core.UserIdentity.UserId">
            <summary>
            获取当前会员的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.UserIdentity.OrgId">
            <summary>
            获取当前会员所属组织的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.UserIdentity.Token">
            <summary>
            获取当前会员访问系统使用的令牌。
            </summary>
        </member>
        <member name="T:XMS.Core.SecurityContext">
            <summary>
            安全上下文，不管是 Web 环境还是服务环境，提供获取当前安全上下文的统一访问入口。
            </summary>
        </member>
        <member name="M:XMS.Core.SecurityContext.InitCurrent">
            <summary>
            从请求中初始化 Current 属性，这可将 SecurityContext 当前实例初始化化，后续对 Current 属性的访问不再依赖于具体的请求上下文，可避免访问已经释放的 OperationContext.Current 时发生错误，
            并可提高后续访问的性能，但必须在执行结束时成对调用 ResetCurrent 方法，以防止在线程被复用时误用之前的上下文实例。
            </summary>
        </member>
        <member name="M:XMS.Core.SecurityContext.ResetCurrent">
            <summary>
            将 RunContext 的当前实例重设为 null，该方法一般与 InitCurrent 成对使用。
            </summary>
        </member>
        <member name="P:XMS.Core.SecurityContext.Current">
            <summary>
            获取当前安全上下文对象。
            </summary>
        </member>
        <member name="M:XMS.Core.SecurityContext.#ctor(System.Web.HttpContext,System.ServiceModel.OperationContext)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <param name="operationContext"></param>
        </member>
        <member name="P:XMS.Core.SecurityContext.User">
            <summary>
            获取访问当前系统的客户端用户主体对象，该属性不可能为 null。
            </summary>
        </member>
        <member name="P:XMS.Core.SecurityContext.UserIP">
            <summary>
            获取客户端访问者的 IP，该属性不可能为空或者空字符串。
            </summary>
        </member>
        <member name="P:XMS.Core.SecurityContext.AppAgent">
            <summary>
            获取访问当前系统的客户端应用代理。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Tasks.TaskManager">
            <summary>
            表示 ITask 的管理器，用于对任务实例进行管理，可响应配置文件变化事件。
            </summary>
        </member>
        <member name="P:XMS.Core.Tasks.TaskManager.Instance">
            <summary>
            ManageableServiceHostManager 类的单例访问入口。
            </summary>
        </member>
        <member name="P:XMS.Core.Tasks.TaskManager.DefaultTriggerTaskHost">
            <summary>
            获取系统内置的默认触发性任务宿主。
            </summary>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.RegisterTask(System.Type)">
            <summary>
            向 ManageableServiceHostFactory 中注册任务类型。
            </summary>
            <param name="taskType">要注册的任务类型。</param>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.RegisterTask(XMS.Core.ITask)">
            <summary>
            向 ManageableServiceHostFactory 注册任务实例。
            </summary>
            <param name="taskInstance">要注册的任务实例。</param>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.Start">
            <summary>
            启动服务管理器。
            </summary>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.Stop">
            <summary>
            停止服务管理器。
            </summary>
        </member>
        <member name="P:XMS.Core.Tasks.TaskManager.IsTraceEnabled">
            <summary>
            获取一个值，该值指示是否启用跟踪更能。
            </summary>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.LogToTrace(System.String)">
            <summary>
            将指定的消息记录到跟踪日志，通常在 OnTrace 方法之外调用。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.LogToTrace(System.Exception)">
            <summary>
            将指定的异常记录到任务跟踪日志，通常在 OnTrace 方法之外调用。
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="T:XMS.Core.Triplet`3">
            <summary>
            表示用于存储三个相关对象的基本结构。
            </summary>
        </member>
        <member name="P:XMS.Core.Triplet`3.First">
            <summary>
            获取或设置三元结构的第一个对象。 
            </summary>
        </member>
        <member name="P:XMS.Core.Triplet`3.Second">
            <summary>
            获取或设置三元结构的第二个对象。 
            </summary>
        </member>
        <member name="P:XMS.Core.Triplet`3.Third">
            <summary>
            获取或设置三元结构的第三个对象。 
            </summary>
        </member>
        <member name="M:XMS.Core.Triplet`3.#ctor">
            <summary>
            初始化 Triplet 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.ITaskTrace">
            <summary>
            任务跟踪接口（默认不启用），启用时，每间隔指定时间（默认值一分钟）在独立文件（task\trace.log)中输出任务状态信息。
            </summary>
        </member>
        <member name="M:XMS.Core.ITaskTrace.Trace(System.Text.StringBuilder)">
            <summary>
            跟踪任务执行状态。
            </summary>
            <param name="sb"></param>
        </member>
        <member name="T:XMS.Core.ITask">
            <summary>
            任务接口
            </summary>
        </member>
        <member name="P:XMS.Core.ITask.Name">
            <summary>
            获取任务的名称。
            </summary>
        </member>
        <member name="M:XMS.Core.ITask.Execute(System.Nullable{System.DateTime})">
            <summary>
            执行
            </summary>
            <param name="lastExecuteTime">上次执行时间。</param>
        </member>
        <member name="T:XMS.Core.IIntervalTask">
            <summary>
            循环性任务
            </summary>
        </member>
        <member name="E:XMS.Core.IIntervalTask.Started">
            <summary>
            任务启动事件
            </summary>
        </member>
        <member name="E:XMS.Core.IIntervalTask.Stoped">
            <summary>
            任务停止事件
            </summary>
        </member>
        <member name="M:XMS.Core.IIntervalTask.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XMS.Core.IIntervalTask.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="P:XMS.Core.IIntervalTask.ExecuteInterval">
            <summary>
            获取任务执行的时间间隔
            </summary>
        </member>
        <member name="T:XMS.Core.ITriggerTask">
            <summary>
            触发性任务接口
            </summary>
        </member>
        <member name="P:XMS.Core.ITriggerTask.Host">
            <summary>
            获取或设置触发性任务所属的宿主。
            </summary>
        </member>
        <member name="P:XMS.Core.ITriggerTask.Key">
            <summary>
            获取该触发性任务的键，可根据该键值从调度宿主中获取当前接口的实例。
            </summary>
        </member>
        <member name="P:XMS.Core.ITriggerTask.NextExecuteTime">
            <summary>
            获取或设置下次执行时间。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.ITriggerTask.GetNextExecuteTime">
            <summary>
            获取下次执行时间,触发性任务调度宿主底层使用下次执行时间对所有需要调度的任务进行升序排序，
            因此下次执行时间只有在执行的过程中才可以修改（原因是执行前该任务已经被从调度队列中移除），
            否则可能会造成调度队列顺序错乱，从而引发不可预知的错误。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.TriggerTaskBase">
            <summary>
            触发性任务基类
            </summary>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.Host">
            <summary>
            获取或设置触发性任务所属的宿主。
            </summary>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.NextExecuteTime">
            <summary>
            获取或设置下次执行时间。
            触发性任务调度宿主底层使用下次执行时间对所有需要调度的任务进行升序排序，
            因此下次执行时间只有在执行的过程中才可以修改（原因是执行前该任务已经被从调度队列中移除），
            否则可能会造成调度队列顺序错乱，从而引发不可预知的错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.TriggerTaskBase.GetNextExecuteTime">
            <summary>
            获取下次执行时间,触发性任务调度宿主底层使用下次执行时间对所有需要调度的任务进行升序排序，
            因此下次执行时间只有在执行的过程中才可以修改（原因是执行前该任务已经被从调度队列中移除），
            否则可能会造成调度队列顺序错乱，从而引发不可预知的错误。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.IsTraceEnabled">
            <summary>
            获取一个值，该值指示是否启用跟踪更能。
            </summary>
        </member>
        <member name="M:XMS.Core.TriggerTaskBase.OnTrace(System.Text.StringBuilder)">
            <summary>
            OnTrace
            </summary>
            <param name="sb"></param>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.Key">
            <summary>
            任务的键。
            </summary>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.Name">
            <summary>
            任务名称。
            </summary>
        </member>
        <member name="M:XMS.Core.TriggerTaskBase.#ctor(System.String,System.String)">
            <summary>
            初始化 <see cref="T:XMS.Core.IntervalTaskBase"/> 类的新实例。
            </summary>
            <param name="key"></param>
            <param name="name"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskBase.Execute(System.Nullable{System.DateTime})">
            <summary>
            执行任务
            </summary>
            <param name="lastExecuteTime"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskBase.CompareTo(XMS.Core.ITriggerTask)">
            <summary>
            比较器实现，以用于在字典中对两个 触发性任务 强制进行排序。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.IntervalTaskBase">
            <summary>
            循环性任务基类。
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.IsTraceEnabled">
            <summary>
            获取一个值，该值指示是否启用跟踪更能。
            </summary>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.OnTrace(System.Text.StringBuilder)">
            <summary>
            OnTrace
            </summary>
        </member>
        <member name="E:XMS.Core.IntervalTaskBase.Started">
            <summary>
            任务启动事件
            </summary>
        </member>
        <member name="E:XMS.Core.IntervalTaskBase.Stoped">
            <summary>
            任务停止事件
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.Name">
            <summary>
            任务名称。
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.ExecuteInterval">
            <summary>
            心跳时间
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.IsRunning">
            <summary>
            获取一个值，该值指示任务是否正在运行。
            </summary>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.#ctor(System.String,System.TimeSpan)">
            <summary>
            初始化 <see cref="T:XMS.Core.IntervalTaskBase"/> 类的新实例。
            </summary>
            <param name="name"></param>
            <param name="flushInterval"></param>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.#ctor(System.String,System.TimeSpan,System.Threading.ThreadPriority)">
            <summary>
            初始化 <see cref="T:XMS.Core.IntervalTaskBase"/> 类的新实例。
            </summary>
            <param name="name"></param>
            <param name="flushInterval"></param>
            <param name="priority"></param>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.Execute(System.Nullable{System.DateTime})">
            <summary>
            执行当前任务
            </summary>
            <param name="lastExecuteTime">上次执行的时间。</param>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.Awaken">
            <summary>
            
            </summary>
        </member>
        <member name="T:XMS.Core.TriggerTaskHostBase">
            <summary>
            触发性任务宿主任务，可用于执行大量触发性任务。
            </summary>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.OnTrace(System.Text.StringBuilder)">
            <summary>
            OnTrace
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.#ctor(System.String,System.TimeSpan)">
            <summary>
            使用指定的名称、时间间隔初始化 <see cref="T:XMS.Core.TriggerTaskHostBase"/> 类的新实例。
            </summary>
            <param name="name"></param>
            <param name="flushInterval"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.#ctor(System.String,System.TimeSpan,System.Threading.ThreadPriority)">
            <summary>
            使用指定的名称、时间间隔、线程优先级初始化 <see cref="T:XMS.Core.TriggerTaskHostBase"/> 类的新实例。
            </summary>
            <param name="name"></param>
            <param name="flushInterval"></param>
            <param name="priority"></param>
        </member>
        <member name="P:XMS.Core.TriggerTaskHostBase.SyncObject">
            <summary>
            获取当前调度宿主中用于线程同步的对象。
            </summary>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.CreateTriggerTasks">
            <summary>
            在启动的时候，创建要执行的触发器任务数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.ContainsTriggerTask(XMS.Core.ITriggerTask)">
            <summary>
            获取宿主中是否包含指定的触发性任务。
            </summary>
            <param name="triggerTask"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.GetTriggerTask(System.String)">
            <summary>
            获取指定键的触发性任务。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.UnregisterTriggerTask(System.String)">
            <summary>
            删除一个触发性任务。
            </summary>
            <param name="key"></param>
            <returns>成功删除返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.RegisterTriggerTask(XMS.Core.ITriggerTask)">
            <summary>
            注册触发性任务。
            </summary>
            <param name="triggerTask"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.Execute(System.Nullable{System.DateTime})">
            <summary>
            执行
            </summary>
            <param name="lastExecuteTime"></param>
        </member>
        <member name="M:XMS.Core.DefaultTriggerTaskHost.#ctor">
            <summary>
            使用指定的名称、时间间隔初始化 <see cref="T:XMS.Core.TriggerTaskHostBase"/> 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.StringWellFormatType">
            <summary>
            定义用于 StringInterceptAttribute 的格式化选项。
            </summary>
        </member>
        <member name="F:XMS.Core.StringWellFormatType.None">
            <summary>
            不进行格式化。
            </summary>
        </member>
        <member name="F:XMS.Core.StringWellFormatType.Text">
            <summary>
            格式化为文本
            </summary>
        </member>
        <member name="F:XMS.Core.StringWellFormatType.Html">
            <summary>
            格式化为 Html
            </summary>
        </member>
        <member name="T:XMS.Core.StringInterceptTarget">
            <summary>
            定义 StringInterceptAttribute 的适用目标，默认值为 Input，即全部都适用。
            </summary>
        </member>
        <member name="F:XMS.Core.StringInterceptTarget.Input">
            <summary>
            仅输入时适用。
            </summary>
        </member>
        <member name="F:XMS.Core.StringInterceptTarget.Output">
            <summary>
            仅输出时适用。
            </summary>
        </member>
        <member name="F:XMS.Core.StringInterceptTarget.InputAndOutput">
            <summary>
            输入和输出时适用。
            </summary>
        </member>
        <member name="T:XMS.Core.StringInterceptAttribute">
            <summary>
            定义字符串拦截特性，默认只启用 TrimSpace 选项。
            </summary>
            <example>
            [StringIntercept] // 等价于 [StringIntercept(TrimSpace=true, AntiXSS=false, FilterSensitiveWords=true)]，对整个类的输入参数和返回值进行整体控制
            public class TestService : ITestService
            {
            	[StringIntercept] // 等价于 [StringIntercept(TrimSpace=true, AntiXSS=false, FilterSensitiveWords=true)]，对整个方法的输入参数和返回值进行整体控制
            	[return:StringIntercept(TrimSpace=true, AntiXSS=true, FilterSensitiveWords=true)] // 对方法的返回值进行个别控制
            	public string Test(
            			[StringIntercept(TrimSpace=true, AntiXSS=true, FilterSensitiveWords=true)] // 对参数的返回值进行个别控制
            			object value, 
            			[StringIntercept(TrimSpace=true, AntiXSS=false, FilterSensitiveWords=true)] // 对参数的返回值进行个别控制
            			string b, 
            			string c, object o
            		)
            	{
            		return (string)value;
            	}
            }
            </example>
        </member>
        <member name="P:XMS.Core.StringInterceptAttribute.TrimSpace">
            <summary>
            获取或设置一个值，该值指示要对目标字符串调用 String.Trim 方法进行处理。
            </summary>
        </member>
        <member name="P:XMS.Core.StringInterceptAttribute.AntiXSS">
            <summary>
            获取或设置一个值，该值指示要对目标字符串进行反注入处理。
            </summary>
        </member>
        <member name="P:XMS.Core.StringInterceptAttribute.WellFormatType">
            <summary>
            获取或设置一个值，该值指示要对目标字符串进行友好格式化。
            </summary>
        </member>
        <member name="P:XMS.Core.StringInterceptAttribute.FilterSensitiveWords">
            <summary>
            获取或设置一个值，该值指示要对目标字符串进行敏感词过滤处理。
            </summary>
        </member>
        <member name="P:XMS.Core.StringInterceptAttribute.Target">
            <summary>
            获取或设置一个值，该值指示要进行拦截的适用范围。
            </summary>
        </member>
        <member name="M:XMS.Core.StringInterceptAttribute.#ctor">
            <summary>
            初始化 StringInterceptAttribute 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.IgnoreStringInterceptAttribute">
            <summary>
            指定特定的类型、属性忽略字符串拦截机制（即 禁止拦截）
            </summary>
        </member>
        <member name="M:XMS.Core.IgnoreStringInterceptAttribute.#ctor">
            <summary>
            初始化 IgnoreStringInterceptAttribute 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Business.AppSettingHelper.sStaticUploadUrl">
            <summary>
            图片站点Url
            </summary>
        </member>
        <member name="T:XMS.Core.StringHelper">
            <summary>
            常用的String类的扩展方法
            </summary>
        </member>
        <member name="M:XMS.Core.StringHelper.ToHtmlEncode(System.String)">
            <summary>
            返回对指定字符串进行 HtmlEncode 后的编码
            </summary>
            <param name="value">要编码的字符串。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToHtmlEncode(System.String,System.Boolean)">
            <summary>
            返回对指定字符串进行 HtmlEncode 后的编码
            </summary>
            <param name="value">要编码的字符串。</param>
            <param name="replaceNewline">是否将换行符替换成 br。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToHtmlAttributeEncode(System.String)">
            <summary>
            将当前字符串转换为 Html Attribute 编码格式，转换后的字符串可以出现在 Html 标签的属性或 JS 脚本的字符串中；
            该转换首先调用 HttpUtility.HtmlEncode 对字符串进行编码，然后，将未编码的转义字符 “\” 替换为 “\\”
            </summary>
            <param name="value">要编码的文本。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToSafeHtml(System.String)">
            <summary>
            获取安全的Html字符串，过滤可能引起XSS注入的html代码
            用于保存富文本时使用
            </summary>
            <param name="value">要转换的文本。</param>
            <returns>转换后的文本。</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XMS.Core.StringHelper.ToDBText(System.String)" -->
        <member name="M:XMS.Core.StringHelper.ToEscapedSQLLike(System.String)">
            <summary>
            返回转义的 SQL Like 子句。
            </summary>
            <param name="value">要转义的字符串。</param>
            <returns>转义后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToSafeSQLLike(System.String)">
            <summary>
            返回安全的 SQL Like 子句。
            </summary>
            <param name="value">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToSafeSQLSortField(System.String)">
            <summary>
            返回安全的 SQL 排序字段。
            </summary>
            <param name="value">要转义的字符串。</param>
            <returns>转义后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToDBC(System.String)">
            <summary>
            全角转半角。
            </summary>
            <param name="value">要转换的字符串。</param>
            <returns>转换以后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToSBC(System.String)">
            <summary>
            半角转全角。
            </summary>
            <param name="value">要转换的字符串。</param>
            <returns>转换以后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.FastToUtf8Bytes(System.String)">
            <summary>
            Skip the encoding process for 'safe strings' 
            </summary>
            <param name="strVal"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.GetFileNameWithoutExtension(System.String)">
            <summary>
            取得不带文件后缀的文件名
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.GetParentDirectory(System.String)">
            <summary>
            取得父目录
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.SplitOnFirst(System.String,System.String)">
            <summary>
            按照needle的位置，把字符串分成两截，从后面往前找needle的位置。找不到needle，返回原字符串.如原字符串是空白或空，返会长度为零的数组
            </summary>
            <param name="strVal"></param>
            <param name="needle"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.SplitOnLast(System.String,System.Char)">
            <summary>
            按照needle的位置，把字符串分成两截，从前面往前找needle的位置。找不到needle，返回原字符串.如原字符串是空白或空，返会长度为零的数组
            </summary>
            <param name="strVal"></param>
            <param name="needle"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.StartWithIgnoreCase(System.String,System.String)">
            <summary>
            忽略大小写的StartWith
            </summary>
            <param name="text"></param>
            <param name="startsWith"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.EndWithIgnoreCase(System.String,System.String)">
            <summary>
            忽略大小写的EndWith
            </summary>
            <param name="text"></param>
            <param name="endsWith"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.CompareIgnoreCase(System.String,System.String)">
            <summary>
            Compares two specified System.String objects using the specified rules, and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.SafeSubstring(System.String,System.Int32)">
            <summary>
            安全返回子字符串。跨界不会爆掉
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            安全返回子字符串。跨界不会爆掉
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToEnum``1(System.String)">
            <summary>
            找不到枚举值会爆掉
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsNullOrWhiteSpace(System.String)">
            <summary>
            是不是空值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.FormatWith(System.String,System.Object[])">
            <summary>
            调用String.Format
            </summary>
            <param name="text"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.WellFormatToHtml(System.String)">
            <summary>
            将指定文本转换为一个可在 Web 页面中安全显示的 Html。
            此转换中将 \r、\n 或 它们的组合替换为 br。
            </summary>
            <param name="value">要格式化的字符串。</param>
            <returns>格式化以后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.WellFormatToText(System.String)">
            <summary>
            将指定文本转换为保持基本段落格式的纯文本。
            此转换中将 br p 替换为 \r\n ，忽略其它 html 标签。
            </summary>
            <param name="value">要格式化的字符串。</param>
            <returns>格式化以后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.CountOccurrencesOf(System.String,System.Char)">
            <summary>
            统计needle的个数
            </summary>
            <param name="text"></param>
            <param name="needle"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.AntiXSS(System.String)">
            <summary>
            移除字符串中所有危险的 HTML 代码，防止跨站脚本攻击。
            </summary>
            <param name="value">要进行反注入处理的字符串。</param>
            <returns>反注入处理后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.FilterSensitiveWords(System.String)">
            <summary>
            移除字符串中所有敏感词。
            </summary>
            <param name="value">要进行敏感词过滤的字符串。</param>
            <returns>敏感词过滤后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToBoolean(System.String,System.Boolean)">
            <summary>
            尝试将逻辑值的字符串表示形式转换为它的等效 System.Boolean，如果转换失败，则返回指定的默认值或者 System.Boolean 类型的默认值 false。
            </summary>
            <param name="value">包含要转换的逻辑值的字符串。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与逻辑值的字符串表示形式等效的 System.Boolean,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableBoolean(System.String)">
            <summary>
            尝试将逻辑值的字符串表示形式转换为它的等效 System.Boolean，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的逻辑值的字符串。</param>
            <returns>与逻辑值的字符串表示形式等效的 System.Boolean,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToEnum``1(System.String,``0)">
            <summary>
            尝试将逻辑值的字符串表示形式转换为它的等效 System.Boolean，如果转换失败，则返回指定的默认值或者 System.Boolean 类型的默认值 false。
            </summary>
            <param name="value">包含要转换的逻辑值的字符串。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与逻辑值的字符串表示形式等效的 System.Boolean,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableEnum``1(System.String)">
            <summary>
            尝试将逻辑值的字符串表示形式转换为它的等效 System.Boolean，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的逻辑值的字符串。</param>
            <returns>与逻辑值的字符串表示形式等效的 System.Boolean,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToChar(System.String,System.Char)">
            <summary>
            尝试将字符串的值转换为它的等效 Unicode 字符，如果转换失败，则返回指定的默认值或者 System.Char 类型的默认值。
            </summary>
            <param name="value">包含要转换的 Unicode 字符的字符串。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与字符的字符串表示形式等效的 System.Char,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableChar(System.String)">
            <summary>
            尝试将字符串的值转换为它的等效 Unicode 字符，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的 Unicode 字符的字符串。</param>
            <returns>与字符的字符串表示形式等效的 System.Char,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDateTime(System.String,System.DateTime)">
            <summary>
            尝试将时间的字符串表示形式转换为它的等效 System.DateTime，如果转换失败，则返回指定的默认值或者 System.DateTime 类型的默认值。
            </summary>
            <param name="value">包含要转换的时间的字符串。该字符串使用 System.Globalization.DateTimeStyles.None 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与时间的字符串表示形式等效的 System.DateTime,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDateTime(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider,System.DateTime)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.DateTime，如果转换失败，则返回指定的默认值或者 System.DateTime 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.DateTimeStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.DateTimeStyles.None。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与时间的字符串表示形式等效的 System.DateTime,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDateTime(System.String)">
            <summary>
            尝试将时间的字符串表示形式转换为它的等效 System.DateTime，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的时间的字符串。该字符串使用 System.Globalization.DateTimeStyles.None 样式来进行解释。</param>
            <returns>与时间的字符串表示形式等效的 System.DateTime,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDateTime(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.DateTime，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.DateTimeStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.DateTimeStyles.None。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与时间的字符串表示形式等效的 System.DateTime,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToTimeSpan(System.String,System.TimeSpan)">
            <summary>
            尝试将时间间隔的字符串表示形式转换为它的等效 System.TimeSpan，如果转换失败，则返回指定的默认值或者 System.TimeSpan 类型的默认值。
            </summary>
            <param name="value">包含要转换的时间的字符串。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与时间间隔的字符串表示形式等效的 System.TimeSpan,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToTimeSpan(System.String,System.IFormatProvider,System.TimeSpan)">
            <summary>
            尝试将时间间隔的字符串表示形式转换为它的等效 System.TimeSpan，如果转换失败，则返回指定的默认值或者 System.TimeSpan 类型的默认值。
            </summary>
            <param name="value">包含要转换的时间的字符串。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与时间间隔的字符串表示形式等效的 System.TimeSpan,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableTimeSpan(System.String)">
            <summary>
            尝试将时间的字符串表示形式转换为它的等效 System.TimeSpan，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的时间的字符串。</param>
            <returns>与时间的字符串表示形式等效的 System.TimeSpan,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableTimeSpan(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.TimeSpan，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与时间的字符串表示形式等效的 System.TimeSpan,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDecimal(System.String,System.Decimal)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Decimal，如果转换失败，则返回指定的默认值或者 System.Decimal 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Number 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Decimal,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Decimal，如果转换失败，则返回指定的默认值或者 System.Decimal 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Number。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Decimal,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDecimal(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Decimal，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Number 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Decimal,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Decimal，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Number。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Decimal,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToSingle(System.String,System.Single)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Single，如果转换失败，则返回指定的默认值或者 System.Single 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.float 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Single,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Single，如果转换失败，则返回指定的默认值或者 System.Single 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.float。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Single,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableSingle(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Single，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.float 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Single,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Single，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.float。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Single,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDouble(System.String,System.Double)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Double，如果转换失败，则返回指定的默认值或者 System.Double 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Float 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Double,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Double，如果转换失败，则返回指定的默认值或者 System.Double 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Float。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Double,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDouble(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Double，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Float 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Double,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Double，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Float。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Double,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToByte(System.String,System.Byte)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Byte，如果转换失败，则返回指定的默认值或者 System.Byte 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Byte,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Byte，如果转换失败，则返回指定的默认值或者 System.Byte 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Byte,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableByte(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Byte，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Byte,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Byte，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Byte,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt16(System.String,System.Int16)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int16，如果转换失败，则返回指定的默认值或者 System.Int16 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int16,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int16，如果转换失败，则返回指定的默认值或者 System.Int16 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int16,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt16(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int16，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Int16,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int16，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Int16,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt32(System.String,System.Int32)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int32，如果转换失败，则返回指定的默认值或者 System.Int32 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int32,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int32，如果转换失败，则返回指定的默认值或者 System.Int32 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int32,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt32(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int32，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Int32,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int32，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Int32,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt64(System.String,System.Int64)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int64，如果转换失败，则返回指定的默认值或者 System.Int64 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int64,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int64，如果转换失败，则返回指定的默认值或者 System.Int64 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int64,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt64(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int64，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Int64,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int64，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Int64,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToSByte(System.String,System.SByte)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.SByte，如果转换失败，则返回指定的默认值或者 System.SByte 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.SByte,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.SByte，如果转换失败，则返回指定的默认值或者 System.SByte 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.SByte,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableSByte(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.SByte，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.SByte,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.SByte，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.SByte,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt16(System.String,System.UInt16)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt16，如果转换失败，则返回指定的默认值或者 System.UInt16 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt16,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt16，如果转换失败，则返回指定的默认值或者 System.UInt16 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt16,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt16(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt16，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt16,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt16，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt16,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt32(System.String,System.UInt32)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt32，如果转换失败，则返回指定的默认值或者 System.UInt32 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt32,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt32，如果转换失败，则返回指定的默认值或者 System.UInt32 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt32,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt32(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt32，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt32,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt32，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt32,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt64(System.String,System.UInt64)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt64，如果转换失败，则返回指定的默认值或者 System.UInt64 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt64,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt64，如果转换失败，则返回指定的默认值或者 System.UInt64 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt64,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt64(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt64，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt64,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt64，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt64,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoTrim(System.String,System.Char[])">
            <summary>
            移除字符串中指定的一组字符的所有前导和尾部匹配项，不用考虑字符串是否为 null 或 空字符串。
            </summary>
            <param name="value">要从中移除特定字符的字符串。</param>
            <param name="trimChars">要移除的一组字符，不指定则只移除空格字符。</param>
            <returns>移除特定字符后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoTrimStart(System.String,System.Char[])">
            <summary>
            移除字符串中指定的一组字符的所有前导匹配项，不用考虑字符串是否为 null 或 空字符串。
            </summary>
            <param name="value">要从中移除前导匹配字符的字符串。</param>
            <param name="trimChars">要移除的一组字符，不指定则只移除空格字符。</param>
            <returns>移除前导匹配字符后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoTrimEnd(System.String,System.Char[])">
            <summary>
            移除字符串中指定的一组字符的所有尾部匹配项，不用考虑字符串是否为 null 或 空字符串。
            </summary>
            <param name="value">要从中移除尾部匹配字符的字符串。</param>
            <param name="trimChars">要移除的一组字符，不指定则只移除空格字符。</param>
            <returns>移除尾部匹配字符后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoTrimAny(System.String,System.Char[])">
            <summary>
            移除字符串中指定的一组字符任意位置的匹配项，不用考虑字符串是否为 null 或 空字符串。
            </summary>
            <param name="value">要从中移除任意匹配字符的字符串。</param>
            <param name="trimChars">要移除的一组字符，不指定则只移除空格字符。</param>
            <returns>移除任意匹配字符后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoSubStringByByte(System.String,System.Int32,System.String)">
            <summary>
            截取字符串中指定字节长度的子字符串，当截取后的字符串长度小于原始字符串长度时附加指定的后缀。
            </summary>
            <param name="value">所要截取的字符串</param>
            <param name="byteCount">截取字符串的字节长度。</param>
            <param name="suffix">后缀</param>
            <returns>截取后且附加了指定后缀的字符串</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoSubStringByByte(System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            截取字符串中指定字节长度的子字符串，当截取后的字符串长度小于原始字符串长度时附加指定的后缀。
            </summary>
            <param name="value">所要截取的字符串</param>
            <param name="byteCount">截取字符串的字节长度。</param>
            <param name="encoding">编码格式。</param>
            <param name="suffix">后缀</param>
            <returns>截取后且附加了指定后缀的字符串</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoSubStringByCharacter(System.String,System.Int32,System.String)">
            <summary>
            截取字符串中指定字符长度的子字符串，当截取后的字符串长度小于原始字符串长度时附加指定的后缀。
            </summary>
            <param name="value">所要截取的字符串</param>
            <param name="doubleByteCount">截取字符串的字符长度。</param>
            <param name="suffix">后缀</param>
            <returns>截取后且附加了指定后缀的字符串</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoEncryp(System.String)">
            <summary>
            加密指定的字符串，如果字符串为 null、空字符串 或者解密过程中发生错误则返回空字符串（即 String.Empty)。
            </summary>
            <param name="value">要加密的字符串。</param>
            <returns>加密后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoDecrypt(System.String)">
            <summary>
            解密指定的字符串，如果字符串为 null、空字符串 或者解密过程中发生错误则返回空字符串（即 String.Empty)。
            </summary>
            <param name="value">要解密的字符串。</param>
            <returns>解密后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsEmail(System.String)">
            <summary>
            判断字符串是否为邮件地址，用于判断邮件格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Email”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是邮件地址，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsTelephone(System.String)">
            <summary>
            判断字符串是否为电话（固话）号码，用于判断电话（固话）号码格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Telephone”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是电话（固话）号码，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsMobilePhone(System.String)">
            <summary>
            判断字符串是否为手机号码，用于判断手机号码格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_MobilePhone”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是手机号码，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsPostcode(System.String)">
            <summary>
            判断字符串是否为邮编，用于判断邮编格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Postcode”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是手机号码，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsChinese(System.String)">
            <summary>
            判断字符串是否为中文字符串，用于判断中文字符串格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Chinese”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是中文字符串，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsOnlyDigital(System.String)">
            <summary>
            是否是纯数字字符串，包含任何非数字字符均返回false
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsOnlyEnglishLetter(System.String)">
            <summary>
            是否是纯英文字符串，包含任何非英文字符均返回false
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsOnlyEnglishLetterOrDigital(System.String)">
            <summary>
            是否是纯英文或者数字字符串，包含任何非英文或者数字字符均返回false
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ContainsChinese(System.String)">
            <summary>
            判断字符串是否包含中文字符，用于判断中文字符串格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Chinese”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是中文字符串，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsUrl(System.String)">
            <summary>
            判断字符串是否为 Url，用于判断 Url 格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Url”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是 Url，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsUri(System.String)">
            <summary>
            判断字符串是否为 Uri，用于判断 Uri 格式的正则可在 AppSettings.Config 中进行配置。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是 Uri，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsUri(System.String,XMS.Core.UriType)">
            <summary>
            判断字符串是符合指定类型的 Uri，用于判断 Uri 格式的正则可在 AppSettings.Config 中进行配置。
            </summary>
            <param name="value">要判断的字符串。</param>
            <param name="value">用于判断字符串是否符合的 Uri 类型。</param>
            <returns>如果字符串是指定类型的 Uri，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsIP4(System.String)">
            <summary>
            判断字符串是否为 IP4，用于判断中文字符串格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_IP4”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是 IP4，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsPassword(System.String)">
            <summary>
            判断字符串是否为 Password，用于判断密码格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Password”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是有效密码，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.CombineUrl(System.String,System.String)">
            <summary>
            将基 URL 和 相对 URL 合并，忽略前后的 / 字符
            </summary>
            <param name="baseUrl">基 URL。</param>
            <param name="relativeUrl">相对 URL。</param>
            <returns>合并后的 URL。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.GenerateRandom(System.Int32)">
            <summary>
            生成一个具有指定长度的随机字符串，该字符串由 _、数字、小写字母、大写字母 组成
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.GenerateRandom(System.Int32,System.String)">
            <summary>
            生成一个具有指定长度的随机字符串，该字符串由指定字符串限定范围内的字符组成
            </summary>
            <param name="length">长度</param>
            <param name="charsRange">一个字符串，限定随机字符串中可能出现的字符的范围</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToVerifyCodeImage(System.String)">
            <summary>
            将字符串输出为验证码图片字节数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:XMS.Core.UriType">
            <summary>
            Url 的类型。
            </summary>
        </member>
        <member name="F:XMS.Core.UriType.Default">
            <summary>
            Http、Https 或者未指定头的 url
            </summary>
        </member>
        <member name="T:XMS.Core.IPool`1">
            <summary>
            定义一组可用来操纵对象的方法。
            </summary>
            <typeparam name="T">池中存放的对象的类型。</typeparam>
        </member>
        <member name="M:XMS.Core.IPool`1.Pop">
            <summary>
            从对象池中获取一个可用的对象以进行操作， 对象使用完毕后，请调用 <see cref="M:XMS.Core.IPool`1.Push(`0)"/> 方法将其放回对象池，对象使用过程中如果发现已失效，请调用 <see cref="M:XMS.Core.IPool`1.Release(`0)"/> 方法释放它。
            </summary>
            <returns>从对象池中取到的对象。</returns>
        </member>
        <member name="M:XMS.Core.IPool`1.Push(`0)">
            <summary>
            将从对象池中获取的对象重新放入对象池。
            </summary>
            <param name="item">要放入对象池中的对象。</param>
        </member>
        <member name="M:XMS.Core.IPool`1.Release(`0)">
            <summary>
            释放从对象池中获取的对象。
            </summary>
            <param name="item">要释放的对象。</param>
        </member>
        <member name="T:XMS.Core.ObjectPool`1">
            <summary>
            提供一个通用对象池模式的轻量实现。
            </summary>
            <typeparam name="T">池中存放的对象的类型。</typeparam>
        </member>
        <member name="P:XMS.Core.ObjectPool`1.EnablePerfCounters">
            <summary>
            获取或设置一个值，该值指示当前对象池是否启用性能计数器，如果启用则为 true， 否则为 false。
            </summary>
            <remarks>
            该值可在运行时修改，以根据需要观察性能。当在程序运行时修改 ObjectPoolPerfCounters 参数启用性能计数器时，要新开性能计数器监测面板以查看结果，在原性能计数器监测面板可能要延迟几分钟才能看到结果。
            </remarks>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.EnterLock(System.Int32)">
            <summary>
            进入锁定状态。
            </summary>
            <param name="millisecondsTimeout">超时毫秒数，-1 或其它小于 0 的值，表示成功进入锁定状态前永不超时， 0 或其它大于 0 的值，表示成功进入锁定状态前的最大等待时间。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.ExitLock">
            <summary>
            退出锁定状态。
            </summary>
        </member>
        <member name="P:XMS.Core.ObjectPool`1.Count">
            <summary>
            获取当前对象池中有效对象的数量。
            </summary>
        </member>
        <member name="P:XMS.Core.ObjectPool`1.IdleCount">
            <summary>
            获取对象池中空闲对象的数量。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.#ctor(System.String,System.Func{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            初始化 ObjectPool 类的新实例。
            </summary>
            <param name="name">对象池的名称，同时也使用此名称创建性能计数器实例。</param>
            <param name="createFunction">用来初始化对象的函数</param>
            <param name="lowWatermark">对象池低水位线，Pop 时，lowWatermark 以下的对象按 FIFO（先进先出）算法进行提取，以平均使用每个对象并维持池中对象为教合适的状态。</param>
            <param name="highWatermark">对象池高水位线，Pop 时，lowWatermark 和 highWatermark之间的对象按 LIFO（后进先出）算法进行提取，以尽可能使用最近经常使用的对象。</param>
            <param name="maxCount">对象池中生成的可用对象数量的最大值</param>
            <param name="initSize">对象池下限</param>
            <param name="inActiveTimeout">对象非活动逐出超时时间，如果该值小于等于 TimeSpan.Zero， 则对象永不超时逐出。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute(System.Action{`0})">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``1(System.Action{`0,``0},``0)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``2(System.Action{`0,``0,``1},``0,``1)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``3(System.Action{`0,``0,``1,``2},``0,``1,``2)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``4(System.Action{`0,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
            <param name="t5">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``5(System.Action{`0,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
            <param name="t5">action 的第四个参数</param>
            <param name="t6">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``1(System.Func{`0,``0})">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``2(System.Func{`0,``0,``1},``0)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``3(System.Func{`0,``0,``1,``2},``0,``1)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``4(System.Func{`0,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``5(System.Func{`0,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
            <param name="t5">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``6(System.Func{`0,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
            <param name="t5">action 的第四个参数</param>
            <param name="t6">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Pop">
            <summary>
            从对象池中获取一个可用的对象以进行操作， 对象使用完毕后，请调用 <see cref="M:XMS.Core.ObjectPool`1.Push(`0)"/> 方法将其放回对象池，对象使用过程中如果发现已失效，请调用 <see cref="M:XMS.Core.ObjectPool`1.Release(`0)"/> 方法释放它。
            </summary>
            <returns>从对象池中取到的对象。</returns>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Pop(System.Int32)">
            <summary>
            从对象池中获取一个可用的对象以进行操作， 对象使用完毕后，请调用 Push 方法将其放回对象池。
            </summary>
            <param name="millisecondsTimeout">超时毫秒数，0 立即返回，负值表示永不过期。</param>
            <returns>从对象池中取到的对象。</returns>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Push(`0)">
            <summary>
            将从对象池中获取的对象重新放入对象池。
            </summary>
            <param name="item">要放入对象池中的对象。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Push(`0,System.Int32)">
            <summary>
            将从对象池中获取的对象重新放入对象池。
            </summary>
            <param name="item">要放入对象池中的对象。</param>
            <param name="millisecondsTimeout">超时毫秒数，0 立即返回，负值表示永不超时。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Release(`0)">
            <summary>
            释放从对象池中获取的对象。
            </summary>
            <param name="item">要释放的对象。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Dispose">
            <summary>
            释放托管和非托管资源。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectPoolPerformanceCounterManager.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.ObjectPoolPerformanceCounterManager.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="T:MiscUtil.Conversion.BigEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from big-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.BigEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:MiscUtil.Conversion.BigEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:MiscUtil.Conversion.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:MiscUtil.Conversion.DoubleConverter">
            <summary>
            A class to allow the conversion of doubles to string representations of
            their exact decimal values. The implementation aims for readability over
            efficiency.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>A string representation of the double's exact decimal value.</returns>
        </member>
        <member name="T:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal">
            <summary>
            Private class used for manipulating sequences of decimal digits.
            </summary>
        </member>
        <member name="F:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.digits">
            <summary>Digits in the decimal expansion, one byte per digit</summary>
        </member>
        <member name="F:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:MiscUtil.Conversion.Endianness">
            <summary>
            Endianness of a converter
            </summary>
        </member>
        <member name="F:MiscUtil.Conversion.Endianness.LittleEndian">
            <summary>
            Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:MiscUtil.Conversion.Endianness.BigEndian">
            <summary>
            Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:MiscUtil.Conversion.LittleEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from little-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.LittleEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:MiscUtil.Conversion.LittleEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:MiscUtil.Conversion.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:Dapper.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.None">
            <summary>
            No additonal flags
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:Dapper.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="M:Dapper.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Dapper.CommandFlags)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:Dapper.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facitilies for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:Dapper.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type memebers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Dapper.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="E:Dapper.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache 
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configire the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandler(System.Type,Dapper.SqlMapper.ITypeHandler)">
            <summary>
            Configire the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandlerImpl(System.Type,Dapper.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configire the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandler``1(Dapper.SqlMapper.TypeHandler{``0})">
            <summary>
            Configire the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensability
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.commandType">
            <summary>
            The command type 
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.gridIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.connectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.parametersType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.Equals(Dapper.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.Execute(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the recordset</typeparam>
            <typeparam name="TSecond">The second type in the recordset</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the recordset</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ReplaceLiterals(Dapper.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.CreateParamInfoGenerator(Dapper.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:Dapper.SqlMapper.SetTypeMap(System.Type,Dapper.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share startegies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query 
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single recordset on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single recordset on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="T:Dapper.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:Dapper.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="direction"></param>
            <param name="size"></param>
        </member>
        <member name="P:Dapper.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="P:Dapper.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:Dapper.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="T:Dapper.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:Dapper.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="F:Dapper.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:Dapper.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="P:Dapper.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:Dapper.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:Dapper.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:Dapper.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="M:Dapper.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="T:Dapper.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:Dapper.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the featureset based on the passed connection
            </summary>
        </member>
        <member name="P:Dapper.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:Dapper.SimpleMemberMap">
            <summary>
            Represents simple memeber map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:Dapper.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dapper.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:Dapper.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:Dapper.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dapper.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dapper.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:Dapper.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="T:Dapper.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not impelmeneted as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:Dapper.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:Dapper.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:Dapper.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:ServiceStack.Text.FastMember.ObjectAccessor">
            <summary>
            Represents an individual object, allowing access to members by-name
            </summary>
        </member>
        <member name="P:ServiceStack.Text.FastMember.ObjectAccessor.Item(System.String)">
            <summary>
            Get or Set the value of a named member for the underlying object
            </summary>
        </member>
        <member name="P:ServiceStack.Text.FastMember.ObjectAccessor.Target">
            <summary>
            The object represented by this instance
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.Equals(System.Object)">
            <summary>
            Use the target types definition of equality
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.GetHashCode">
            <summary>
            Obtain the hash of the target object
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.ToString">
            <summary>
            Use the target's definition of a string representation
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.Create(System.Object)">
            <summary>
            Wraps an individual object, allowing by-name access to that instance
            </summary>
        </member>
        <member name="T:ServiceStack.Text.FastMember.TypeAccessor">
            <summary>
            Provides by-name member-access to objects of a given type
            </summary>
        </member>
        <member name="P:ServiceStack.Text.FastMember.TypeAccessor.CreateNewSupported">
            <summary>
            Does this type support new instances via a parameterless constructor?
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.TypeAccessor.CreateNew">
            <summary>
            Create a new instance of this type
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.TypeAccessor.Create(System.Type)">
            <summary>
            Provides a type-specific accessor, allowing by-name access for all objects of that type
            </summary>
            <remarks>The accessor is cached internally; a pre-existing accessor may be returned</remarks>
        </member>
        <member name="P:ServiceStack.Text.FastMember.TypeAccessor.Item(System.Object,System.String)">
            <summary>
            Get or set the value of a named member on the target instance
            </summary>
        </member>
        <member name="T:log4net.Core.CustomRepositorySelector">
            <summary>
            The default implementation of the <see cref="T:log4net.Core.IRepositorySelector"/> interface.
            </summary>
            <remarks>
            <para>
            Uses attributes defined on the calling assembly to determine how to
            configure the hierarchy for the repository.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="E:log4net.Core.CustomRepositorySelector.LoggerRepositoryCreatedEvent">
            <summary>
            Event to notify that a logger repository has been created.
            </summary>
            <value>
            Event to notify that a logger repository has been created.
            </value>
            <remarks>
            <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs"/> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.#ctor(System.Type)">
            <summary>
            Creates a new repository selector.
            </summary>
            <param name="defaultRepositoryType">The type of the repositories to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/></param>
            <remarks>
            <para>
            Create an new repository selector.
            The default type for repositories must be specified,
            an appropriate value would be <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="defaultRepositoryType"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="defaultRepositoryType"/> does not implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.GetRepository(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified assembly.
            </summary>
            <param name="repositoryAssembly">The assembly use to lookup the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <remarks>
            <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository"/> created and the repository 
            to create can be overridden by specifying the <see cref="T:log4net.Config.RepositoryAttribute"/> 
            attribute on the <paramref name="repositoryAssembly"/>.
            </para>
            <para>
            The default values are to use the <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> 
            implementation of the <see cref="T:log4net.Repository.ILoggerRepository"/> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name"/> as the name of the repository.
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be automatically configured using 
            any <see cref="T:log4net.Config.ConfiguratorAttribute"/> attributes defined on
            the <paramref name="repositoryAssembly"/>.
            </para>
            </remarks>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> for the assembly</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryAssembly"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.GetRepository(System.String)">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified repository.
            </summary>
            <param name="repositoryName">The repository to use to lookup the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified repository.</returns>
            <remarks>
            <para>
            Returns the named repository. If <paramref name="repositoryName"/> is <c>null</c>
            a <see cref="T:System.ArgumentNullException"/> is thrown. If the repository 
            does not exist a <see cref="T:log4net.Core.LogException"/> is thrown.
            </para>
            <para>
            Use <see cref="M:log4net.Core.CustomRepositorySelector.CreateRepository(System.String,System.Type)"/> to create a repository.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> is <see langword="null" />.</exception>
            <exception cref="T:log4net.Core.LogException"><paramref name="repositoryName"/> does not exist.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Create a new repository for the assembly specified 
            </summary>
            <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <returns>The repository created.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.CustomRepositorySelector.GetRepository(System.Reflection.Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository"/> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the 
            <paramref name="repositoryAssembly"/>.  The default values are to use the 
            <paramref name="repositoryType"/> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository"/> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name"/> as the name of the repository.
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute"/> 
            attributes defined on the <paramref name="repositoryAssembly"/>.
            </para>
            <para>
            If a repository for the <paramref name="repositoryAssembly"/> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType"/>.
            Also the <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryAssembly"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type,System.String,System.Boolean)">
            <summary>
            Creates a new repository for the assembly specified.
            </summary>
            <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryName">The name to assign to the created repository</param>
            <param name="readAssemblyAttributes">Set to <c>true</c> to read and apply the assembly attributes</param>
            <returns>The repository created.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.CustomRepositorySelector.GetRepository(System.Reflection.Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository"/> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the 
            <paramref name="repositoryAssembly"/>.  The default values are to use the 
            <paramref name="repositoryType"/> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository"/> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name"/> as the name of the repository.
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute"/> 
            attributes defined on the <paramref name="repositoryAssembly"/>.
            </para>
            <para>
            If a repository for the <paramref name="repositoryAssembly"/> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType"/>.
            Also the <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryAssembly"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.CreateRepository(System.String,System.Type)">
            <summary>
            Creates a new repository for the specified repository.
            </summary>
            <param name="repositoryName">The repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.
            If this param is <see langword="null" /> then the default repository type is used.</param>
            <returns>The new repository.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.CustomRepositorySelector.GetRepository(System.String)"/> with the
            same repository specified will return the same repository instance.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> is <see langword="null" />.</exception>
            <exception cref="T:log4net.Core.LogException"><paramref name="repositoryName"/> already exists.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.ExistsRepository(System.String)">
            <summary>
            Test if a named repository exists
            </summary>
            <param name="repositoryName">the named repository to check</param>
            <returns><c>true</c> if the repository exists</returns>
            <remarks>
            <para>
            Test if a named repository exists. Use <see cref="M:log4net.Core.CustomRepositorySelector.CreateRepository(System.String,System.Type)"/>
            to create a new repository and <see cref="M:log4net.Core.CustomRepositorySelector.GetRepository(System.String)"/> to retrieve 
            a repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.GetAllRepositories">
            <summary>
            Gets a list of <see cref="T:log4net.Repository.ILoggerRepository"/> objects
            </summary>
            <returns>an array of all known <see cref="T:log4net.Repository.ILoggerRepository"/> objects</returns>
            <remarks>
            <para>
            Gets an array of all of the repositories created by this selector.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.AliasRepository(System.String,log4net.Repository.ILoggerRepository)">
            <summary>
            Aliases a repository to an existing repository.
            </summary>
            <param name="repositoryAlias">The repository to alias.</param>
            <param name="repositoryTarget">The repository that the repository is aliased to.</param>
            <remarks>
            <para>
            The repository specified will be aliased to the repository when created. 
            The repository must not already exist.
            </para>
            <para>
            When the repository is created it must utilize the same repository type as 
            the repository it is aliased to, otherwise the aliasing will fail.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="repositoryAlias" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="repositoryTarget" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.OnLoggerRepositoryCreatedEvent(log4net.Repository.ILoggerRepository)">
            <summary>
            Notifies the registered listeners that the repository has been created.
            </summary>
            <param name="repository">The repository that has been created.</param>
            <remarks>
            <para>
            Raises the <see cref="E:log4net.Core.CustomRepositorySelector.LoggerRepositoryCreatedEvent"/> event.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.GetInfoForAssembly(System.Reflection.Assembly,System.String@,System.Type@)">
            <summary>
            Gets the repository name and repository type for the specified assembly.
            </summary>
            <param name="assembly">The assembly that has a <see cref="T:log4net.Config.RepositoryAttribute"/>.</param>
            <param name="repositoryName">in/out param to hold the repository name to use for the assembly, caller should set this to the default value before calling.</param>
            <param name="repositoryType">in/out param to hold the type of the repository to create for the assembly, caller should set this to the default value before calling.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.ConfigureRepository(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Configures the repository using information from the assembly.
            </summary>
            <param name="assembly">The assembly containing <see cref="T:log4net.Config.ConfiguratorAttribute"/>
            attributes which define the configuration for the repository.</param>
            <param name="repository">The repository to configure.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="assembly" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="repository" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.LoadPlugins(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Loads the attribute defined plugins on the assembly.
            </summary>
            <param name="assembly">The assembly that contains the attributes.</param>
            <param name="repository">The repository to add the plugins to.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="assembly" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="repository" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.LoadAliases(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Loads the attribute defined aliases on the assembly.
            </summary>
            <param name="assembly">The assembly that contains the attributes.</param>
            <param name="repository">The repository to alias to.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="assembly" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="repository" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="F:log4net.Core.CustomRepositorySelector.declaringType">
            <summary>
            The fully qualified type of the DefaultRepositorySelector class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
    </members>
</doc>
